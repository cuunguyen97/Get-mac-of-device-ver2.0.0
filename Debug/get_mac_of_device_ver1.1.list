
get_mac_of_device_ver1.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000067b4  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000271c8  08006948  08006948  00016948  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802db10  0802db10  00040074  2**0
                  CONTENTS
  4 .ARM          00000000  0802db10  0802db10  00040074  2**0
                  CONTENTS
  5 .preinit_array 00000000  0802db10  0802db10  00040074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802db10  0802db10  0003db10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802db14  0802db14  0003db14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0802db18  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004b0  20000074  0802db8c  00040074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000524  0802db8c  00040524  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a477  00000000  00000000  000400a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000229f  00000000  00000000  0004a51b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009e8  00000000  00000000  0004c7c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008b0  00000000  00000000  0004d1a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000e715  00000000  00000000  0004da58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c07e  00000000  00000000  0005c16d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00047523  00000000  00000000  000681eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000af70e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000028bc  00000000  00000000  000af760  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000074 	.word	0x20000074
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08006930 	.word	0x08006930

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000078 	.word	0x20000078
 80001d0:	08006930 	.word	0x08006930

080001d4 <strcmp>:
 80001d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001dc:	2a01      	cmp	r2, #1
 80001de:	bf28      	it	cs
 80001e0:	429a      	cmpcs	r2, r3
 80001e2:	d0f7      	beq.n	80001d4 <strcmp>
 80001e4:	1ad0      	subs	r0, r2, r3
 80001e6:	4770      	bx	lr

080001e8 <strlen>:
 80001e8:	4603      	mov	r3, r0
 80001ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ee:	2a00      	cmp	r2, #0
 80001f0:	d1fb      	bne.n	80001ea <strlen+0x2>
 80001f2:	1a18      	subs	r0, r3, r0
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr

080001f8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80001fc:	4b16      	ldr	r3, [pc, #88]	; (8000258 <SystemInit+0x60>)
 80001fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000202:	4a15      	ldr	r2, [pc, #84]	; (8000258 <SystemInit+0x60>)
 8000204:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000208:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800020c:	4b13      	ldr	r3, [pc, #76]	; (800025c <SystemInit+0x64>)
 800020e:	681b      	ldr	r3, [r3, #0]
 8000210:	4a12      	ldr	r2, [pc, #72]	; (800025c <SystemInit+0x64>)
 8000212:	f043 0301 	orr.w	r3, r3, #1
 8000216:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000218:	4b10      	ldr	r3, [pc, #64]	; (800025c <SystemInit+0x64>)
 800021a:	2200      	movs	r2, #0
 800021c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800021e:	4b0f      	ldr	r3, [pc, #60]	; (800025c <SystemInit+0x64>)
 8000220:	681b      	ldr	r3, [r3, #0]
 8000222:	4a0e      	ldr	r2, [pc, #56]	; (800025c <SystemInit+0x64>)
 8000224:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000228:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800022c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800022e:	4b0b      	ldr	r3, [pc, #44]	; (800025c <SystemInit+0x64>)
 8000230:	4a0b      	ldr	r2, [pc, #44]	; (8000260 <SystemInit+0x68>)
 8000232:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000234:	4b09      	ldr	r3, [pc, #36]	; (800025c <SystemInit+0x64>)
 8000236:	681b      	ldr	r3, [r3, #0]
 8000238:	4a08      	ldr	r2, [pc, #32]	; (800025c <SystemInit+0x64>)
 800023a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800023e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000240:	4b06      	ldr	r3, [pc, #24]	; (800025c <SystemInit+0x64>)
 8000242:	2200      	movs	r2, #0
 8000244:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8000246:	f000 f88f 	bl	8000368 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800024a:	4b03      	ldr	r3, [pc, #12]	; (8000258 <SystemInit+0x60>)
 800024c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000250:	609a      	str	r2, [r3, #8]
#endif
}
 8000252:	bf00      	nop
 8000254:	bd80      	pop	{r7, pc}
 8000256:	bf00      	nop
 8000258:	e000ed00 	.word	0xe000ed00
 800025c:	40023800 	.word	0x40023800
 8000260:	24003010 	.word	0x24003010

08000264 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000264:	b480      	push	{r7}
 8000266:	b087      	sub	sp, #28
 8000268:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 800026a:	2300      	movs	r3, #0
 800026c:	613b      	str	r3, [r7, #16]
 800026e:	2300      	movs	r3, #0
 8000270:	617b      	str	r3, [r7, #20]
 8000272:	2302      	movs	r3, #2
 8000274:	60fb      	str	r3, [r7, #12]
 8000276:	2300      	movs	r3, #0
 8000278:	60bb      	str	r3, [r7, #8]
 800027a:	2302      	movs	r3, #2
 800027c:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800027e:	4b35      	ldr	r3, [pc, #212]	; (8000354 <SystemCoreClockUpdate+0xf0>)
 8000280:	689b      	ldr	r3, [r3, #8]
 8000282:	f003 030c 	and.w	r3, r3, #12
 8000286:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8000288:	693b      	ldr	r3, [r7, #16]
 800028a:	2b08      	cmp	r3, #8
 800028c:	d011      	beq.n	80002b2 <SystemCoreClockUpdate+0x4e>
 800028e:	693b      	ldr	r3, [r7, #16]
 8000290:	2b08      	cmp	r3, #8
 8000292:	d844      	bhi.n	800031e <SystemCoreClockUpdate+0xba>
 8000294:	693b      	ldr	r3, [r7, #16]
 8000296:	2b00      	cmp	r3, #0
 8000298:	d003      	beq.n	80002a2 <SystemCoreClockUpdate+0x3e>
 800029a:	693b      	ldr	r3, [r7, #16]
 800029c:	2b04      	cmp	r3, #4
 800029e:	d004      	beq.n	80002aa <SystemCoreClockUpdate+0x46>
 80002a0:	e03d      	b.n	800031e <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80002a2:	4b2d      	ldr	r3, [pc, #180]	; (8000358 <SystemCoreClockUpdate+0xf4>)
 80002a4:	4a2d      	ldr	r2, [pc, #180]	; (800035c <SystemCoreClockUpdate+0xf8>)
 80002a6:	601a      	str	r2, [r3, #0]
      break;
 80002a8:	e03d      	b.n	8000326 <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80002aa:	4b2b      	ldr	r3, [pc, #172]	; (8000358 <SystemCoreClockUpdate+0xf4>)
 80002ac:	4a2c      	ldr	r2, [pc, #176]	; (8000360 <SystemCoreClockUpdate+0xfc>)
 80002ae:	601a      	str	r2, [r3, #0]
      break;
 80002b0:	e039      	b.n	8000326 <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80002b2:	4b28      	ldr	r3, [pc, #160]	; (8000354 <SystemCoreClockUpdate+0xf0>)
 80002b4:	685b      	ldr	r3, [r3, #4]
 80002b6:	0d9b      	lsrs	r3, r3, #22
 80002b8:	f003 0301 	and.w	r3, r3, #1
 80002bc:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80002be:	4b25      	ldr	r3, [pc, #148]	; (8000354 <SystemCoreClockUpdate+0xf0>)
 80002c0:	685b      	ldr	r3, [r3, #4]
 80002c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80002c6:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 80002c8:	68bb      	ldr	r3, [r7, #8]
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d00c      	beq.n	80002e8 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80002ce:	4a24      	ldr	r2, [pc, #144]	; (8000360 <SystemCoreClockUpdate+0xfc>)
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80002d6:	4a1f      	ldr	r2, [pc, #124]	; (8000354 <SystemCoreClockUpdate+0xf0>)
 80002d8:	6852      	ldr	r2, [r2, #4]
 80002da:	0992      	lsrs	r2, r2, #6
 80002dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80002e0:	fb02 f303 	mul.w	r3, r2, r3
 80002e4:	617b      	str	r3, [r7, #20]
 80002e6:	e00b      	b.n	8000300 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80002e8:	4a1c      	ldr	r2, [pc, #112]	; (800035c <SystemCoreClockUpdate+0xf8>)
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80002f0:	4a18      	ldr	r2, [pc, #96]	; (8000354 <SystemCoreClockUpdate+0xf0>)
 80002f2:	6852      	ldr	r2, [r2, #4]
 80002f4:	0992      	lsrs	r2, r2, #6
 80002f6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80002fa:	fb02 f303 	mul.w	r3, r2, r3
 80002fe:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000300:	4b14      	ldr	r3, [pc, #80]	; (8000354 <SystemCoreClockUpdate+0xf0>)
 8000302:	685b      	ldr	r3, [r3, #4]
 8000304:	0c1b      	lsrs	r3, r3, #16
 8000306:	f003 0303 	and.w	r3, r3, #3
 800030a:	3301      	adds	r3, #1
 800030c:	005b      	lsls	r3, r3, #1
 800030e:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8000310:	697a      	ldr	r2, [r7, #20]
 8000312:	68fb      	ldr	r3, [r7, #12]
 8000314:	fbb2 f3f3 	udiv	r3, r2, r3
 8000318:	4a0f      	ldr	r2, [pc, #60]	; (8000358 <SystemCoreClockUpdate+0xf4>)
 800031a:	6013      	str	r3, [r2, #0]
      break;
 800031c:	e003      	b.n	8000326 <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 800031e:	4b0e      	ldr	r3, [pc, #56]	; (8000358 <SystemCoreClockUpdate+0xf4>)
 8000320:	4a0e      	ldr	r2, [pc, #56]	; (800035c <SystemCoreClockUpdate+0xf8>)
 8000322:	601a      	str	r2, [r3, #0]
      break;
 8000324:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8000326:	4b0b      	ldr	r3, [pc, #44]	; (8000354 <SystemCoreClockUpdate+0xf0>)
 8000328:	689b      	ldr	r3, [r3, #8]
 800032a:	091b      	lsrs	r3, r3, #4
 800032c:	f003 030f 	and.w	r3, r3, #15
 8000330:	4a0c      	ldr	r2, [pc, #48]	; (8000364 <SystemCoreClockUpdate+0x100>)
 8000332:	5cd3      	ldrb	r3, [r2, r3]
 8000334:	b2db      	uxtb	r3, r3
 8000336:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8000338:	4b07      	ldr	r3, [pc, #28]	; (8000358 <SystemCoreClockUpdate+0xf4>)
 800033a:	681a      	ldr	r2, [r3, #0]
 800033c:	693b      	ldr	r3, [r7, #16]
 800033e:	fa22 f303 	lsr.w	r3, r2, r3
 8000342:	4a05      	ldr	r2, [pc, #20]	; (8000358 <SystemCoreClockUpdate+0xf4>)
 8000344:	6013      	str	r3, [r2, #0]
}
 8000346:	bf00      	nop
 8000348:	371c      	adds	r7, #28
 800034a:	46bd      	mov	sp, r7
 800034c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000350:	4770      	bx	lr
 8000352:	bf00      	nop
 8000354:	40023800 	.word	0x40023800
 8000358:	20000000 	.word	0x20000000
 800035c:	00f42400 	.word	0x00f42400
 8000360:	017d7840 	.word	0x017d7840
 8000364:	20000004 	.word	0x20000004

08000368 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000368:	b480      	push	{r7}
 800036a:	af00      	add	r7, sp, #0
/******************************************************************************/

  /* At this stage the HSI is already enabled and used as System clock source */

    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 800036c:	4b23      	ldr	r3, [pc, #140]	; (80003fc <SetSysClock+0x94>)
 800036e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000370:	4a22      	ldr	r2, [pc, #136]	; (80003fc <SetSysClock+0x94>)
 8000372:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000376:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8000378:	4b21      	ldr	r3, [pc, #132]	; (8000400 <SetSysClock+0x98>)
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	4a20      	ldr	r2, [pc, #128]	; (8000400 <SetSysClock+0x98>)
 800037e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000382:	6013      	str	r3, [r2, #0]

  /* HCLK = SYSCLK / 1*/
  RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8000384:	4b1d      	ldr	r3, [pc, #116]	; (80003fc <SetSysClock+0x94>)
 8000386:	4a1d      	ldr	r2, [pc, #116]	; (80003fc <SetSysClock+0x94>)
 8000388:	689b      	ldr	r3, [r3, #8]
 800038a:	6093      	str	r3, [r2, #8]

  /* PCLK2 = HCLK / 1*/
  RCC->CFGR |= RCC_CFGR_PPRE2_DIV1;
 800038c:	4b1b      	ldr	r3, [pc, #108]	; (80003fc <SetSysClock+0x94>)
 800038e:	4a1b      	ldr	r2, [pc, #108]	; (80003fc <SetSysClock+0x94>)
 8000390:	689b      	ldr	r3, [r3, #8]
 8000392:	6093      	str	r3, [r2, #8]
    
  /* PCLK1 = HCLK / 1*/
  RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
 8000394:	4b19      	ldr	r3, [pc, #100]	; (80003fc <SetSysClock+0x94>)
 8000396:	689b      	ldr	r3, [r3, #8]
 8000398:	4a18      	ldr	r2, [pc, #96]	; (80003fc <SetSysClock+0x94>)
 800039a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800039e:	6093      	str	r3, [r2, #8]

  /* Configure the main PLL */
  RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80003a0:	4b16      	ldr	r3, [pc, #88]	; (80003fc <SetSysClock+0x94>)
 80003a2:	4a18      	ldr	r2, [pc, #96]	; (8000404 <SetSysClock+0x9c>)
 80003a4:	605a      	str	r2, [r3, #4]
                 (RCC_PLLCFGR_PLLSRC_HSI) | (PLL_Q << 24);

  /* Enable the main PLL */
  RCC->CR |= RCC_CR_PLLON;
 80003a6:	4b15      	ldr	r3, [pc, #84]	; (80003fc <SetSysClock+0x94>)
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	4a14      	ldr	r2, [pc, #80]	; (80003fc <SetSysClock+0x94>)
 80003ac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80003b0:	6013      	str	r3, [r2, #0]

  /* Wait till the main PLL is ready */
  while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80003b2:	bf00      	nop
 80003b4:	4b11      	ldr	r3, [pc, #68]	; (80003fc <SetSysClock+0x94>)
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d0f9      	beq.n	80003b4 <SetSysClock+0x4c>
  {
  }
   
  /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
  FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
 80003c0:	4b11      	ldr	r3, [pc, #68]	; (8000408 <SetSysClock+0xa0>)
 80003c2:	f240 6202 	movw	r2, #1538	; 0x602
 80003c6:	601a      	str	r2, [r3, #0]

  /* Select the main PLL as system clock source */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80003c8:	4b0c      	ldr	r3, [pc, #48]	; (80003fc <SetSysClock+0x94>)
 80003ca:	689b      	ldr	r3, [r3, #8]
 80003cc:	4a0b      	ldr	r2, [pc, #44]	; (80003fc <SetSysClock+0x94>)
 80003ce:	f023 0303 	bic.w	r3, r3, #3
 80003d2:	6093      	str	r3, [r2, #8]
  RCC->CFGR |= RCC_CFGR_SW_PLL;
 80003d4:	4b09      	ldr	r3, [pc, #36]	; (80003fc <SetSysClock+0x94>)
 80003d6:	689b      	ldr	r3, [r3, #8]
 80003d8:	4a08      	ldr	r2, [pc, #32]	; (80003fc <SetSysClock+0x94>)
 80003da:	f043 0302 	orr.w	r3, r3, #2
 80003de:	6093      	str	r3, [r2, #8]

  /* Wait till the main PLL is used as system clock source */
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 80003e0:	bf00      	nop
 80003e2:	4b06      	ldr	r3, [pc, #24]	; (80003fc <SetSysClock+0x94>)
 80003e4:	689b      	ldr	r3, [r3, #8]
 80003e6:	f003 030c 	and.w	r3, r3, #12
 80003ea:	2b08      	cmp	r3, #8
 80003ec:	d1f9      	bne.n	80003e2 <SetSysClock+0x7a>
}
 80003ee:	bf00      	nop
 80003f0:	bf00      	nop
 80003f2:	46bd      	mov	sp, r7
 80003f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f8:	4770      	bx	lr
 80003fa:	bf00      	nop
 80003fc:	40023800 	.word	0x40023800
 8000400:	40007000 	.word	0x40007000
 8000404:	08015410 	.word	0x08015410
 8000408:	40023c00 	.word	0x40023c00

0800040c <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 800040c:	b480      	push	{r7}
 800040e:	b085      	sub	sp, #20
 8000410:	af00      	add	r7, sp, #0
 8000412:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8000414:	2300      	movs	r3, #0
 8000416:	73fb      	strb	r3, [r7, #15]
 8000418:	2300      	movs	r3, #0
 800041a:	73bb      	strb	r3, [r7, #14]
 800041c:	230f      	movs	r3, #15
 800041e:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	78db      	ldrb	r3, [r3, #3]
 8000424:	2b00      	cmp	r3, #0
 8000426:	d039      	beq.n	800049c <NVIC_Init+0x90>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000428:	4b27      	ldr	r3, [pc, #156]	; (80004c8 <NVIC_Init+0xbc>)
 800042a:	68db      	ldr	r3, [r3, #12]
 800042c:	43db      	mvns	r3, r3
 800042e:	0a1b      	lsrs	r3, r3, #8
 8000430:	b2db      	uxtb	r3, r3
 8000432:	f003 0307 	and.w	r3, r3, #7
 8000436:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 8000438:	7bfb      	ldrb	r3, [r7, #15]
 800043a:	f1c3 0304 	rsb	r3, r3, #4
 800043e:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 8000440:	7b7a      	ldrb	r2, [r7, #13]
 8000442:	7bfb      	ldrb	r3, [r7, #15]
 8000444:	fa42 f303 	asr.w	r3, r2, r3
 8000448:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	785b      	ldrb	r3, [r3, #1]
 800044e:	461a      	mov	r2, r3
 8000450:	7bbb      	ldrb	r3, [r7, #14]
 8000452:	fa02 f303 	lsl.w	r3, r2, r3
 8000456:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	789a      	ldrb	r2, [r3, #2]
 800045c:	7b7b      	ldrb	r3, [r7, #13]
 800045e:	4013      	ands	r3, r2
 8000460:	b2da      	uxtb	r2, r3
 8000462:	7bfb      	ldrb	r3, [r7, #15]
 8000464:	4313      	orrs	r3, r2
 8000466:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 8000468:	7bfb      	ldrb	r3, [r7, #15]
 800046a:	011b      	lsls	r3, r3, #4
 800046c:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 800046e:	4a17      	ldr	r2, [pc, #92]	; (80004cc <NVIC_Init+0xc0>)
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	781b      	ldrb	r3, [r3, #0]
 8000474:	4413      	add	r3, r2
 8000476:	7bfa      	ldrb	r2, [r7, #15]
 8000478:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	781b      	ldrb	r3, [r3, #0]
 8000480:	f003 031f 	and.w	r3, r3, #31
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000484:	4911      	ldr	r1, [pc, #68]	; (80004cc <NVIC_Init+0xc0>)
 8000486:	687a      	ldr	r2, [r7, #4]
 8000488:	7812      	ldrb	r2, [r2, #0]
 800048a:	0952      	lsrs	r2, r2, #5
 800048c:	b2d2      	uxtb	r2, r2
 800048e:	4610      	mov	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000490:	2201      	movs	r2, #1
 8000492:	fa02 f303 	lsl.w	r3, r2, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000496:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 800049a:	e00f      	b.n	80004bc <NVIC_Init+0xb0>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	781b      	ldrb	r3, [r3, #0]
 80004a0:	f003 031f 	and.w	r3, r3, #31
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80004a4:	4909      	ldr	r1, [pc, #36]	; (80004cc <NVIC_Init+0xc0>)
 80004a6:	687a      	ldr	r2, [r7, #4]
 80004a8:	7812      	ldrb	r2, [r2, #0]
 80004aa:	0952      	lsrs	r2, r2, #5
 80004ac:	b2d2      	uxtb	r2, r2
 80004ae:	4610      	mov	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80004b0:	2201      	movs	r2, #1
 80004b2:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80004b4:	f100 0320 	add.w	r3, r0, #32
 80004b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80004bc:	bf00      	nop
 80004be:	3714      	adds	r7, #20
 80004c0:	46bd      	mov	sp, r7
 80004c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c6:	4770      	bx	lr
 80004c8:	e000ed00 	.word	0xe000ed00
 80004cc:	e000e100 	.word	0xe000e100

080004d0 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80004d0:	b480      	push	{r7}
 80004d2:	b087      	sub	sp, #28
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
 80004d8:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 80004da:	2300      	movs	r3, #0
 80004dc:	617b      	str	r3, [r7, #20]
 80004de:	2300      	movs	r3, #0
 80004e0:	613b      	str	r3, [r7, #16]
 80004e2:	2300      	movs	r3, #0
 80004e4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80004e6:	2300      	movs	r3, #0
 80004e8:	617b      	str	r3, [r7, #20]
 80004ea:	e076      	b.n	80005da <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 80004ec:	2201      	movs	r2, #1
 80004ee:	697b      	ldr	r3, [r7, #20]
 80004f0:	fa02 f303 	lsl.w	r3, r2, r3
 80004f4:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80004f6:	683b      	ldr	r3, [r7, #0]
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	693a      	ldr	r2, [r7, #16]
 80004fc:	4013      	ands	r3, r2
 80004fe:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000500:	68fa      	ldr	r2, [r7, #12]
 8000502:	693b      	ldr	r3, [r7, #16]
 8000504:	429a      	cmp	r2, r3
 8000506:	d165      	bne.n	80005d4 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	681a      	ldr	r2, [r3, #0]
 800050c:	697b      	ldr	r3, [r7, #20]
 800050e:	005b      	lsls	r3, r3, #1
 8000510:	2103      	movs	r1, #3
 8000512:	fa01 f303 	lsl.w	r3, r1, r3
 8000516:	43db      	mvns	r3, r3
 8000518:	401a      	ands	r2, r3
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	681a      	ldr	r2, [r3, #0]
 8000522:	683b      	ldr	r3, [r7, #0]
 8000524:	791b      	ldrb	r3, [r3, #4]
 8000526:	4619      	mov	r1, r3
 8000528:	697b      	ldr	r3, [r7, #20]
 800052a:	005b      	lsls	r3, r3, #1
 800052c:	fa01 f303 	lsl.w	r3, r1, r3
 8000530:	431a      	orrs	r2, r3
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000536:	683b      	ldr	r3, [r7, #0]
 8000538:	791b      	ldrb	r3, [r3, #4]
 800053a:	2b01      	cmp	r3, #1
 800053c:	d003      	beq.n	8000546 <GPIO_Init+0x76>
 800053e:	683b      	ldr	r3, [r7, #0]
 8000540:	791b      	ldrb	r3, [r3, #4]
 8000542:	2b02      	cmp	r3, #2
 8000544:	d12e      	bne.n	80005a4 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	689a      	ldr	r2, [r3, #8]
 800054a:	697b      	ldr	r3, [r7, #20]
 800054c:	005b      	lsls	r3, r3, #1
 800054e:	2103      	movs	r1, #3
 8000550:	fa01 f303 	lsl.w	r3, r1, r3
 8000554:	43db      	mvns	r3, r3
 8000556:	401a      	ands	r2, r3
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	689a      	ldr	r2, [r3, #8]
 8000560:	683b      	ldr	r3, [r7, #0]
 8000562:	795b      	ldrb	r3, [r3, #5]
 8000564:	4619      	mov	r1, r3
 8000566:	697b      	ldr	r3, [r7, #20]
 8000568:	005b      	lsls	r3, r3, #1
 800056a:	fa01 f303 	lsl.w	r3, r1, r3
 800056e:	431a      	orrs	r2, r3
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	685a      	ldr	r2, [r3, #4]
 8000578:	697b      	ldr	r3, [r7, #20]
 800057a:	b29b      	uxth	r3, r3
 800057c:	4619      	mov	r1, r3
 800057e:	2301      	movs	r3, #1
 8000580:	408b      	lsls	r3, r1
 8000582:	43db      	mvns	r3, r3
 8000584:	401a      	ands	r2, r3
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	685b      	ldr	r3, [r3, #4]
 800058e:	683a      	ldr	r2, [r7, #0]
 8000590:	7992      	ldrb	r2, [r2, #6]
 8000592:	4611      	mov	r1, r2
 8000594:	697a      	ldr	r2, [r7, #20]
 8000596:	b292      	uxth	r2, r2
 8000598:	fa01 f202 	lsl.w	r2, r1, r2
 800059c:	b292      	uxth	r2, r2
 800059e:	431a      	orrs	r2, r3
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	68da      	ldr	r2, [r3, #12]
 80005a8:	697b      	ldr	r3, [r7, #20]
 80005aa:	b29b      	uxth	r3, r3
 80005ac:	005b      	lsls	r3, r3, #1
 80005ae:	2103      	movs	r1, #3
 80005b0:	fa01 f303 	lsl.w	r3, r1, r3
 80005b4:	43db      	mvns	r3, r3
 80005b6:	401a      	ands	r2, r3
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	68da      	ldr	r2, [r3, #12]
 80005c0:	683b      	ldr	r3, [r7, #0]
 80005c2:	79db      	ldrb	r3, [r3, #7]
 80005c4:	4619      	mov	r1, r3
 80005c6:	697b      	ldr	r3, [r7, #20]
 80005c8:	005b      	lsls	r3, r3, #1
 80005ca:	fa01 f303 	lsl.w	r3, r1, r3
 80005ce:	431a      	orrs	r2, r3
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80005d4:	697b      	ldr	r3, [r7, #20]
 80005d6:	3301      	adds	r3, #1
 80005d8:	617b      	str	r3, [r7, #20]
 80005da:	697b      	ldr	r3, [r7, #20]
 80005dc:	2b0f      	cmp	r3, #15
 80005de:	d985      	bls.n	80004ec <GPIO_Init+0x1c>
    }
  }
}
 80005e0:	bf00      	nop
 80005e2:	bf00      	nop
 80005e4:	371c      	adds	r7, #28
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr

080005ee <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80005ee:	b480      	push	{r7}
 80005f0:	b085      	sub	sp, #20
 80005f2:	af00      	add	r7, sp, #0
 80005f4:	6078      	str	r0, [r7, #4]
 80005f6:	460b      	mov	r3, r1
 80005f8:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 80005fa:	2300      	movs	r3, #0
 80005fc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	691a      	ldr	r2, [r3, #16]
 8000602:	887b      	ldrh	r3, [r7, #2]
 8000604:	4013      	ands	r3, r2
 8000606:	2b00      	cmp	r3, #0
 8000608:	d002      	beq.n	8000610 <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 800060a:	2301      	movs	r3, #1
 800060c:	73fb      	strb	r3, [r7, #15]
 800060e:	e001      	b.n	8000614 <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 8000610:	2300      	movs	r3, #0
 8000612:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000614:	7bfb      	ldrb	r3, [r7, #15]
}
 8000616:	4618      	mov	r0, r3
 8000618:	3714      	adds	r7, #20
 800061a:	46bd      	mov	sp, r7
 800061c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000620:	4770      	bx	lr

08000622 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_LTDC: Connect LTDC pins to AF14 for STM32F429xx/439xx devices.
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8000622:	b480      	push	{r7}
 8000624:	b085      	sub	sp, #20
 8000626:	af00      	add	r7, sp, #0
 8000628:	6078      	str	r0, [r7, #4]
 800062a:	460b      	mov	r3, r1
 800062c:	807b      	strh	r3, [r7, #2]
 800062e:	4613      	mov	r3, r2
 8000630:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8000632:	2300      	movs	r3, #0
 8000634:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8000636:	2300      	movs	r3, #0
 8000638:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));

  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 800063a:	787a      	ldrb	r2, [r7, #1]
 800063c:	887b      	ldrh	r3, [r7, #2]
 800063e:	f003 0307 	and.w	r3, r3, #7
 8000642:	009b      	lsls	r3, r3, #2
 8000644:	fa02 f303 	lsl.w	r3, r2, r3
 8000648:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 800064a:	887b      	ldrh	r3, [r7, #2]
 800064c:	08db      	lsrs	r3, r3, #3
 800064e:	b29b      	uxth	r3, r3
 8000650:	461a      	mov	r2, r3
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	3208      	adds	r2, #8
 8000656:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800065a:	887b      	ldrh	r3, [r7, #2]
 800065c:	f003 0307 	and.w	r3, r3, #7
 8000660:	009b      	lsls	r3, r3, #2
 8000662:	210f      	movs	r1, #15
 8000664:	fa01 f303 	lsl.w	r3, r1, r3
 8000668:	43db      	mvns	r3, r3
 800066a:	8879      	ldrh	r1, [r7, #2]
 800066c:	08c9      	lsrs	r1, r1, #3
 800066e:	b289      	uxth	r1, r1
 8000670:	4608      	mov	r0, r1
 8000672:	ea02 0103 	and.w	r1, r2, r3
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	f100 0208 	add.w	r2, r0, #8
 800067c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8000680:	887b      	ldrh	r3, [r7, #2]
 8000682:	08db      	lsrs	r3, r3, #3
 8000684:	b29b      	uxth	r3, r3
 8000686:	461a      	mov	r2, r3
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	3208      	adds	r2, #8
 800068c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000690:	68fa      	ldr	r2, [r7, #12]
 8000692:	4313      	orrs	r3, r2
 8000694:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8000696:	887b      	ldrh	r3, [r7, #2]
 8000698:	08db      	lsrs	r3, r3, #3
 800069a:	b29b      	uxth	r3, r3
 800069c:	461a      	mov	r2, r3
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	3208      	adds	r2, #8
 80006a2:	68b9      	ldr	r1, [r7, #8]
 80006a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80006a8:	bf00      	nop
 80006aa:	3714      	adds	r7, #20
 80006ac:	46bd      	mov	sp, r7
 80006ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b2:	4770      	bx	lr

080006b4 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 80006b4:	b480      	push	{r7}
 80006b6:	b089      	sub	sp, #36	; 0x24
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 80006bc:	2300      	movs	r3, #0
 80006be:	61bb      	str	r3, [r7, #24]
 80006c0:	2300      	movs	r3, #0
 80006c2:	617b      	str	r3, [r7, #20]
 80006c4:	2300      	movs	r3, #0
 80006c6:	61fb      	str	r3, [r7, #28]
 80006c8:	2302      	movs	r3, #2
 80006ca:	613b      	str	r3, [r7, #16]
 80006cc:	2300      	movs	r3, #0
 80006ce:	60fb      	str	r3, [r7, #12]
 80006d0:	2302      	movs	r3, #2
 80006d2:	60bb      	str	r3, [r7, #8]
#if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)
  uint32_t pllr = 2;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80006d4:	4b4a      	ldr	r3, [pc, #296]	; (8000800 <RCC_GetClocksFreq+0x14c>)
 80006d6:	689b      	ldr	r3, [r3, #8]
 80006d8:	f003 030c 	and.w	r3, r3, #12
 80006dc:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 80006de:	69bb      	ldr	r3, [r7, #24]
 80006e0:	2b08      	cmp	r3, #8
 80006e2:	d011      	beq.n	8000708 <RCC_GetClocksFreq+0x54>
 80006e4:	69bb      	ldr	r3, [r7, #24]
 80006e6:	2b08      	cmp	r3, #8
 80006e8:	d844      	bhi.n	8000774 <RCC_GetClocksFreq+0xc0>
 80006ea:	69bb      	ldr	r3, [r7, #24]
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d003      	beq.n	80006f8 <RCC_GetClocksFreq+0x44>
 80006f0:	69bb      	ldr	r3, [r7, #24]
 80006f2:	2b04      	cmp	r3, #4
 80006f4:	d004      	beq.n	8000700 <RCC_GetClocksFreq+0x4c>
 80006f6:	e03d      	b.n	8000774 <RCC_GetClocksFreq+0xc0>
  {
  case 0x00:  /* HSI used as system clock source */
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	4a42      	ldr	r2, [pc, #264]	; (8000804 <RCC_GetClocksFreq+0x150>)
 80006fc:	601a      	str	r2, [r3, #0]
    break;
 80006fe:	e03d      	b.n	800077c <RCC_GetClocksFreq+0xc8>
  case 0x04:  /* HSE used as system clock  source */
    RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	4a41      	ldr	r2, [pc, #260]	; (8000808 <RCC_GetClocksFreq+0x154>)
 8000704:	601a      	str	r2, [r3, #0]
    break;
 8000706:	e039      	b.n	800077c <RCC_GetClocksFreq+0xc8>
  case 0x08:  /* PLL P used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLP
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000708:	4b3d      	ldr	r3, [pc, #244]	; (8000800 <RCC_GetClocksFreq+0x14c>)
 800070a:	685b      	ldr	r3, [r3, #4]
 800070c:	0d9b      	lsrs	r3, r3, #22
 800070e:	f003 0301 	and.w	r3, r3, #1
 8000712:	60fb      	str	r3, [r7, #12]
    pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000714:	4b3a      	ldr	r3, [pc, #232]	; (8000800 <RCC_GetClocksFreq+0x14c>)
 8000716:	685b      	ldr	r3, [r3, #4]
 8000718:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800071c:	60bb      	str	r3, [r7, #8]

    if (pllsource != 0)
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	2b00      	cmp	r3, #0
 8000722:	d00c      	beq.n	800073e <RCC_GetClocksFreq+0x8a>
    {
      /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000724:	4a38      	ldr	r2, [pc, #224]	; (8000808 <RCC_GetClocksFreq+0x154>)
 8000726:	68bb      	ldr	r3, [r7, #8]
 8000728:	fbb2 f3f3 	udiv	r3, r2, r3
 800072c:	4a34      	ldr	r2, [pc, #208]	; (8000800 <RCC_GetClocksFreq+0x14c>)
 800072e:	6852      	ldr	r2, [r2, #4]
 8000730:	0992      	lsrs	r2, r2, #6
 8000732:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000736:	fb02 f303 	mul.w	r3, r2, r3
 800073a:	61fb      	str	r3, [r7, #28]
 800073c:	e00b      	b.n	8000756 <RCC_GetClocksFreq+0xa2>
    }
    else
    {
      /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800073e:	4a31      	ldr	r2, [pc, #196]	; (8000804 <RCC_GetClocksFreq+0x150>)
 8000740:	68bb      	ldr	r3, [r7, #8]
 8000742:	fbb2 f3f3 	udiv	r3, r2, r3
 8000746:	4a2e      	ldr	r2, [pc, #184]	; (8000800 <RCC_GetClocksFreq+0x14c>)
 8000748:	6852      	ldr	r2, [r2, #4]
 800074a:	0992      	lsrs	r2, r2, #6
 800074c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000750:	fb02 f303 	mul.w	r3, r2, r3
 8000754:	61fb      	str	r3, [r7, #28]
    }

    pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000756:	4b2a      	ldr	r3, [pc, #168]	; (8000800 <RCC_GetClocksFreq+0x14c>)
 8000758:	685b      	ldr	r3, [r3, #4]
 800075a:	0c1b      	lsrs	r3, r3, #16
 800075c:	f003 0303 	and.w	r3, r3, #3
 8000760:	3301      	adds	r3, #1
 8000762:	005b      	lsls	r3, r3, #1
 8000764:	613b      	str	r3, [r7, #16]
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 8000766:	69fa      	ldr	r2, [r7, #28]
 8000768:	693b      	ldr	r3, [r7, #16]
 800076a:	fbb2 f2f3 	udiv	r2, r2, r3
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	601a      	str	r2, [r3, #0]
    break;
 8000772:	e003      	b.n	800077c <RCC_GetClocksFreq+0xc8>
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllr;
    break;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */

  default:
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	4a23      	ldr	r2, [pc, #140]	; (8000804 <RCC_GetClocksFreq+0x150>)
 8000778:	601a      	str	r2, [r3, #0]
    break;
 800077a:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 800077c:	4b20      	ldr	r3, [pc, #128]	; (8000800 <RCC_GetClocksFreq+0x14c>)
 800077e:	689b      	ldr	r3, [r3, #8]
 8000780:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000784:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 8000786:	69bb      	ldr	r3, [r7, #24]
 8000788:	091b      	lsrs	r3, r3, #4
 800078a:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 800078c:	4a1f      	ldr	r2, [pc, #124]	; (800080c <RCC_GetClocksFreq+0x158>)
 800078e:	69bb      	ldr	r3, [r7, #24]
 8000790:	4413      	add	r3, r2
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	b2db      	uxtb	r3, r3
 8000796:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	681a      	ldr	r2, [r3, #0]
 800079c:	697b      	ldr	r3, [r7, #20]
 800079e:	40da      	lsrs	r2, r3
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 80007a4:	4b16      	ldr	r3, [pc, #88]	; (8000800 <RCC_GetClocksFreq+0x14c>)
 80007a6:	689b      	ldr	r3, [r3, #8]
 80007a8:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80007ac:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 80007ae:	69bb      	ldr	r3, [r7, #24]
 80007b0:	0a9b      	lsrs	r3, r3, #10
 80007b2:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 80007b4:	4a15      	ldr	r2, [pc, #84]	; (800080c <RCC_GetClocksFreq+0x158>)
 80007b6:	69bb      	ldr	r3, [r7, #24]
 80007b8:	4413      	add	r3, r2
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	b2db      	uxtb	r3, r3
 80007be:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	685a      	ldr	r2, [r3, #4]
 80007c4:	697b      	ldr	r3, [r7, #20]
 80007c6:	40da      	lsrs	r2, r3
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 80007cc:	4b0c      	ldr	r3, [pc, #48]	; (8000800 <RCC_GetClocksFreq+0x14c>)
 80007ce:	689b      	ldr	r3, [r3, #8]
 80007d0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80007d4:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 80007d6:	69bb      	ldr	r3, [r7, #24]
 80007d8:	0b5b      	lsrs	r3, r3, #13
 80007da:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 80007dc:	4a0b      	ldr	r2, [pc, #44]	; (800080c <RCC_GetClocksFreq+0x158>)
 80007de:	69bb      	ldr	r3, [r7, #24]
 80007e0:	4413      	add	r3, r2
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	b2db      	uxtb	r3, r3
 80007e6:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	685a      	ldr	r2, [r3, #4]
 80007ec:	697b      	ldr	r3, [r7, #20]
 80007ee:	40da      	lsrs	r2, r3
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	60da      	str	r2, [r3, #12]
}
 80007f4:	bf00      	nop
 80007f6:	3724      	adds	r7, #36	; 0x24
 80007f8:	46bd      	mov	sp, r7
 80007fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fe:	4770      	bx	lr
 8000800:	40023800 	.word	0x40023800
 8000804:	00f42400 	.word	0x00f42400
 8000808:	017d7840 	.word	0x017d7840
 800080c:	20000014 	.word	0x20000014

08000810 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8000810:	b480      	push	{r7}
 8000812:	b083      	sub	sp, #12
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
 8000818:	460b      	mov	r3, r1
 800081a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800081c:	78fb      	ldrb	r3, [r7, #3]
 800081e:	2b00      	cmp	r3, #0
 8000820:	d006      	beq.n	8000830 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8000822:	4b0a      	ldr	r3, [pc, #40]	; (800084c <RCC_AHB1PeriphClockCmd+0x3c>)
 8000824:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000826:	4909      	ldr	r1, [pc, #36]	; (800084c <RCC_AHB1PeriphClockCmd+0x3c>)
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	4313      	orrs	r3, r2
 800082c:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 800082e:	e006      	b.n	800083e <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8000830:	4b06      	ldr	r3, [pc, #24]	; (800084c <RCC_AHB1PeriphClockCmd+0x3c>)
 8000832:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	43db      	mvns	r3, r3
 8000838:	4904      	ldr	r1, [pc, #16]	; (800084c <RCC_AHB1PeriphClockCmd+0x3c>)
 800083a:	4013      	ands	r3, r2
 800083c:	630b      	str	r3, [r1, #48]	; 0x30
}
 800083e:	bf00      	nop
 8000840:	370c      	adds	r7, #12
 8000842:	46bd      	mov	sp, r7
 8000844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000848:	4770      	bx	lr
 800084a:	bf00      	nop
 800084c:	40023800 	.word	0x40023800

08000850 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000850:	b480      	push	{r7}
 8000852:	b083      	sub	sp, #12
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
 8000858:	460b      	mov	r3, r1
 800085a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800085c:	78fb      	ldrb	r3, [r7, #3]
 800085e:	2b00      	cmp	r3, #0
 8000860:	d006      	beq.n	8000870 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000862:	4b0a      	ldr	r3, [pc, #40]	; (800088c <RCC_APB2PeriphClockCmd+0x3c>)
 8000864:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000866:	4909      	ldr	r1, [pc, #36]	; (800088c <RCC_APB2PeriphClockCmd+0x3c>)
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	4313      	orrs	r3, r2
 800086c:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 800086e:	e006      	b.n	800087e <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000870:	4b06      	ldr	r3, [pc, #24]	; (800088c <RCC_APB2PeriphClockCmd+0x3c>)
 8000872:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	43db      	mvns	r3, r3
 8000878:	4904      	ldr	r1, [pc, #16]	; (800088c <RCC_APB2PeriphClockCmd+0x3c>)
 800087a:	4013      	ands	r3, r2
 800087c:	644b      	str	r3, [r1, #68]	; 0x44
}
 800087e:	bf00      	nop
 8000880:	370c      	adds	r7, #12
 8000882:	46bd      	mov	sp, r7
 8000884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000888:	4770      	bx	lr
 800088a:	bf00      	nop
 800088c:	40023800 	.word	0x40023800

08000890 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000890:	b480      	push	{r7}
 8000892:	b083      	sub	sp, #12
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
 8000898:	460b      	mov	r3, r1
 800089a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800089c:	78fb      	ldrb	r3, [r7, #3]
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d006      	beq.n	80008b0 <RCC_APB2PeriphResetCmd+0x20>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 80008a2:	4b0a      	ldr	r3, [pc, #40]	; (80008cc <RCC_APB2PeriphResetCmd+0x3c>)
 80008a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80008a6:	4909      	ldr	r1, [pc, #36]	; (80008cc <RCC_APB2PeriphResetCmd+0x3c>)
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	4313      	orrs	r3, r2
 80008ac:	624b      	str	r3, [r1, #36]	; 0x24
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
  }
}
 80008ae:	e006      	b.n	80008be <RCC_APB2PeriphResetCmd+0x2e>
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 80008b0:	4b06      	ldr	r3, [pc, #24]	; (80008cc <RCC_APB2PeriphResetCmd+0x3c>)
 80008b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	43db      	mvns	r3, r3
 80008b8:	4904      	ldr	r1, [pc, #16]	; (80008cc <RCC_APB2PeriphResetCmd+0x3c>)
 80008ba:	4013      	ands	r3, r2
 80008bc:	624b      	str	r3, [r1, #36]	; 0x24
}
 80008be:	bf00      	nop
 80008c0:	370c      	adds	r7, #12
 80008c2:	46bd      	mov	sp, r7
 80008c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c8:	4770      	bx	lr
 80008ca:	bf00      	nop
 80008cc:	40023800 	.word	0x40023800

080008d0 <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 80008d0:	b480      	push	{r7}
 80008d2:	b085      	sub	sp, #20
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
 80008d8:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80008da:	2300      	movs	r3, #0
 80008dc:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	881b      	ldrh	r3, [r3, #0]
 80008e2:	81fb      	strh	r3, [r7, #14]
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_MASK;
 80008e4:	89fb      	ldrh	r3, [r7, #14]
 80008e6:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 80008ea:	81fb      	strh	r3, [r7, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80008ec:	683b      	ldr	r3, [r7, #0]
 80008ee:	881a      	ldrh	r2, [r3, #0]
 80008f0:	683b      	ldr	r3, [r7, #0]
 80008f2:	885b      	ldrh	r3, [r3, #2]
 80008f4:	4313      	orrs	r3, r2
 80008f6:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 80008f8:	683b      	ldr	r3, [r7, #0]
 80008fa:	889b      	ldrh	r3, [r3, #4]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80008fc:	4313      	orrs	r3, r2
 80008fe:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8000900:	683b      	ldr	r3, [r7, #0]
 8000902:	88db      	ldrh	r3, [r3, #6]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000904:	4313      	orrs	r3, r2
 8000906:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8000908:	683b      	ldr	r3, [r7, #0]
 800090a:	891b      	ldrh	r3, [r3, #8]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800090c:	4313      	orrs	r3, r2
 800090e:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8000910:	683b      	ldr	r3, [r7, #0]
 8000912:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000914:	4313      	orrs	r3, r2
 8000916:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 8000918:	683b      	ldr	r3, [r7, #0]
 800091a:	899b      	ldrh	r3, [r3, #12]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800091c:	4313      	orrs	r3, r2
 800091e:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 8000920:	683b      	ldr	r3, [r7, #0]
 8000922:	89db      	ldrh	r3, [r3, #14]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000924:	4313      	orrs	r3, r2
 8000926:	b29a      	uxth	r2, r3
 8000928:	89fb      	ldrh	r3, [r7, #14]
 800092a:	4313      	orrs	r3, r2
 800092c:	81fb      	strh	r3, [r7, #14]
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	89fa      	ldrh	r2, [r7, #14]
 8000932:	801a      	strh	r2, [r3, #0]

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	8b9b      	ldrh	r3, [r3, #28]
 8000938:	b29b      	uxth	r3, r3
 800093a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800093e:	b29a      	uxth	r2, r3
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	839a      	strh	r2, [r3, #28]
/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 8000944:	683b      	ldr	r3, [r7, #0]
 8000946:	8a1a      	ldrh	r2, [r3, #16]
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	821a      	strh	r2, [r3, #16]
}
 800094c:	bf00      	nop
 800094e:	3714      	adds	r7, #20
 8000950:	46bd      	mov	sp, r7
 8000952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000956:	4770      	bx	lr

08000958 <SPI_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 8000958:	b480      	push	{r7}
 800095a:	b083      	sub	sp, #12
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
 8000960:	460b      	mov	r3, r1
 8000962:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000964:	78fb      	ldrb	r3, [r7, #3]
 8000966:	2b00      	cmp	r3, #0
 8000968:	d008      	beq.n	800097c <SPI_Cmd+0x24>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= SPI_CR1_SPE;
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	881b      	ldrh	r3, [r3, #0]
 800096e:	b29b      	uxth	r3, r3
 8000970:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000974:	b29a      	uxth	r2, r3
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
  }
}
 800097a:	e007      	b.n	800098c <SPI_Cmd+0x34>
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	881b      	ldrh	r3, [r3, #0]
 8000980:	b29b      	uxth	r3, r3
 8000982:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000986:	b29a      	uxth	r2, r3
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	801a      	strh	r2, [r3, #0]
}
 800098c:	bf00      	nop
 800098e:	370c      	adds	r7, #12
 8000990:	46bd      	mov	sp, r7
 8000992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000996:	4770      	bx	lr

08000998 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b08a      	sub	sp, #40	; 0x28
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
 80009a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 80009a2:	2300      	movs	r3, #0
 80009a4:	627b      	str	r3, [r7, #36]	; 0x24
 80009a6:	2300      	movs	r3, #0
 80009a8:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 80009aa:	2300      	movs	r3, #0
 80009ac:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 80009ae:	2300      	movs	r3, #0
 80009b0:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	8a1b      	ldrh	r3, [r3, #16]
 80009b6:	b29b      	uxth	r3, r3
 80009b8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 80009ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009bc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80009c0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 80009c2:	683b      	ldr	r3, [r7, #0]
 80009c4:	88db      	ldrh	r3, [r3, #6]
 80009c6:	461a      	mov	r2, r3
 80009c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009ca:	4313      	orrs	r3, r2
 80009cc:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 80009ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009d0:	b29a      	uxth	r2, r3
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	899b      	ldrh	r3, [r3, #12]
 80009da:	b29b      	uxth	r3, r3
 80009dc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 80009de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009e0:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80009e4:	f023 030c 	bic.w	r3, r3, #12
 80009e8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80009ea:	683b      	ldr	r3, [r7, #0]
 80009ec:	889a      	ldrh	r2, [r3, #4]
 80009ee:	683b      	ldr	r3, [r7, #0]
 80009f0:	891b      	ldrh	r3, [r3, #8]
 80009f2:	4313      	orrs	r3, r2
 80009f4:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 80009f6:	683b      	ldr	r3, [r7, #0]
 80009f8:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80009fa:	4313      	orrs	r3, r2
 80009fc:	b29b      	uxth	r3, r3
 80009fe:	461a      	mov	r2, r3
 8000a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a02:	4313      	orrs	r3, r2
 8000a04:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8000a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a08:	b29a      	uxth	r2, r3
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	8a9b      	ldrh	r3, [r3, #20]
 8000a12:	b29b      	uxth	r3, r3
 8000a14:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 8000a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000a1c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8000a1e:	683b      	ldr	r3, [r7, #0]
 8000a20:	899b      	ldrh	r3, [r3, #12]
 8000a22:	461a      	mov	r2, r3
 8000a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a26:	4313      	orrs	r3, r2
 8000a28:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8000a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a2c:	b29a      	uxth	r2, r3
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8000a32:	f107 0308 	add.w	r3, r7, #8
 8000a36:	4618      	mov	r0, r3
 8000a38:	f7ff fe3c 	bl	80006b4 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	4a30      	ldr	r2, [pc, #192]	; (8000b00 <USART_Init+0x168>)
 8000a40:	4293      	cmp	r3, r2
 8000a42:	d003      	beq.n	8000a4c <USART_Init+0xb4>
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	4a2f      	ldr	r2, [pc, #188]	; (8000b04 <USART_Init+0x16c>)
 8000a48:	4293      	cmp	r3, r2
 8000a4a:	d102      	bne.n	8000a52 <USART_Init+0xba>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8000a4c:	697b      	ldr	r3, [r7, #20]
 8000a4e:	623b      	str	r3, [r7, #32]
 8000a50:	e001      	b.n	8000a56 <USART_Init+0xbe>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8000a52:	693b      	ldr	r3, [r7, #16]
 8000a54:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	899b      	ldrh	r3, [r3, #12]
 8000a5a:	b29b      	uxth	r3, r3
 8000a5c:	b21b      	sxth	r3, r3
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	da0c      	bge.n	8000a7c <USART_Init+0xe4>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8000a62:	6a3a      	ldr	r2, [r7, #32]
 8000a64:	4613      	mov	r3, r2
 8000a66:	009b      	lsls	r3, r3, #2
 8000a68:	4413      	add	r3, r2
 8000a6a:	009a      	lsls	r2, r3, #2
 8000a6c:	441a      	add	r2, r3
 8000a6e:	683b      	ldr	r3, [r7, #0]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	005b      	lsls	r3, r3, #1
 8000a74:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a78:	61fb      	str	r3, [r7, #28]
 8000a7a:	e00b      	b.n	8000a94 <USART_Init+0xfc>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8000a7c:	6a3a      	ldr	r2, [r7, #32]
 8000a7e:	4613      	mov	r3, r2
 8000a80:	009b      	lsls	r3, r3, #2
 8000a82:	4413      	add	r3, r2
 8000a84:	009a      	lsls	r2, r3, #2
 8000a86:	441a      	add	r2, r3
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	009b      	lsls	r3, r3, #2
 8000a8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a92:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 8000a94:	69fb      	ldr	r3, [r7, #28]
 8000a96:	4a1c      	ldr	r2, [pc, #112]	; (8000b08 <USART_Init+0x170>)
 8000a98:	fba2 2303 	umull	r2, r3, r2, r3
 8000a9c:	095b      	lsrs	r3, r3, #5
 8000a9e:	011b      	lsls	r3, r3, #4
 8000aa0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8000aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aa4:	091b      	lsrs	r3, r3, #4
 8000aa6:	2264      	movs	r2, #100	; 0x64
 8000aa8:	fb02 f303 	mul.w	r3, r2, r3
 8000aac:	69fa      	ldr	r2, [r7, #28]
 8000aae:	1ad3      	subs	r3, r2, r3
 8000ab0:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	899b      	ldrh	r3, [r3, #12]
 8000ab6:	b29b      	uxth	r3, r3
 8000ab8:	b21b      	sxth	r3, r3
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	da0c      	bge.n	8000ad8 <USART_Init+0x140>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8000abe:	69bb      	ldr	r3, [r7, #24]
 8000ac0:	00db      	lsls	r3, r3, #3
 8000ac2:	3332      	adds	r3, #50	; 0x32
 8000ac4:	4a10      	ldr	r2, [pc, #64]	; (8000b08 <USART_Init+0x170>)
 8000ac6:	fba2 2303 	umull	r2, r3, r2, r3
 8000aca:	095b      	lsrs	r3, r3, #5
 8000acc:	f003 0307 	and.w	r3, r3, #7
 8000ad0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ad2:	4313      	orrs	r3, r2
 8000ad4:	627b      	str	r3, [r7, #36]	; 0x24
 8000ad6:	e00b      	b.n	8000af0 <USART_Init+0x158>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8000ad8:	69bb      	ldr	r3, [r7, #24]
 8000ada:	011b      	lsls	r3, r3, #4
 8000adc:	3332      	adds	r3, #50	; 0x32
 8000ade:	4a0a      	ldr	r2, [pc, #40]	; (8000b08 <USART_Init+0x170>)
 8000ae0:	fba2 2303 	umull	r2, r3, r2, r3
 8000ae4:	095b      	lsrs	r3, r3, #5
 8000ae6:	f003 030f 	and.w	r3, r3, #15
 8000aea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000aec:	4313      	orrs	r3, r2
 8000aee:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 8000af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000af2:	b29a      	uxth	r2, r3
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	811a      	strh	r2, [r3, #8]
}
 8000af8:	bf00      	nop
 8000afa:	3728      	adds	r7, #40	; 0x28
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	40011000 	.word	0x40011000
 8000b04:	40011400 	.word	0x40011400
 8000b08:	51eb851f 	.word	0x51eb851f

08000b0c <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b083      	sub	sp, #12
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
 8000b14:	460b      	mov	r3, r1
 8000b16:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000b18:	78fb      	ldrb	r3, [r7, #3]
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d008      	beq.n	8000b30 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	899b      	ldrh	r3, [r3, #12]
 8000b22:	b29b      	uxth	r3, r3
 8000b24:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000b28:	b29a      	uxth	r2, r3
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
  }
}
 8000b2e:	e007      	b.n	8000b40 <USART_Cmd+0x34>
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	899b      	ldrh	r3, [r3, #12]
 8000b34:	b29b      	uxth	r3, r3
 8000b36:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000b3a:	b29a      	uxth	r2, r3
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	819a      	strh	r2, [r3, #12]
}
 8000b40:	bf00      	nop
 8000b42:	370c      	adds	r7, #12
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr

08000b4c <USART_ReceiveData>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
  *         UART peripheral.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b083      	sub	sp, #12
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	889b      	ldrh	r3, [r3, #4]
 8000b58:	b29b      	uxth	r3, r3
 8000b5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000b5e:	b29b      	uxth	r3, r3
}
 8000b60:	4618      	mov	r0, r3
 8000b62:	370c      	adds	r7, #12
 8000b64:	46bd      	mov	sp, r7
 8000b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6a:	4770      	bx	lr

08000b6c <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b087      	sub	sp, #28
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
 8000b74:	460b      	mov	r3, r1
 8000b76:	807b      	strh	r3, [r7, #2]
 8000b78:	4613      	mov	r3, r2
 8000b7a:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	613b      	str	r3, [r7, #16]
 8000b80:	2300      	movs	r3, #0
 8000b82:	60fb      	str	r3, [r7, #12]
 8000b84:	2300      	movs	r3, #0
 8000b86:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  usartxbase = (uint32_t)USARTx;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8000b90:	887b      	ldrh	r3, [r7, #2]
 8000b92:	b2db      	uxtb	r3, r3
 8000b94:	095b      	lsrs	r3, r3, #5
 8000b96:	b2db      	uxtb	r3, r3
 8000b98:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 8000b9a:	887b      	ldrh	r3, [r7, #2]
 8000b9c:	f003 031f 	and.w	r3, r3, #31
 8000ba0:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8000baa:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8000bac:	693b      	ldr	r3, [r7, #16]
 8000bae:	2b01      	cmp	r3, #1
 8000bb0:	d103      	bne.n	8000bba <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
 8000bb2:	697b      	ldr	r3, [r7, #20]
 8000bb4:	330c      	adds	r3, #12
 8000bb6:	617b      	str	r3, [r7, #20]
 8000bb8:	e009      	b.n	8000bce <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 8000bba:	693b      	ldr	r3, [r7, #16]
 8000bbc:	2b02      	cmp	r3, #2
 8000bbe:	d103      	bne.n	8000bc8 <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
 8000bc0:	697b      	ldr	r3, [r7, #20]
 8000bc2:	3310      	adds	r3, #16
 8000bc4:	617b      	str	r3, [r7, #20]
 8000bc6:	e002      	b.n	8000bce <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 8000bc8:	697b      	ldr	r3, [r7, #20]
 8000bca:	3314      	adds	r3, #20
 8000bcc:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
 8000bce:	787b      	ldrb	r3, [r7, #1]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d006      	beq.n	8000be2 <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8000bd4:	697b      	ldr	r3, [r7, #20]
 8000bd6:	6819      	ldr	r1, [r3, #0]
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	68ba      	ldr	r2, [r7, #8]
 8000bdc:	430a      	orrs	r2, r1
 8000bde:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 8000be0:	e006      	b.n	8000bf0 <USART_ITConfig+0x84>
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8000be2:	697b      	ldr	r3, [r7, #20]
 8000be4:	6819      	ldr	r1, [r3, #0]
 8000be6:	68bb      	ldr	r3, [r7, #8]
 8000be8:	43da      	mvns	r2, r3
 8000bea:	697b      	ldr	r3, [r7, #20]
 8000bec:	400a      	ands	r2, r1
 8000bee:	601a      	str	r2, [r3, #0]
}
 8000bf0:	bf00      	nop
 8000bf2:	371c      	adds	r7, #28
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr

08000bfc <USART_GetITStatus>:
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b087      	sub	sp, #28
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
 8000c04:	460b      	mov	r3, r1
 8000c06:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	60fb      	str	r3, [r7, #12]
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	617b      	str	r3, [r7, #20]
 8000c10:	2300      	movs	r3, #0
 8000c12:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 8000c14:	2300      	movs	r3, #0
 8000c16:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8000c18:	887b      	ldrh	r3, [r7, #2]
 8000c1a:	b2db      	uxtb	r3, r3
 8000c1c:	095b      	lsrs	r3, r3, #5
 8000c1e:	b2db      	uxtb	r3, r3
 8000c20:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 8000c22:	887b      	ldrh	r3, [r7, #2]
 8000c24:	f003 031f 	and.w	r3, r3, #31
 8000c28:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	697b      	ldr	r3, [r7, #20]
 8000c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c32:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8000c34:	68bb      	ldr	r3, [r7, #8]
 8000c36:	2b01      	cmp	r3, #1
 8000c38:	d107      	bne.n	8000c4a <USART_GetITStatus+0x4e>
  {
    itmask &= USARTx->CR1;
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	899b      	ldrh	r3, [r3, #12]
 8000c3e:	b29b      	uxth	r3, r3
 8000c40:	461a      	mov	r2, r3
 8000c42:	697b      	ldr	r3, [r7, #20]
 8000c44:	4013      	ands	r3, r2
 8000c46:	617b      	str	r3, [r7, #20]
 8000c48:	e011      	b.n	8000c6e <USART_GetITStatus+0x72>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8000c4a:	68bb      	ldr	r3, [r7, #8]
 8000c4c:	2b02      	cmp	r3, #2
 8000c4e:	d107      	bne.n	8000c60 <USART_GetITStatus+0x64>
  {
    itmask &= USARTx->CR2;
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	8a1b      	ldrh	r3, [r3, #16]
 8000c54:	b29b      	uxth	r3, r3
 8000c56:	461a      	mov	r2, r3
 8000c58:	697b      	ldr	r3, [r7, #20]
 8000c5a:	4013      	ands	r3, r2
 8000c5c:	617b      	str	r3, [r7, #20]
 8000c5e:	e006      	b.n	8000c6e <USART_GetITStatus+0x72>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	8a9b      	ldrh	r3, [r3, #20]
 8000c64:	b29b      	uxth	r3, r3
 8000c66:	461a      	mov	r2, r3
 8000c68:	697b      	ldr	r3, [r7, #20]
 8000c6a:	4013      	ands	r3, r2
 8000c6c:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
 8000c6e:	887b      	ldrh	r3, [r7, #2]
 8000c70:	0a1b      	lsrs	r3, r3, #8
 8000c72:	b29b      	uxth	r3, r3
 8000c74:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 8000c76:	2201      	movs	r2, #1
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7e:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	881b      	ldrh	r3, [r3, #0]
 8000c84:	b29b      	uxth	r3, r3
 8000c86:	461a      	mov	r2, r3
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	4013      	ands	r3, r2
 8000c8c:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8000c8e:	697b      	ldr	r3, [r7, #20]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d005      	beq.n	8000ca0 <USART_GetITStatus+0xa4>
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d002      	beq.n	8000ca0 <USART_GetITStatus+0xa4>
  {
    bitstatus = SET;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	74fb      	strb	r3, [r7, #19]
 8000c9e:	e001      	b.n	8000ca4 <USART_GetITStatus+0xa8>
  }
  else
  {
    bitstatus = RESET;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 8000ca4:	7cfb      	ldrb	r3, [r7, #19]
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	371c      	adds	r7, #28
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr

08000cb2 <USART_ClearITPendingBit>:
  *          (USART_SendData()).
  *  
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8000cb2:	b480      	push	{r7}
 8000cb4:	b085      	sub	sp, #20
 8000cb6:	af00      	add	r7, sp, #0
 8000cb8:	6078      	str	r0, [r7, #4]
 8000cba:	460b      	mov	r3, r1
 8000cbc:	807b      	strh	r3, [r7, #2]
  uint16_t bitpos = 0x00, itmask = 0x00;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	81fb      	strh	r3, [r7, #14]
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	81bb      	strh	r3, [r7, #12]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  bitpos = USART_IT >> 0x08;
 8000cc6:	887b      	ldrh	r3, [r7, #2]
 8000cc8:	0a1b      	lsrs	r3, r3, #8
 8000cca:	81fb      	strh	r3, [r7, #14]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 8000ccc:	89fb      	ldrh	r3, [r7, #14]
 8000cce:	2201      	movs	r2, #1
 8000cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd4:	81bb      	strh	r3, [r7, #12]
  USARTx->SR = (uint16_t)~itmask;
 8000cd6:	89bb      	ldrh	r3, [r7, #12]
 8000cd8:	43db      	mvns	r3, r3
 8000cda:	b29a      	uxth	r2, r3
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	801a      	strh	r2, [r3, #0]
}
 8000ce0:	bf00      	nop
 8000ce2:	3714      	adds	r7, #20
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr

08000cec <GUI_DrawPoint>:
                y:the y coordinate of the point
								color:the color value of the point
 * @retvalue   :None
********************************************************************/
void GUI_DrawPoint(u16 x,u16 y,u16 color)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	80fb      	strh	r3, [r7, #6]
 8000cf6:	460b      	mov	r3, r1
 8000cf8:	80bb      	strh	r3, [r7, #4]
 8000cfa:	4613      	mov	r3, r2
 8000cfc:	807b      	strh	r3, [r7, #2]
	LCD_SetCursor(x,y);
 8000cfe:	88ba      	ldrh	r2, [r7, #4]
 8000d00:	88fb      	ldrh	r3, [r7, #6]
 8000d02:	4611      	mov	r1, r2
 8000d04:	4618      	mov	r0, r3
 8000d06:	f001 f8b1 	bl	8001e6c <LCD_SetCursor>
	Lcd_WriteData_16Bit(color); 
 8000d0a:	887b      	ldrh	r3, [r7, #2]
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f000 fe17 	bl	8001940 <Lcd_WriteData_16Bit>
}
 8000d12:	bf00      	nop
 8000d14:	3708      	adds	r7, #8
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
	...

08000d1c <LCD_Fill>:
								ey:the ending y coordinate of the specified area
								color:the filled color value
 * @retvalue   :None
********************************************************************/
void LCD_Fill(u16 sx,u16 sy,u16 ex,u16 ey,u16 color)
{  	
 8000d1c:	b590      	push	{r4, r7, lr}
 8000d1e:	b085      	sub	sp, #20
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	4604      	mov	r4, r0
 8000d24:	4608      	mov	r0, r1
 8000d26:	4611      	mov	r1, r2
 8000d28:	461a      	mov	r2, r3
 8000d2a:	4623      	mov	r3, r4
 8000d2c:	80fb      	strh	r3, [r7, #6]
 8000d2e:	4603      	mov	r3, r0
 8000d30:	80bb      	strh	r3, [r7, #4]
 8000d32:	460b      	mov	r3, r1
 8000d34:	807b      	strh	r3, [r7, #2]
 8000d36:	4613      	mov	r3, r2
 8000d38:	803b      	strh	r3, [r7, #0]
	u16 i,j;			
	u16 width=ex-sx+1;
 8000d3a:	887a      	ldrh	r2, [r7, #2]
 8000d3c:	88fb      	ldrh	r3, [r7, #6]
 8000d3e:	1ad3      	subs	r3, r2, r3
 8000d40:	b29b      	uxth	r3, r3
 8000d42:	3301      	adds	r3, #1
 8000d44:	817b      	strh	r3, [r7, #10]
	u16 height=ey-sy+1;
 8000d46:	883a      	ldrh	r2, [r7, #0]
 8000d48:	88bb      	ldrh	r3, [r7, #4]
 8000d4a:	1ad3      	subs	r3, r2, r3
 8000d4c:	b29b      	uxth	r3, r3
 8000d4e:	3301      	adds	r3, #1
 8000d50:	813b      	strh	r3, [r7, #8]
	LCD_SetWindows(sx,sy,ex,ey);
 8000d52:	883b      	ldrh	r3, [r7, #0]
 8000d54:	887a      	ldrh	r2, [r7, #2]
 8000d56:	88b9      	ldrh	r1, [r7, #4]
 8000d58:	88f8      	ldrh	r0, [r7, #6]
 8000d5a:	f001 f833 	bl	8001dc4 <LCD_SetWindows>
	for(i=0;i<height;i++)
 8000d5e:	2300      	movs	r3, #0
 8000d60:	81fb      	strh	r3, [r7, #14]
 8000d62:	e010      	b.n	8000d86 <LCD_Fill+0x6a>
	{
		for(j=0;j<width;j++)
 8000d64:	2300      	movs	r3, #0
 8000d66:	81bb      	strh	r3, [r7, #12]
 8000d68:	e006      	b.n	8000d78 <LCD_Fill+0x5c>
		Lcd_WriteData_16Bit(color);
 8000d6a:	8c3b      	ldrh	r3, [r7, #32]
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f000 fde7 	bl	8001940 <Lcd_WriteData_16Bit>
		for(j=0;j<width;j++)
 8000d72:	89bb      	ldrh	r3, [r7, #12]
 8000d74:	3301      	adds	r3, #1
 8000d76:	81bb      	strh	r3, [r7, #12]
 8000d78:	89ba      	ldrh	r2, [r7, #12]
 8000d7a:	897b      	ldrh	r3, [r7, #10]
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	d3f4      	bcc.n	8000d6a <LCD_Fill+0x4e>
	for(i=0;i<height;i++)
 8000d80:	89fb      	ldrh	r3, [r7, #14]
 8000d82:	3301      	adds	r3, #1
 8000d84:	81fb      	strh	r3, [r7, #14]
 8000d86:	89fa      	ldrh	r2, [r7, #14]
 8000d88:	893b      	ldrh	r3, [r7, #8]
 8000d8a:	429a      	cmp	r2, r3
 8000d8c:	d3ea      	bcc.n	8000d64 <LCD_Fill+0x48>
	}
	LCD_SetWindows(0,0,lcddev.width-1,lcddev.height-1);
 8000d8e:	4b08      	ldr	r3, [pc, #32]	; (8000db0 <LCD_Fill+0x94>)
 8000d90:	881b      	ldrh	r3, [r3, #0]
 8000d92:	3b01      	subs	r3, #1
 8000d94:	b29a      	uxth	r2, r3
 8000d96:	4b06      	ldr	r3, [pc, #24]	; (8000db0 <LCD_Fill+0x94>)
 8000d98:	885b      	ldrh	r3, [r3, #2]
 8000d9a:	3b01      	subs	r3, #1
 8000d9c:	b29b      	uxth	r3, r3
 8000d9e:	2100      	movs	r1, #0
 8000da0:	2000      	movs	r0, #0
 8000da2:	f001 f80f 	bl	8001dc4 <LCD_SetWindows>
}
 8000da6:	bf00      	nop
 8000da8:	3714      	adds	r7, #20
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd90      	pop	{r4, r7, pc}
 8000dae:	bf00      	nop
 8000db0:	20000090 	.word	0x20000090

08000db4 <LCD_DrawLine>:
								x2:the ending x coordinate of the line
								y2:the ending y coordinate of the line
 * @retvalue   :None
********************************************************************/
void LCD_DrawLine(u16 x1, u16 y1, u16 x2, u16 y2)
{
 8000db4:	b590      	push	{r4, r7, lr}
 8000db6:	b08d      	sub	sp, #52	; 0x34
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	4604      	mov	r4, r0
 8000dbc:	4608      	mov	r0, r1
 8000dbe:	4611      	mov	r1, r2
 8000dc0:	461a      	mov	r2, r3
 8000dc2:	4623      	mov	r3, r4
 8000dc4:	80fb      	strh	r3, [r7, #6]
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	80bb      	strh	r3, [r7, #4]
 8000dca:	460b      	mov	r3, r1
 8000dcc:	807b      	strh	r3, [r7, #2]
 8000dce:	4613      	mov	r3, r2
 8000dd0:	803b      	strh	r3, [r7, #0]
	u16 t; 
	int xerr=0,yerr=0,delta_x,delta_y,distance; 
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	62bb      	str	r3, [r7, #40]	; 0x28
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	627b      	str	r3, [r7, #36]	; 0x24
	int incx,incy,uRow,uCol; 

	delta_x=x2-x1;
 8000dda:	887a      	ldrh	r2, [r7, #2]
 8000ddc:	88fb      	ldrh	r3, [r7, #6]
 8000dde:	1ad3      	subs	r3, r2, r3
 8000de0:	623b      	str	r3, [r7, #32]
	delta_y=y2-y1; 
 8000de2:	883a      	ldrh	r2, [r7, #0]
 8000de4:	88bb      	ldrh	r3, [r7, #4]
 8000de6:	1ad3      	subs	r3, r2, r3
 8000de8:	61fb      	str	r3, [r7, #28]
	uRow=x1; 
 8000dea:	88fb      	ldrh	r3, [r7, #6]
 8000dec:	60fb      	str	r3, [r7, #12]
	uCol=y1; 
 8000dee:	88bb      	ldrh	r3, [r7, #4]
 8000df0:	60bb      	str	r3, [r7, #8]
	if(delta_x>0)incx=1;
 8000df2:	6a3b      	ldr	r3, [r7, #32]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	dd02      	ble.n	8000dfe <LCD_DrawLine+0x4a>
 8000df8:	2301      	movs	r3, #1
 8000dfa:	617b      	str	r3, [r7, #20]
 8000dfc:	e00b      	b.n	8000e16 <LCD_DrawLine+0x62>
	else if(delta_x==0)incx=0;
 8000dfe:	6a3b      	ldr	r3, [r7, #32]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d102      	bne.n	8000e0a <LCD_DrawLine+0x56>
 8000e04:	2300      	movs	r3, #0
 8000e06:	617b      	str	r3, [r7, #20]
 8000e08:	e005      	b.n	8000e16 <LCD_DrawLine+0x62>
	else {incx=-1;delta_x=-delta_x;} 
 8000e0a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e0e:	617b      	str	r3, [r7, #20]
 8000e10:	6a3b      	ldr	r3, [r7, #32]
 8000e12:	425b      	negs	r3, r3
 8000e14:	623b      	str	r3, [r7, #32]
	if(delta_y>0)incy=1; 
 8000e16:	69fb      	ldr	r3, [r7, #28]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	dd02      	ble.n	8000e22 <LCD_DrawLine+0x6e>
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	613b      	str	r3, [r7, #16]
 8000e20:	e00b      	b.n	8000e3a <LCD_DrawLine+0x86>
	else if(delta_y==0)incy=0;
 8000e22:	69fb      	ldr	r3, [r7, #28]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d102      	bne.n	8000e2e <LCD_DrawLine+0x7a>
 8000e28:	2300      	movs	r3, #0
 8000e2a:	613b      	str	r3, [r7, #16]
 8000e2c:	e005      	b.n	8000e3a <LCD_DrawLine+0x86>
	else{incy=-1;delta_y=-delta_y;} 
 8000e2e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e32:	613b      	str	r3, [r7, #16]
 8000e34:	69fb      	ldr	r3, [r7, #28]
 8000e36:	425b      	negs	r3, r3
 8000e38:	61fb      	str	r3, [r7, #28]
	if( delta_x>delta_y)distance=delta_x;
 8000e3a:	6a3a      	ldr	r2, [r7, #32]
 8000e3c:	69fb      	ldr	r3, [r7, #28]
 8000e3e:	429a      	cmp	r2, r3
 8000e40:	dd02      	ble.n	8000e48 <LCD_DrawLine+0x94>
 8000e42:	6a3b      	ldr	r3, [r7, #32]
 8000e44:	61bb      	str	r3, [r7, #24]
 8000e46:	e001      	b.n	8000e4c <LCD_DrawLine+0x98>
	else distance=delta_y; 
 8000e48:	69fb      	ldr	r3, [r7, #28]
 8000e4a:	61bb      	str	r3, [r7, #24]
	for(t=0;t<=distance+1;t++ )
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8000e50:	e02a      	b.n	8000ea8 <LCD_DrawLine+0xf4>
	{  
		LCD_DrawPoint(uRow,uCol);
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	b29b      	uxth	r3, r3
 8000e56:	68ba      	ldr	r2, [r7, #8]
 8000e58:	b292      	uxth	r2, r2
 8000e5a:	4611      	mov	r1, r2
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f000 fda5 	bl	80019ac <LCD_DrawPoint>
		xerr+=delta_x ; 
 8000e62:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000e64:	6a3b      	ldr	r3, [r7, #32]
 8000e66:	4413      	add	r3, r2
 8000e68:	62bb      	str	r3, [r7, #40]	; 0x28
		yerr+=delta_y ; 
 8000e6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e6c:	69fb      	ldr	r3, [r7, #28]
 8000e6e:	4413      	add	r3, r2
 8000e70:	627b      	str	r3, [r7, #36]	; 0x24
		if(xerr>distance) 
 8000e72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000e74:	69bb      	ldr	r3, [r7, #24]
 8000e76:	429a      	cmp	r2, r3
 8000e78:	dd07      	ble.n	8000e8a <LCD_DrawLine+0xd6>
		{ 
			xerr-=distance; 
 8000e7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000e7c:	69bb      	ldr	r3, [r7, #24]
 8000e7e:	1ad3      	subs	r3, r2, r3
 8000e80:	62bb      	str	r3, [r7, #40]	; 0x28
			uRow+=incx; 
 8000e82:	68fa      	ldr	r2, [r7, #12]
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	4413      	add	r3, r2
 8000e88:	60fb      	str	r3, [r7, #12]
		} 
		if(yerr>distance) 
 8000e8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e8c:	69bb      	ldr	r3, [r7, #24]
 8000e8e:	429a      	cmp	r2, r3
 8000e90:	dd07      	ble.n	8000ea2 <LCD_DrawLine+0xee>
		{ 
			yerr-=distance; 
 8000e92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e94:	69bb      	ldr	r3, [r7, #24]
 8000e96:	1ad3      	subs	r3, r2, r3
 8000e98:	627b      	str	r3, [r7, #36]	; 0x24
			uCol+=incy; 
 8000e9a:	68ba      	ldr	r2, [r7, #8]
 8000e9c:	693b      	ldr	r3, [r7, #16]
 8000e9e:	4413      	add	r3, r2
 8000ea0:	60bb      	str	r3, [r7, #8]
	for(t=0;t<=distance+1;t++ )
 8000ea2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000ea4:	3301      	adds	r3, #1
 8000ea6:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8000ea8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8000eaa:	69bb      	ldr	r3, [r7, #24]
 8000eac:	3301      	adds	r3, #1
 8000eae:	429a      	cmp	r2, r3
 8000eb0:	ddcf      	ble.n	8000e52 <LCD_DrawLine+0x9e>
		} 
	}  
} 
 8000eb2:	bf00      	nop
 8000eb4:	bf00      	nop
 8000eb6:	3734      	adds	r7, #52	; 0x34
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd90      	pop	{r4, r7, pc}

08000ebc <LCD_DrawRectangle>:
								x2:the ending x coordinate of the rectangle
								y2:the ending y coordinate of the rectangle
 * @retvalue   :None
******************************************************************************/
void LCD_DrawRectangle(u16 x1, u16 y1, u16 x2, u16 y2)
{
 8000ebc:	b590      	push	{r4, r7, lr}
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	4604      	mov	r4, r0
 8000ec4:	4608      	mov	r0, r1
 8000ec6:	4611      	mov	r1, r2
 8000ec8:	461a      	mov	r2, r3
 8000eca:	4623      	mov	r3, r4
 8000ecc:	80fb      	strh	r3, [r7, #6]
 8000ece:	4603      	mov	r3, r0
 8000ed0:	80bb      	strh	r3, [r7, #4]
 8000ed2:	460b      	mov	r3, r1
 8000ed4:	807b      	strh	r3, [r7, #2]
 8000ed6:	4613      	mov	r3, r2
 8000ed8:	803b      	strh	r3, [r7, #0]
	LCD_DrawLine(x1,y1,x2,y1);
 8000eda:	88bb      	ldrh	r3, [r7, #4]
 8000edc:	887a      	ldrh	r2, [r7, #2]
 8000ede:	88b9      	ldrh	r1, [r7, #4]
 8000ee0:	88f8      	ldrh	r0, [r7, #6]
 8000ee2:	f7ff ff67 	bl	8000db4 <LCD_DrawLine>
	LCD_DrawLine(x1,y1,x1,y2);
 8000ee6:	883b      	ldrh	r3, [r7, #0]
 8000ee8:	88fa      	ldrh	r2, [r7, #6]
 8000eea:	88b9      	ldrh	r1, [r7, #4]
 8000eec:	88f8      	ldrh	r0, [r7, #6]
 8000eee:	f7ff ff61 	bl	8000db4 <LCD_DrawLine>
	LCD_DrawLine(x1,y2,x2,y2);
 8000ef2:	883b      	ldrh	r3, [r7, #0]
 8000ef4:	887a      	ldrh	r2, [r7, #2]
 8000ef6:	8839      	ldrh	r1, [r7, #0]
 8000ef8:	88f8      	ldrh	r0, [r7, #6]
 8000efa:	f7ff ff5b 	bl	8000db4 <LCD_DrawLine>
	LCD_DrawLine(x2,y1,x2,y2);
 8000efe:	883b      	ldrh	r3, [r7, #0]
 8000f00:	887a      	ldrh	r2, [r7, #2]
 8000f02:	88b9      	ldrh	r1, [r7, #4]
 8000f04:	8878      	ldrh	r0, [r7, #2]
 8000f06:	f7ff ff55 	bl	8000db4 <LCD_DrawLine>
	LCD_SetColorPoint(BLACK);
 8000f0a:	2000      	movs	r0, #0
 8000f0c:	f000 fd3e 	bl	800198c <LCD_SetColorPoint>
}  
 8000f10:	bf00      	nop
 8000f12:	370c      	adds	r7, #12
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd90      	pop	{r4, r7, pc}

08000f18 <LCD_ShowTitle>:
				size:the size of display character
				mode:0-no overlying,1-overlying
 * @retvalue   :None
******************************************************************************/
void LCD_ShowTitle(u16 sizeBox,u16 fc, u16 bc, u8 *str,u8 size,u8 mode)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b088      	sub	sp, #32
 8000f1c:	af04      	add	r7, sp, #16
 8000f1e:	607b      	str	r3, [r7, #4]
 8000f20:	4603      	mov	r3, r0
 8000f22:	81fb      	strh	r3, [r7, #14]
 8000f24:	460b      	mov	r3, r1
 8000f26:	81bb      	strh	r3, [r7, #12]
 8000f28:	4613      	mov	r3, r2
 8000f2a:	817b      	strh	r3, [r7, #10]
	LCD_ClearCursor(0, 0, 240, sizeBox, WHITE);
 8000f2c:	89fb      	ldrh	r3, [r7, #14]
 8000f2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f32:	9200      	str	r2, [sp, #0]
 8000f34:	22f0      	movs	r2, #240	; 0xf0
 8000f36:	2100      	movs	r1, #0
 8000f38:	2000      	movs	r0, #0
 8000f3a:	f000 fd91 	bl	8001a60 <LCD_ClearCursor>
	LCD_Fill(0, 0, 240, sizeBox, bc);
 8000f3e:	89fa      	ldrh	r2, [r7, #14]
 8000f40:	897b      	ldrh	r3, [r7, #10]
 8000f42:	9300      	str	r3, [sp, #0]
 8000f44:	4613      	mov	r3, r2
 8000f46:	22f0      	movs	r2, #240	; 0xf0
 8000f48:	2100      	movs	r1, #0
 8000f4a:	2000      	movs	r0, #0
 8000f4c:	f7ff fee6 	bl	8000d1c <LCD_Fill>
	Gui_StrCenter(0,2,fc,bc,str,16,1);
 8000f50:	8979      	ldrh	r1, [r7, #10]
 8000f52:	89ba      	ldrh	r2, [r7, #12]
 8000f54:	2301      	movs	r3, #1
 8000f56:	9302      	str	r3, [sp, #8]
 8000f58:	2310      	movs	r3, #16
 8000f5a:	9301      	str	r3, [sp, #4]
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	9300      	str	r3, [sp, #0]
 8000f60:	460b      	mov	r3, r1
 8000f62:	2102      	movs	r1, #2
 8000f64:	2000      	movs	r0, #0
 8000f66:	f000 fc11 	bl	800178c <Gui_StrCenter>
}
 8000f6a:	bf00      	nop
 8000f6c:	3710      	adds	r7, #16
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}

08000f72 <LCD_ShowOption>:
				size:the size of display character
				mode:0-no overlying,1-overlying
 * @retvalue   :(u16) Cursor of the next option
******************************************************************************/
u16 LCD_ShowOption(u16 sizeBox,u16 y,u16 fc, u16 bc, u8 *str,u8 size,u8 mode)
{
 8000f72:	b590      	push	{r4, r7, lr}
 8000f74:	b089      	sub	sp, #36	; 0x24
 8000f76:	af04      	add	r7, sp, #16
 8000f78:	4604      	mov	r4, r0
 8000f7a:	4608      	mov	r0, r1
 8000f7c:	4611      	mov	r1, r2
 8000f7e:	461a      	mov	r2, r3
 8000f80:	4623      	mov	r3, r4
 8000f82:	80fb      	strh	r3, [r7, #6]
 8000f84:	4603      	mov	r3, r0
 8000f86:	80bb      	strh	r3, [r7, #4]
 8000f88:	460b      	mov	r3, r1
 8000f8a:	807b      	strh	r3, [r7, #2]
 8000f8c:	4613      	mov	r3, r2
 8000f8e:	803b      	strh	r3, [r7, #0]
	u16 wCursor;
	LCD_ClearCursor(10, y, 230, sizeBox+y, bc);
 8000f90:	88fa      	ldrh	r2, [r7, #6]
 8000f92:	88bb      	ldrh	r3, [r7, #4]
 8000f94:	4413      	add	r3, r2
 8000f96:	b29a      	uxth	r2, r3
 8000f98:	88b9      	ldrh	r1, [r7, #4]
 8000f9a:	883b      	ldrh	r3, [r7, #0]
 8000f9c:	9300      	str	r3, [sp, #0]
 8000f9e:	4613      	mov	r3, r2
 8000fa0:	22e6      	movs	r2, #230	; 0xe6
 8000fa2:	200a      	movs	r0, #10
 8000fa4:	f000 fd5c 	bl	8001a60 <LCD_ClearCursor>
	LCD_Fill(10, y, 20, y+sizeBox, bc);
 8000fa8:	88ba      	ldrh	r2, [r7, #4]
 8000faa:	88fb      	ldrh	r3, [r7, #6]
 8000fac:	4413      	add	r3, r2
 8000fae:	b29a      	uxth	r2, r3
 8000fb0:	88b9      	ldrh	r1, [r7, #4]
 8000fb2:	883b      	ldrh	r3, [r7, #0]
 8000fb4:	9300      	str	r3, [sp, #0]
 8000fb6:	4613      	mov	r3, r2
 8000fb8:	2214      	movs	r2, #20
 8000fba:	200a      	movs	r0, #10
 8000fbc:	f7ff feae 	bl	8000d1c <LCD_Fill>
	Gui_StrCenter(0, y, fc, bc, str, size, mode);
 8000fc0:	8838      	ldrh	r0, [r7, #0]
 8000fc2:	887a      	ldrh	r2, [r7, #2]
 8000fc4:	88b9      	ldrh	r1, [r7, #4]
 8000fc6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000fca:	9302      	str	r3, [sp, #8]
 8000fcc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000fd0:	9301      	str	r3, [sp, #4]
 8000fd2:	6a3b      	ldr	r3, [r7, #32]
 8000fd4:	9300      	str	r3, [sp, #0]
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2000      	movs	r0, #0
 8000fda:	f000 fbd7 	bl	800178c <Gui_StrCenter>
	wCursor = sizeBox+y+10;
 8000fde:	88fa      	ldrh	r2, [r7, #6]
 8000fe0:	88bb      	ldrh	r3, [r7, #4]
 8000fe2:	4413      	add	r3, r2
 8000fe4:	b29b      	uxth	r3, r3
 8000fe6:	330a      	adds	r3, #10
 8000fe8:	81fb      	strh	r3, [r7, #14]
	return wCursor;
 8000fea:	89fb      	ldrh	r3, [r7, #14]
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	3714      	adds	r7, #20
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd90      	pop	{r4, r7, pc}

08000ff4 <LCD_ShowChar>:
								size:the size of display character
								mode:0-no overlying,1-overlying
 * @retvalue   :None
******************************************************************************/ 
void LCD_ShowChar(u16 x,u16 y,u16 fc, u16 bc, u8 num,u8 size,u8 mode)
{  
 8000ff4:	b590      	push	{r4, r7, lr}
 8000ff6:	b085      	sub	sp, #20
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	4604      	mov	r4, r0
 8000ffc:	4608      	mov	r0, r1
 8000ffe:	4611      	mov	r1, r2
 8001000:	461a      	mov	r2, r3
 8001002:	4623      	mov	r3, r4
 8001004:	80fb      	strh	r3, [r7, #6]
 8001006:	4603      	mov	r3, r0
 8001008:	80bb      	strh	r3, [r7, #4]
 800100a:	460b      	mov	r3, r1
 800100c:	807b      	strh	r3, [r7, #2]
 800100e:	4613      	mov	r3, r2
 8001010:	803b      	strh	r3, [r7, #0]
    u8 temp;
    u8 pos,t;
	u16 colortemp=POINT_COLOR;      
 8001012:	4b62      	ldr	r3, [pc, #392]	; (800119c <LCD_ShowChar+0x1a8>)
 8001014:	881b      	ldrh	r3, [r3, #0]
 8001016:	817b      	strh	r3, [r7, #10]
		   
	num=num-' ';//�õ�ƫ�ƺ��ֵ
 8001018:	f897 3020 	ldrb.w	r3, [r7, #32]
 800101c:	3b20      	subs	r3, #32
 800101e:	f887 3020 	strb.w	r3, [r7, #32]
	LCD_SetWindows(x,y,x+size/2-1,y+size-1);//���õ���������ʾ����
 8001022:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001026:	085b      	lsrs	r3, r3, #1
 8001028:	b2db      	uxtb	r3, r3
 800102a:	b29a      	uxth	r2, r3
 800102c:	88fb      	ldrh	r3, [r7, #6]
 800102e:	4413      	add	r3, r2
 8001030:	b29b      	uxth	r3, r3
 8001032:	3b01      	subs	r3, #1
 8001034:	b29c      	uxth	r4, r3
 8001036:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800103a:	b29a      	uxth	r2, r3
 800103c:	88bb      	ldrh	r3, [r7, #4]
 800103e:	4413      	add	r3, r2
 8001040:	b29b      	uxth	r3, r3
 8001042:	3b01      	subs	r3, #1
 8001044:	b29b      	uxth	r3, r3
 8001046:	88b9      	ldrh	r1, [r7, #4]
 8001048:	88f8      	ldrh	r0, [r7, #6]
 800104a:	4622      	mov	r2, r4
 800104c:	f000 feba 	bl	8001dc4 <LCD_SetWindows>
	if(!mode) //�ǵ��ӷ�ʽ
 8001050:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001054:	2b00      	cmp	r3, #0
 8001056:	d143      	bne.n	80010e0 <LCD_ShowChar+0xec>
	{		
		for(pos=0;pos<size;pos++)
 8001058:	2300      	movs	r3, #0
 800105a:	73bb      	strb	r3, [r7, #14]
 800105c:	e03a      	b.n	80010d4 <LCD_ShowChar+0xe0>
		{
			if(size==12)temp=asc2_1206[num][pos];//����1206����
 800105e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001062:	2b0c      	cmp	r3, #12
 8001064:	d10c      	bne.n	8001080 <LCD_ShowChar+0x8c>
 8001066:	f897 2020 	ldrb.w	r2, [r7, #32]
 800106a:	7bb9      	ldrb	r1, [r7, #14]
 800106c:	484c      	ldr	r0, [pc, #304]	; (80011a0 <LCD_ShowChar+0x1ac>)
 800106e:	4613      	mov	r3, r2
 8001070:	005b      	lsls	r3, r3, #1
 8001072:	4413      	add	r3, r2
 8001074:	009b      	lsls	r3, r3, #2
 8001076:	4403      	add	r3, r0
 8001078:	440b      	add	r3, r1
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	73fb      	strb	r3, [r7, #15]
 800107e:	e008      	b.n	8001092 <LCD_ShowChar+0x9e>
			else temp=asc2_1608[num][pos];		 //����1608����
 8001080:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001084:	7bbb      	ldrb	r3, [r7, #14]
 8001086:	4947      	ldr	r1, [pc, #284]	; (80011a4 <LCD_ShowChar+0x1b0>)
 8001088:	0112      	lsls	r2, r2, #4
 800108a:	440a      	add	r2, r1
 800108c:	4413      	add	r3, r2
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	73fb      	strb	r3, [r7, #15]
			for(t=0;t<size/2;t++)
 8001092:	2300      	movs	r3, #0
 8001094:	737b      	strb	r3, [r7, #13]
 8001096:	e013      	b.n	80010c0 <LCD_ShowChar+0xcc>
		    {                 
		        if(temp&0x01)Lcd_WriteData_16Bit(fc); 
 8001098:	7bfb      	ldrb	r3, [r7, #15]
 800109a:	f003 0301 	and.w	r3, r3, #1
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d004      	beq.n	80010ac <LCD_ShowChar+0xb8>
 80010a2:	887b      	ldrh	r3, [r7, #2]
 80010a4:	4618      	mov	r0, r3
 80010a6:	f000 fc4b 	bl	8001940 <Lcd_WriteData_16Bit>
 80010aa:	e003      	b.n	80010b4 <LCD_ShowChar+0xc0>
				else Lcd_WriteData_16Bit(bc); 
 80010ac:	883b      	ldrh	r3, [r7, #0]
 80010ae:	4618      	mov	r0, r3
 80010b0:	f000 fc46 	bl	8001940 <Lcd_WriteData_16Bit>
				temp>>=1; 
 80010b4:	7bfb      	ldrb	r3, [r7, #15]
 80010b6:	085b      	lsrs	r3, r3, #1
 80010b8:	73fb      	strb	r3, [r7, #15]
			for(t=0;t<size/2;t++)
 80010ba:	7b7b      	ldrb	r3, [r7, #13]
 80010bc:	3301      	adds	r3, #1
 80010be:	737b      	strb	r3, [r7, #13]
 80010c0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80010c4:	085b      	lsrs	r3, r3, #1
 80010c6:	b2db      	uxtb	r3, r3
 80010c8:	7b7a      	ldrb	r2, [r7, #13]
 80010ca:	429a      	cmp	r2, r3
 80010cc:	d3e4      	bcc.n	8001098 <LCD_ShowChar+0xa4>
		for(pos=0;pos<size;pos++)
 80010ce:	7bbb      	ldrb	r3, [r7, #14]
 80010d0:	3301      	adds	r3, #1
 80010d2:	73bb      	strb	r3, [r7, #14]
 80010d4:	7bba      	ldrb	r2, [r7, #14]
 80010d6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80010da:	429a      	cmp	r2, r3
 80010dc:	d3bf      	bcc.n	800105e <LCD_ShowChar+0x6a>
 80010de:	e049      	b.n	8001174 <LCD_ShowChar+0x180>
		    }
			
		}	
	}else//���ӷ�ʽ
	{
		for(pos=0;pos<size;pos++)
 80010e0:	2300      	movs	r3, #0
 80010e2:	73bb      	strb	r3, [r7, #14]
 80010e4:	e041      	b.n	800116a <LCD_ShowChar+0x176>
		{
			if(size==12)temp=asc2_1206[num][pos];//����1206����
 80010e6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80010ea:	2b0c      	cmp	r3, #12
 80010ec:	d10c      	bne.n	8001108 <LCD_ShowChar+0x114>
 80010ee:	f897 2020 	ldrb.w	r2, [r7, #32]
 80010f2:	7bb9      	ldrb	r1, [r7, #14]
 80010f4:	482a      	ldr	r0, [pc, #168]	; (80011a0 <LCD_ShowChar+0x1ac>)
 80010f6:	4613      	mov	r3, r2
 80010f8:	005b      	lsls	r3, r3, #1
 80010fa:	4413      	add	r3, r2
 80010fc:	009b      	lsls	r3, r3, #2
 80010fe:	4403      	add	r3, r0
 8001100:	440b      	add	r3, r1
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	73fb      	strb	r3, [r7, #15]
 8001106:	e008      	b.n	800111a <LCD_ShowChar+0x126>
			else temp=asc2_1608[num][pos];		 //����1608����
 8001108:	f897 2020 	ldrb.w	r2, [r7, #32]
 800110c:	7bbb      	ldrb	r3, [r7, #14]
 800110e:	4925      	ldr	r1, [pc, #148]	; (80011a4 <LCD_ShowChar+0x1b0>)
 8001110:	0112      	lsls	r2, r2, #4
 8001112:	440a      	add	r2, r1
 8001114:	4413      	add	r3, r2
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	73fb      	strb	r3, [r7, #15]
			for(t=0;t<size/2;t++)
 800111a:	2300      	movs	r3, #0
 800111c:	737b      	strb	r3, [r7, #13]
 800111e:	e01a      	b.n	8001156 <LCD_ShowChar+0x162>
		    {   
				POINT_COLOR=fc;              
 8001120:	4a1e      	ldr	r2, [pc, #120]	; (800119c <LCD_ShowChar+0x1a8>)
 8001122:	887b      	ldrh	r3, [r7, #2]
 8001124:	8013      	strh	r3, [r2, #0]
		        if(temp&0x01)LCD_DrawPoint(x+t,y+pos);//��һ����    
 8001126:	7bfb      	ldrb	r3, [r7, #15]
 8001128:	f003 0301 	and.w	r3, r3, #1
 800112c:	2b00      	cmp	r3, #0
 800112e:	d00c      	beq.n	800114a <LCD_ShowChar+0x156>
 8001130:	7b7b      	ldrb	r3, [r7, #13]
 8001132:	b29a      	uxth	r2, r3
 8001134:	88fb      	ldrh	r3, [r7, #6]
 8001136:	4413      	add	r3, r2
 8001138:	b298      	uxth	r0, r3
 800113a:	7bbb      	ldrb	r3, [r7, #14]
 800113c:	b29a      	uxth	r2, r3
 800113e:	88bb      	ldrh	r3, [r7, #4]
 8001140:	4413      	add	r3, r2
 8001142:	b29b      	uxth	r3, r3
 8001144:	4619      	mov	r1, r3
 8001146:	f000 fc31 	bl	80019ac <LCD_DrawPoint>
		        temp>>=1; 
 800114a:	7bfb      	ldrb	r3, [r7, #15]
 800114c:	085b      	lsrs	r3, r3, #1
 800114e:	73fb      	strb	r3, [r7, #15]
			for(t=0;t<size/2;t++)
 8001150:	7b7b      	ldrb	r3, [r7, #13]
 8001152:	3301      	adds	r3, #1
 8001154:	737b      	strb	r3, [r7, #13]
 8001156:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800115a:	085b      	lsrs	r3, r3, #1
 800115c:	b2db      	uxtb	r3, r3
 800115e:	7b7a      	ldrb	r2, [r7, #13]
 8001160:	429a      	cmp	r2, r3
 8001162:	d3dd      	bcc.n	8001120 <LCD_ShowChar+0x12c>
		for(pos=0;pos<size;pos++)
 8001164:	7bbb      	ldrb	r3, [r7, #14]
 8001166:	3301      	adds	r3, #1
 8001168:	73bb      	strb	r3, [r7, #14]
 800116a:	7bba      	ldrb	r2, [r7, #14]
 800116c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001170:	429a      	cmp	r2, r3
 8001172:	d3b8      	bcc.n	80010e6 <LCD_ShowChar+0xf2>
		    }
		}
	}
	POINT_COLOR=colortemp;	
 8001174:	4a09      	ldr	r2, [pc, #36]	; (800119c <LCD_ShowChar+0x1a8>)
 8001176:	897b      	ldrh	r3, [r7, #10]
 8001178:	8013      	strh	r3, [r2, #0]
	LCD_SetWindows(0,0,lcddev.width-1,lcddev.height-1);//�ָ�����Ϊȫ��    	   	 	  
 800117a:	4b0b      	ldr	r3, [pc, #44]	; (80011a8 <LCD_ShowChar+0x1b4>)
 800117c:	881b      	ldrh	r3, [r3, #0]
 800117e:	3b01      	subs	r3, #1
 8001180:	b29a      	uxth	r2, r3
 8001182:	4b09      	ldr	r3, [pc, #36]	; (80011a8 <LCD_ShowChar+0x1b4>)
 8001184:	885b      	ldrh	r3, [r3, #2]
 8001186:	3b01      	subs	r3, #1
 8001188:	b29b      	uxth	r3, r3
 800118a:	2100      	movs	r1, #0
 800118c:	2000      	movs	r0, #0
 800118e:	f000 fe19 	bl	8001dc4 <LCD_SetWindows>
}
 8001192:	bf00      	nop
 8001194:	3714      	adds	r7, #20
 8001196:	46bd      	mov	sp, r7
 8001198:	bd90      	pop	{r4, r7, pc}
 800119a:	bf00      	nop
 800119c:	2000009e 	.word	0x2000009e
 80011a0:	08006a30 	.word	0x08006a30
 80011a4:	08006ea4 	.word	0x08006ea4
 80011a8:	20000090 	.word	0x20000090

080011ac <GUI_DrawFont16>:
								s:the start address of the Chinese character
								mode:0-no overlying,1-overlying
 * @retvalue   :None
******************************************************************************/ 
void GUI_DrawFont16(u16 x, u16 y, u16 fc, u16 bc, u8 *s,u8 mode)
{
 80011ac:	b590      	push	{r4, r7, lr}
 80011ae:	b085      	sub	sp, #20
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	4604      	mov	r4, r0
 80011b4:	4608      	mov	r0, r1
 80011b6:	4611      	mov	r1, r2
 80011b8:	461a      	mov	r2, r3
 80011ba:	4623      	mov	r3, r4
 80011bc:	80fb      	strh	r3, [r7, #6]
 80011be:	4603      	mov	r3, r0
 80011c0:	80bb      	strh	r3, [r7, #4]
 80011c2:	460b      	mov	r3, r1
 80011c4:	807b      	strh	r3, [r7, #2]
 80011c6:	4613      	mov	r3, r2
 80011c8:	803b      	strh	r3, [r7, #0]
	u8 i,j;
	u16 k;
	u16 HZnum;
	u16 x0=x;
 80011ca:	88fb      	ldrh	r3, [r7, #6]
 80011cc:	817b      	strh	r3, [r7, #10]
	HZnum=sizeof(tfont16)/sizeof(typFNT_GB16);	//�Զ�ͳ�ƺ�����Ŀ
 80011ce:	233e      	movs	r3, #62	; 0x3e
 80011d0:	813b      	strh	r3, [r7, #8]
	
			
	for (k=0;k<HZnum;k++) 
 80011d2:	2300      	movs	r3, #0
 80011d4:	81bb      	strh	r3, [r7, #12]
 80011d6:	e083      	b.n	80012e0 <GUI_DrawFont16+0x134>
	{
	  if ((tfont16[k].Index[0]==*(s))&&(tfont16[k].Index[1]==*(s+1)))
 80011d8:	89ba      	ldrh	r2, [r7, #12]
 80011da:	494c      	ldr	r1, [pc, #304]	; (800130c <GUI_DrawFont16+0x160>)
 80011dc:	4613      	mov	r3, r2
 80011de:	011b      	lsls	r3, r3, #4
 80011e0:	4413      	add	r3, r2
 80011e2:	005b      	lsls	r3, r3, #1
 80011e4:	440b      	add	r3, r1
 80011e6:	781a      	ldrb	r2, [r3, #0]
 80011e8:	6a3b      	ldr	r3, [r7, #32]
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	429a      	cmp	r2, r3
 80011ee:	d174      	bne.n	80012da <GUI_DrawFont16+0x12e>
 80011f0:	89ba      	ldrh	r2, [r7, #12]
 80011f2:	4946      	ldr	r1, [pc, #280]	; (800130c <GUI_DrawFont16+0x160>)
 80011f4:	4613      	mov	r3, r2
 80011f6:	011b      	lsls	r3, r3, #4
 80011f8:	4413      	add	r3, r2
 80011fa:	005b      	lsls	r3, r3, #1
 80011fc:	440b      	add	r3, r1
 80011fe:	3301      	adds	r3, #1
 8001200:	781a      	ldrb	r2, [r3, #0]
 8001202:	6a3b      	ldr	r3, [r7, #32]
 8001204:	3301      	adds	r3, #1
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	429a      	cmp	r2, r3
 800120a:	d166      	bne.n	80012da <GUI_DrawFont16+0x12e>
	  { 	LCD_SetWindows(x,y,x+16-1,y+16-1);
 800120c:	88fb      	ldrh	r3, [r7, #6]
 800120e:	330f      	adds	r3, #15
 8001210:	b29a      	uxth	r2, r3
 8001212:	88bb      	ldrh	r3, [r7, #4]
 8001214:	330f      	adds	r3, #15
 8001216:	b29b      	uxth	r3, r3
 8001218:	88b9      	ldrh	r1, [r7, #4]
 800121a:	88f8      	ldrh	r0, [r7, #6]
 800121c:	f000 fdd2 	bl	8001dc4 <LCD_SetWindows>
		    for(i=0;i<16*2;i++)
 8001220:	2300      	movs	r3, #0
 8001222:	73fb      	strb	r3, [r7, #15]
 8001224:	e056      	b.n	80012d4 <GUI_DrawFont16+0x128>
		    {
				for(j=0;j<8;j++)
 8001226:	2300      	movs	r3, #0
 8001228:	73bb      	strb	r3, [r7, #14]
 800122a:	e04d      	b.n	80012c8 <GUI_DrawFont16+0x11c>
		    	{	
					if(!mode) //�ǵ��ӷ�ʽ
 800122c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001230:	2b00      	cmp	r3, #0
 8001232:	d11c      	bne.n	800126e <GUI_DrawFont16+0xc2>
					{
						if(tfont16[k].Msk[i]&(0x80>>j))	Lcd_WriteData_16Bit(fc);
 8001234:	89ba      	ldrh	r2, [r7, #12]
 8001236:	7bf9      	ldrb	r1, [r7, #15]
 8001238:	4834      	ldr	r0, [pc, #208]	; (800130c <GUI_DrawFont16+0x160>)
 800123a:	4613      	mov	r3, r2
 800123c:	011b      	lsls	r3, r3, #4
 800123e:	4413      	add	r3, r2
 8001240:	005b      	lsls	r3, r3, #1
 8001242:	4403      	add	r3, r0
 8001244:	440b      	add	r3, r1
 8001246:	3302      	adds	r3, #2
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	4619      	mov	r1, r3
 800124c:	7bbb      	ldrb	r3, [r7, #14]
 800124e:	2280      	movs	r2, #128	; 0x80
 8001250:	fa42 f303 	asr.w	r3, r2, r3
 8001254:	400b      	ands	r3, r1
 8001256:	2b00      	cmp	r3, #0
 8001258:	d004      	beq.n	8001264 <GUI_DrawFont16+0xb8>
 800125a:	887b      	ldrh	r3, [r7, #2]
 800125c:	4618      	mov	r0, r3
 800125e:	f000 fb6f 	bl	8001940 <Lcd_WriteData_16Bit>
 8001262:	e02e      	b.n	80012c2 <GUI_DrawFont16+0x116>
						else Lcd_WriteData_16Bit(bc);
 8001264:	883b      	ldrh	r3, [r7, #0]
 8001266:	4618      	mov	r0, r3
 8001268:	f000 fb6a 	bl	8001940 <Lcd_WriteData_16Bit>
 800126c:	e029      	b.n	80012c2 <GUI_DrawFont16+0x116>
					}
					else
					{
						POINT_COLOR=fc;
 800126e:	4a28      	ldr	r2, [pc, #160]	; (8001310 <GUI_DrawFont16+0x164>)
 8001270:	887b      	ldrh	r3, [r7, #2]
 8001272:	8013      	strh	r3, [r2, #0]
						if(tfont16[k].Msk[i]&(0x80>>j))	LCD_DrawPoint(x,y);//��һ����
 8001274:	89ba      	ldrh	r2, [r7, #12]
 8001276:	7bf9      	ldrb	r1, [r7, #15]
 8001278:	4824      	ldr	r0, [pc, #144]	; (800130c <GUI_DrawFont16+0x160>)
 800127a:	4613      	mov	r3, r2
 800127c:	011b      	lsls	r3, r3, #4
 800127e:	4413      	add	r3, r2
 8001280:	005b      	lsls	r3, r3, #1
 8001282:	4403      	add	r3, r0
 8001284:	440b      	add	r3, r1
 8001286:	3302      	adds	r3, #2
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	4619      	mov	r1, r3
 800128c:	7bbb      	ldrb	r3, [r7, #14]
 800128e:	2280      	movs	r2, #128	; 0x80
 8001290:	fa42 f303 	asr.w	r3, r2, r3
 8001294:	400b      	ands	r3, r1
 8001296:	2b00      	cmp	r3, #0
 8001298:	d005      	beq.n	80012a6 <GUI_DrawFont16+0xfa>
 800129a:	88ba      	ldrh	r2, [r7, #4]
 800129c:	88fb      	ldrh	r3, [r7, #6]
 800129e:	4611      	mov	r1, r2
 80012a0:	4618      	mov	r0, r3
 80012a2:	f000 fb83 	bl	80019ac <LCD_DrawPoint>
						x++;
 80012a6:	88fb      	ldrh	r3, [r7, #6]
 80012a8:	3301      	adds	r3, #1
 80012aa:	80fb      	strh	r3, [r7, #6]
						if((x-x0)==16)
 80012ac:	88fa      	ldrh	r2, [r7, #6]
 80012ae:	897b      	ldrh	r3, [r7, #10]
 80012b0:	1ad3      	subs	r3, r2, r3
 80012b2:	2b10      	cmp	r3, #16
 80012b4:	d105      	bne.n	80012c2 <GUI_DrawFont16+0x116>
						{
							x=x0;
 80012b6:	897b      	ldrh	r3, [r7, #10]
 80012b8:	80fb      	strh	r3, [r7, #6]
							y++;
 80012ba:	88bb      	ldrh	r3, [r7, #4]
 80012bc:	3301      	adds	r3, #1
 80012be:	80bb      	strh	r3, [r7, #4]
							break;
 80012c0:	e005      	b.n	80012ce <GUI_DrawFont16+0x122>
				for(j=0;j<8;j++)
 80012c2:	7bbb      	ldrb	r3, [r7, #14]
 80012c4:	3301      	adds	r3, #1
 80012c6:	73bb      	strb	r3, [r7, #14]
 80012c8:	7bbb      	ldrb	r3, [r7, #14]
 80012ca:	2b07      	cmp	r3, #7
 80012cc:	d9ae      	bls.n	800122c <GUI_DrawFont16+0x80>
		    for(i=0;i<16*2;i++)
 80012ce:	7bfb      	ldrb	r3, [r7, #15]
 80012d0:	3301      	adds	r3, #1
 80012d2:	73fb      	strb	r3, [r7, #15]
 80012d4:	7bfb      	ldrb	r3, [r7, #15]
 80012d6:	2b1f      	cmp	r3, #31
 80012d8:	d9a5      	bls.n	8001226 <GUI_DrawFont16+0x7a>
	for (k=0;k<HZnum;k++) 
 80012da:	89bb      	ldrh	r3, [r7, #12]
 80012dc:	3301      	adds	r3, #1
 80012de:	81bb      	strh	r3, [r7, #12]
 80012e0:	89ba      	ldrh	r2, [r7, #12]
 80012e2:	893b      	ldrh	r3, [r7, #8]
 80012e4:	429a      	cmp	r2, r3
 80012e6:	f4ff af77 	bcc.w	80011d8 <GUI_DrawFont16+0x2c>
			
		}				  	
		continue;  //���ҵ���Ӧ�����ֿ������˳�����ֹ��������ظ�ȡģ����Ӱ��
	}

	LCD_SetWindows(0,0,lcddev.width-1,lcddev.height-1);//�ָ�����Ϊȫ��  
 80012ea:	4b0a      	ldr	r3, [pc, #40]	; (8001314 <GUI_DrawFont16+0x168>)
 80012ec:	881b      	ldrh	r3, [r3, #0]
 80012ee:	3b01      	subs	r3, #1
 80012f0:	b29a      	uxth	r2, r3
 80012f2:	4b08      	ldr	r3, [pc, #32]	; (8001314 <GUI_DrawFont16+0x168>)
 80012f4:	885b      	ldrh	r3, [r3, #2]
 80012f6:	3b01      	subs	r3, #1
 80012f8:	b29b      	uxth	r3, r3
 80012fa:	2100      	movs	r1, #0
 80012fc:	2000      	movs	r0, #0
 80012fe:	f000 fd61 	bl	8001dc4 <LCD_SetWindows>
} 
 8001302:	bf00      	nop
 8001304:	3714      	adds	r7, #20
 8001306:	46bd      	mov	sp, r7
 8001308:	bd90      	pop	{r4, r7, pc}
 800130a:	bf00      	nop
 800130c:	08007494 	.word	0x08007494
 8001310:	2000009e 	.word	0x2000009e
 8001314:	20000090 	.word	0x20000090

08001318 <GUI_DrawFont24>:
								s:the start address of the Chinese character
								mode:0-no overlying,1-overlying
 * @retvalue   :None
******************************************************************************/ 
void GUI_DrawFont24(u16 x, u16 y, u16 fc, u16 bc, u8 *s,u8 mode)
{
 8001318:	b590      	push	{r4, r7, lr}
 800131a:	b085      	sub	sp, #20
 800131c:	af00      	add	r7, sp, #0
 800131e:	4604      	mov	r4, r0
 8001320:	4608      	mov	r0, r1
 8001322:	4611      	mov	r1, r2
 8001324:	461a      	mov	r2, r3
 8001326:	4623      	mov	r3, r4
 8001328:	80fb      	strh	r3, [r7, #6]
 800132a:	4603      	mov	r3, r0
 800132c:	80bb      	strh	r3, [r7, #4]
 800132e:	460b      	mov	r3, r1
 8001330:	807b      	strh	r3, [r7, #2]
 8001332:	4613      	mov	r3, r2
 8001334:	803b      	strh	r3, [r7, #0]
	u8 i,j;
	u16 k;
	u16 HZnum;
	u16 x0=x;
 8001336:	88fb      	ldrh	r3, [r7, #6]
 8001338:	817b      	strh	r3, [r7, #10]
	HZnum=sizeof(tfont24)/sizeof(typFNT_GB24);	//�Զ�ͳ�ƺ�����Ŀ
 800133a:	2307      	movs	r3, #7
 800133c:	813b      	strh	r3, [r7, #8]
		
			for (k=0;k<HZnum;k++) 
 800133e:	2300      	movs	r3, #0
 8001340:	81bb      	strh	r3, [r7, #12]
 8001342:	e07f      	b.n	8001444 <GUI_DrawFont24+0x12c>
			{
			  if ((tfont24[k].Index[0]==*(s))&&(tfont24[k].Index[1]==*(s+1)))
 8001344:	89bb      	ldrh	r3, [r7, #12]
 8001346:	4a4a      	ldr	r2, [pc, #296]	; (8001470 <GUI_DrawFont24+0x158>)
 8001348:	214a      	movs	r1, #74	; 0x4a
 800134a:	fb01 f303 	mul.w	r3, r1, r3
 800134e:	4413      	add	r3, r2
 8001350:	781a      	ldrb	r2, [r3, #0]
 8001352:	6a3b      	ldr	r3, [r7, #32]
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	429a      	cmp	r2, r3
 8001358:	d171      	bne.n	800143e <GUI_DrawFont24+0x126>
 800135a:	89bb      	ldrh	r3, [r7, #12]
 800135c:	4a44      	ldr	r2, [pc, #272]	; (8001470 <GUI_DrawFont24+0x158>)
 800135e:	214a      	movs	r1, #74	; 0x4a
 8001360:	fb01 f303 	mul.w	r3, r1, r3
 8001364:	4413      	add	r3, r2
 8001366:	3301      	adds	r3, #1
 8001368:	781a      	ldrb	r2, [r3, #0]
 800136a:	6a3b      	ldr	r3, [r7, #32]
 800136c:	3301      	adds	r3, #1
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	429a      	cmp	r2, r3
 8001372:	d164      	bne.n	800143e <GUI_DrawFont24+0x126>
			  { 	LCD_SetWindows(x,y,x+24-1,y+24-1);
 8001374:	88fb      	ldrh	r3, [r7, #6]
 8001376:	3317      	adds	r3, #23
 8001378:	b29a      	uxth	r2, r3
 800137a:	88bb      	ldrh	r3, [r7, #4]
 800137c:	3317      	adds	r3, #23
 800137e:	b29b      	uxth	r3, r3
 8001380:	88b9      	ldrh	r1, [r7, #4]
 8001382:	88f8      	ldrh	r0, [r7, #6]
 8001384:	f000 fd1e 	bl	8001dc4 <LCD_SetWindows>
				    for(i=0;i<24*3;i++)
 8001388:	2300      	movs	r3, #0
 800138a:	73fb      	strb	r3, [r7, #15]
 800138c:	e054      	b.n	8001438 <GUI_DrawFont24+0x120>
				    {
							for(j=0;j<8;j++)
 800138e:	2300      	movs	r3, #0
 8001390:	73bb      	strb	r3, [r7, #14]
 8001392:	e04b      	b.n	800142c <GUI_DrawFont24+0x114>
							{
								if(!mode) //�ǵ��ӷ�ʽ
 8001394:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001398:	2b00      	cmp	r3, #0
 800139a:	d11b      	bne.n	80013d4 <GUI_DrawFont24+0xbc>
								{
									if(tfont24[k].Msk[i]&(0x80>>j))	Lcd_WriteData_16Bit(fc);
 800139c:	89ba      	ldrh	r2, [r7, #12]
 800139e:	7bfb      	ldrb	r3, [r7, #15]
 80013a0:	4933      	ldr	r1, [pc, #204]	; (8001470 <GUI_DrawFont24+0x158>)
 80013a2:	204a      	movs	r0, #74	; 0x4a
 80013a4:	fb00 f202 	mul.w	r2, r0, r2
 80013a8:	440a      	add	r2, r1
 80013aa:	4413      	add	r3, r2
 80013ac:	3302      	adds	r3, #2
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	4619      	mov	r1, r3
 80013b2:	7bbb      	ldrb	r3, [r7, #14]
 80013b4:	2280      	movs	r2, #128	; 0x80
 80013b6:	fa42 f303 	asr.w	r3, r2, r3
 80013ba:	400b      	ands	r3, r1
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d004      	beq.n	80013ca <GUI_DrawFont24+0xb2>
 80013c0:	887b      	ldrh	r3, [r7, #2]
 80013c2:	4618      	mov	r0, r3
 80013c4:	f000 fabc 	bl	8001940 <Lcd_WriteData_16Bit>
 80013c8:	e02d      	b.n	8001426 <GUI_DrawFont24+0x10e>
									else Lcd_WriteData_16Bit(bc);
 80013ca:	883b      	ldrh	r3, [r7, #0]
 80013cc:	4618      	mov	r0, r3
 80013ce:	f000 fab7 	bl	8001940 <Lcd_WriteData_16Bit>
 80013d2:	e028      	b.n	8001426 <GUI_DrawFont24+0x10e>
								}
							else
							{
								POINT_COLOR=fc;
 80013d4:	4a27      	ldr	r2, [pc, #156]	; (8001474 <GUI_DrawFont24+0x15c>)
 80013d6:	887b      	ldrh	r3, [r7, #2]
 80013d8:	8013      	strh	r3, [r2, #0]
								if(tfont24[k].Msk[i]&(0x80>>j))	LCD_DrawPoint(x,y);//��һ����
 80013da:	89ba      	ldrh	r2, [r7, #12]
 80013dc:	7bfb      	ldrb	r3, [r7, #15]
 80013de:	4924      	ldr	r1, [pc, #144]	; (8001470 <GUI_DrawFont24+0x158>)
 80013e0:	204a      	movs	r0, #74	; 0x4a
 80013e2:	fb00 f202 	mul.w	r2, r0, r2
 80013e6:	440a      	add	r2, r1
 80013e8:	4413      	add	r3, r2
 80013ea:	3302      	adds	r3, #2
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	4619      	mov	r1, r3
 80013f0:	7bbb      	ldrb	r3, [r7, #14]
 80013f2:	2280      	movs	r2, #128	; 0x80
 80013f4:	fa42 f303 	asr.w	r3, r2, r3
 80013f8:	400b      	ands	r3, r1
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d005      	beq.n	800140a <GUI_DrawFont24+0xf2>
 80013fe:	88ba      	ldrh	r2, [r7, #4]
 8001400:	88fb      	ldrh	r3, [r7, #6]
 8001402:	4611      	mov	r1, r2
 8001404:	4618      	mov	r0, r3
 8001406:	f000 fad1 	bl	80019ac <LCD_DrawPoint>
								x++;
 800140a:	88fb      	ldrh	r3, [r7, #6]
 800140c:	3301      	adds	r3, #1
 800140e:	80fb      	strh	r3, [r7, #6]
								if((x-x0)==24)
 8001410:	88fa      	ldrh	r2, [r7, #6]
 8001412:	897b      	ldrh	r3, [r7, #10]
 8001414:	1ad3      	subs	r3, r2, r3
 8001416:	2b18      	cmp	r3, #24
 8001418:	d105      	bne.n	8001426 <GUI_DrawFont24+0x10e>
								{
									x=x0;
 800141a:	897b      	ldrh	r3, [r7, #10]
 800141c:	80fb      	strh	r3, [r7, #6]
									y++;
 800141e:	88bb      	ldrh	r3, [r7, #4]
 8001420:	3301      	adds	r3, #1
 8001422:	80bb      	strh	r3, [r7, #4]
									break;
 8001424:	e005      	b.n	8001432 <GUI_DrawFont24+0x11a>
							for(j=0;j<8;j++)
 8001426:	7bbb      	ldrb	r3, [r7, #14]
 8001428:	3301      	adds	r3, #1
 800142a:	73bb      	strb	r3, [r7, #14]
 800142c:	7bbb      	ldrb	r3, [r7, #14]
 800142e:	2b07      	cmp	r3, #7
 8001430:	d9b0      	bls.n	8001394 <GUI_DrawFont24+0x7c>
				    for(i=0;i<24*3;i++)
 8001432:	7bfb      	ldrb	r3, [r7, #15]
 8001434:	3301      	adds	r3, #1
 8001436:	73fb      	strb	r3, [r7, #15]
 8001438:	7bfb      	ldrb	r3, [r7, #15]
 800143a:	2b47      	cmp	r3, #71	; 0x47
 800143c:	d9a7      	bls.n	800138e <GUI_DrawFont24+0x76>
			for (k=0;k<HZnum;k++) 
 800143e:	89bb      	ldrh	r3, [r7, #12]
 8001440:	3301      	adds	r3, #1
 8001442:	81bb      	strh	r3, [r7, #12]
 8001444:	89ba      	ldrh	r2, [r7, #12]
 8001446:	893b      	ldrh	r3, [r7, #8]
 8001448:	429a      	cmp	r2, r3
 800144a:	f4ff af7b 	bcc.w	8001344 <GUI_DrawFont24+0x2c>
					
				}				  	
				continue;  //���ҵ���Ӧ�����ֿ������˳�����ֹ��������ظ�ȡģ����Ӱ��
			}

	LCD_SetWindows(0,0,lcddev.width-1,lcddev.height-1);//�ָ�����Ϊȫ��  
 800144e:	4b0a      	ldr	r3, [pc, #40]	; (8001478 <GUI_DrawFont24+0x160>)
 8001450:	881b      	ldrh	r3, [r3, #0]
 8001452:	3b01      	subs	r3, #1
 8001454:	b29a      	uxth	r2, r3
 8001456:	4b08      	ldr	r3, [pc, #32]	; (8001478 <GUI_DrawFont24+0x160>)
 8001458:	885b      	ldrh	r3, [r3, #2]
 800145a:	3b01      	subs	r3, #1
 800145c:	b29b      	uxth	r3, r3
 800145e:	2100      	movs	r1, #0
 8001460:	2000      	movs	r0, #0
 8001462:	f000 fcaf 	bl	8001dc4 <LCD_SetWindows>
}
 8001466:	bf00      	nop
 8001468:	3714      	adds	r7, #20
 800146a:	46bd      	mov	sp, r7
 800146c:	bd90      	pop	{r4, r7, pc}
 800146e:	bf00      	nop
 8001470:	08007cd0 	.word	0x08007cd0
 8001474:	2000009e 	.word	0x2000009e
 8001478:	20000090 	.word	0x20000090

0800147c <GUI_DrawFont32>:
								s:the start address of the Chinese character
								mode:0-no overlying,1-overlying
 * @retvalue   :None
******************************************************************************/ 
void GUI_DrawFont32(u16 x, u16 y, u16 fc, u16 bc, u8 *s,u8 mode)
{
 800147c:	b590      	push	{r4, r7, lr}
 800147e:	b085      	sub	sp, #20
 8001480:	af00      	add	r7, sp, #0
 8001482:	4604      	mov	r4, r0
 8001484:	4608      	mov	r0, r1
 8001486:	4611      	mov	r1, r2
 8001488:	461a      	mov	r2, r3
 800148a:	4623      	mov	r3, r4
 800148c:	80fb      	strh	r3, [r7, #6]
 800148e:	4603      	mov	r3, r0
 8001490:	80bb      	strh	r3, [r7, #4]
 8001492:	460b      	mov	r3, r1
 8001494:	807b      	strh	r3, [r7, #2]
 8001496:	4613      	mov	r3, r2
 8001498:	803b      	strh	r3, [r7, #0]
	u8 i,j;
	u16 k;
	u16 HZnum;
	u16 x0=x;
 800149a:	88fb      	ldrh	r3, [r7, #6]
 800149c:	817b      	strh	r3, [r7, #10]
	HZnum=sizeof(tfont32)/sizeof(typFNT_GB32);	//�Զ�ͳ�ƺ�����Ŀ
 800149e:	2304      	movs	r3, #4
 80014a0:	813b      	strh	r3, [r7, #8]
	for (k=0;k<HZnum;k++) 
 80014a2:	2300      	movs	r3, #0
 80014a4:	81bb      	strh	r3, [r7, #12]
 80014a6:	e084      	b.n	80015b2 <GUI_DrawFont32+0x136>
			{
			  if ((tfont32[k].Index[0]==*(s))&&(tfont32[k].Index[1]==*(s+1)))
 80014a8:	89ba      	ldrh	r2, [r7, #12]
 80014aa:	494c      	ldr	r1, [pc, #304]	; (80015dc <GUI_DrawFont32+0x160>)
 80014ac:	4613      	mov	r3, r2
 80014ae:	019b      	lsls	r3, r3, #6
 80014b0:	4413      	add	r3, r2
 80014b2:	005b      	lsls	r3, r3, #1
 80014b4:	440b      	add	r3, r1
 80014b6:	781a      	ldrb	r2, [r3, #0]
 80014b8:	6a3b      	ldr	r3, [r7, #32]
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	429a      	cmp	r2, r3
 80014be:	d175      	bne.n	80015ac <GUI_DrawFont32+0x130>
 80014c0:	89ba      	ldrh	r2, [r7, #12]
 80014c2:	4946      	ldr	r1, [pc, #280]	; (80015dc <GUI_DrawFont32+0x160>)
 80014c4:	4613      	mov	r3, r2
 80014c6:	019b      	lsls	r3, r3, #6
 80014c8:	4413      	add	r3, r2
 80014ca:	005b      	lsls	r3, r3, #1
 80014cc:	440b      	add	r3, r1
 80014ce:	3301      	adds	r3, #1
 80014d0:	781a      	ldrb	r2, [r3, #0]
 80014d2:	6a3b      	ldr	r3, [r7, #32]
 80014d4:	3301      	adds	r3, #1
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	429a      	cmp	r2, r3
 80014da:	d167      	bne.n	80015ac <GUI_DrawFont32+0x130>
			  { 	LCD_SetWindows(x,y,x+32-1,y+32-1);
 80014dc:	88fb      	ldrh	r3, [r7, #6]
 80014de:	331f      	adds	r3, #31
 80014e0:	b29a      	uxth	r2, r3
 80014e2:	88bb      	ldrh	r3, [r7, #4]
 80014e4:	331f      	adds	r3, #31
 80014e6:	b29b      	uxth	r3, r3
 80014e8:	88b9      	ldrh	r1, [r7, #4]
 80014ea:	88f8      	ldrh	r0, [r7, #6]
 80014ec:	f000 fc6a 	bl	8001dc4 <LCD_SetWindows>
				    for(i=0;i<32*4;i++)
 80014f0:	2300      	movs	r3, #0
 80014f2:	73fb      	strb	r3, [r7, #15]
 80014f4:	e056      	b.n	80015a4 <GUI_DrawFont32+0x128>
				    {
						for(j=0;j<8;j++)
 80014f6:	2300      	movs	r3, #0
 80014f8:	73bb      	strb	r3, [r7, #14]
 80014fa:	e04d      	b.n	8001598 <GUI_DrawFont32+0x11c>
				    	{
							if(!mode) //�ǵ��ӷ�ʽ
 80014fc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001500:	2b00      	cmp	r3, #0
 8001502:	d11c      	bne.n	800153e <GUI_DrawFont32+0xc2>
							{
								if(tfont32[k].Msk[i]&(0x80>>j))	Lcd_WriteData_16Bit(fc);
 8001504:	89ba      	ldrh	r2, [r7, #12]
 8001506:	7bf9      	ldrb	r1, [r7, #15]
 8001508:	4834      	ldr	r0, [pc, #208]	; (80015dc <GUI_DrawFont32+0x160>)
 800150a:	4613      	mov	r3, r2
 800150c:	019b      	lsls	r3, r3, #6
 800150e:	4413      	add	r3, r2
 8001510:	005b      	lsls	r3, r3, #1
 8001512:	4403      	add	r3, r0
 8001514:	440b      	add	r3, r1
 8001516:	3302      	adds	r3, #2
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	4619      	mov	r1, r3
 800151c:	7bbb      	ldrb	r3, [r7, #14]
 800151e:	2280      	movs	r2, #128	; 0x80
 8001520:	fa42 f303 	asr.w	r3, r2, r3
 8001524:	400b      	ands	r3, r1
 8001526:	2b00      	cmp	r3, #0
 8001528:	d004      	beq.n	8001534 <GUI_DrawFont32+0xb8>
 800152a:	887b      	ldrh	r3, [r7, #2]
 800152c:	4618      	mov	r0, r3
 800152e:	f000 fa07 	bl	8001940 <Lcd_WriteData_16Bit>
 8001532:	e02e      	b.n	8001592 <GUI_DrawFont32+0x116>
								else Lcd_WriteData_16Bit(bc);
 8001534:	883b      	ldrh	r3, [r7, #0]
 8001536:	4618      	mov	r0, r3
 8001538:	f000 fa02 	bl	8001940 <Lcd_WriteData_16Bit>
 800153c:	e029      	b.n	8001592 <GUI_DrawFont32+0x116>
							}
							else
							{
								POINT_COLOR=fc;
 800153e:	4a28      	ldr	r2, [pc, #160]	; (80015e0 <GUI_DrawFont32+0x164>)
 8001540:	887b      	ldrh	r3, [r7, #2]
 8001542:	8013      	strh	r3, [r2, #0]
								if(tfont32[k].Msk[i]&(0x80>>j))	LCD_DrawPoint(x,y);//��һ����
 8001544:	89ba      	ldrh	r2, [r7, #12]
 8001546:	7bf9      	ldrb	r1, [r7, #15]
 8001548:	4824      	ldr	r0, [pc, #144]	; (80015dc <GUI_DrawFont32+0x160>)
 800154a:	4613      	mov	r3, r2
 800154c:	019b      	lsls	r3, r3, #6
 800154e:	4413      	add	r3, r2
 8001550:	005b      	lsls	r3, r3, #1
 8001552:	4403      	add	r3, r0
 8001554:	440b      	add	r3, r1
 8001556:	3302      	adds	r3, #2
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	4619      	mov	r1, r3
 800155c:	7bbb      	ldrb	r3, [r7, #14]
 800155e:	2280      	movs	r2, #128	; 0x80
 8001560:	fa42 f303 	asr.w	r3, r2, r3
 8001564:	400b      	ands	r3, r1
 8001566:	2b00      	cmp	r3, #0
 8001568:	d005      	beq.n	8001576 <GUI_DrawFont32+0xfa>
 800156a:	88ba      	ldrh	r2, [r7, #4]
 800156c:	88fb      	ldrh	r3, [r7, #6]
 800156e:	4611      	mov	r1, r2
 8001570:	4618      	mov	r0, r3
 8001572:	f000 fa1b 	bl	80019ac <LCD_DrawPoint>
								x++;
 8001576:	88fb      	ldrh	r3, [r7, #6]
 8001578:	3301      	adds	r3, #1
 800157a:	80fb      	strh	r3, [r7, #6]
								if((x-x0)==32)
 800157c:	88fa      	ldrh	r2, [r7, #6]
 800157e:	897b      	ldrh	r3, [r7, #10]
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	2b20      	cmp	r3, #32
 8001584:	d105      	bne.n	8001592 <GUI_DrawFont32+0x116>
								{
									x=x0;
 8001586:	897b      	ldrh	r3, [r7, #10]
 8001588:	80fb      	strh	r3, [r7, #6]
									y++;
 800158a:	88bb      	ldrh	r3, [r7, #4]
 800158c:	3301      	adds	r3, #1
 800158e:	80bb      	strh	r3, [r7, #4]
									break;
 8001590:	e005      	b.n	800159e <GUI_DrawFont32+0x122>
						for(j=0;j<8;j++)
 8001592:	7bbb      	ldrb	r3, [r7, #14]
 8001594:	3301      	adds	r3, #1
 8001596:	73bb      	strb	r3, [r7, #14]
 8001598:	7bbb      	ldrb	r3, [r7, #14]
 800159a:	2b07      	cmp	r3, #7
 800159c:	d9ae      	bls.n	80014fc <GUI_DrawFont32+0x80>
				    for(i=0;i<32*4;i++)
 800159e:	7bfb      	ldrb	r3, [r7, #15]
 80015a0:	3301      	adds	r3, #1
 80015a2:	73fb      	strb	r3, [r7, #15]
 80015a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	daa4      	bge.n	80014f6 <GUI_DrawFont32+0x7a>
	for (k=0;k<HZnum;k++) 
 80015ac:	89bb      	ldrh	r3, [r7, #12]
 80015ae:	3301      	adds	r3, #1
 80015b0:	81bb      	strh	r3, [r7, #12]
 80015b2:	89ba      	ldrh	r2, [r7, #12]
 80015b4:	893b      	ldrh	r3, [r7, #8]
 80015b6:	429a      	cmp	r2, r3
 80015b8:	f4ff af76 	bcc.w	80014a8 <GUI_DrawFont32+0x2c>
					
				}				  	
				continue;  //���ҵ���Ӧ�����ֿ������˳�����ֹ��������ظ�ȡģ����Ӱ��
			}
	
	LCD_SetWindows(0,0,lcddev.width-1,lcddev.height-1);//�ָ�����Ϊȫ��  
 80015bc:	4b09      	ldr	r3, [pc, #36]	; (80015e4 <GUI_DrawFont32+0x168>)
 80015be:	881b      	ldrh	r3, [r3, #0]
 80015c0:	3b01      	subs	r3, #1
 80015c2:	b29a      	uxth	r2, r3
 80015c4:	4b07      	ldr	r3, [pc, #28]	; (80015e4 <GUI_DrawFont32+0x168>)
 80015c6:	885b      	ldrh	r3, [r3, #2]
 80015c8:	3b01      	subs	r3, #1
 80015ca:	b29b      	uxth	r3, r3
 80015cc:	2100      	movs	r1, #0
 80015ce:	2000      	movs	r0, #0
 80015d0:	f000 fbf8 	bl	8001dc4 <LCD_SetWindows>
} 
 80015d4:	bf00      	nop
 80015d6:	3714      	adds	r7, #20
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd90      	pop	{r4, r7, pc}
 80015dc:	08007ed8 	.word	0x08007ed8
 80015e0:	2000009e 	.word	0x2000009e
 80015e4:	20000090 	.word	0x20000090

080015e8 <Show_Str>:
								size:the size of Chinese and English strings
								mode:0-no overlying,1-overlying
 * @retvalue   :None
******************************************************************************/	   		   
void Show_Str(u16 x, u16 y, u16 fc, u16 bc, u8 *str,u8 size,u8 mode)
{					
 80015e8:	b5b0      	push	{r4, r5, r7, lr}
 80015ea:	b088      	sub	sp, #32
 80015ec:	af04      	add	r7, sp, #16
 80015ee:	4604      	mov	r4, r0
 80015f0:	4608      	mov	r0, r1
 80015f2:	4611      	mov	r1, r2
 80015f4:	461a      	mov	r2, r3
 80015f6:	4623      	mov	r3, r4
 80015f8:	80fb      	strh	r3, [r7, #6]
 80015fa:	4603      	mov	r3, r0
 80015fc:	80bb      	strh	r3, [r7, #4]
 80015fe:	460b      	mov	r3, r1
 8001600:	807b      	strh	r3, [r7, #2]
 8001602:	4613      	mov	r3, r2
 8001604:	803b      	strh	r3, [r7, #0]
	u16 x0=x;							  	  
 8001606:	88fb      	ldrh	r3, [r7, #6]
 8001608:	81bb      	strh	r3, [r7, #12]
  	u8 bHz=0;     //�ַ��������� 
 800160a:	2300      	movs	r3, #0
 800160c:	73fb      	strb	r3, [r7, #15]
    while(*str!=0)//����δ����
 800160e:	e0af      	b.n	8001770 <Show_Str+0x188>
    { 
        if(!bHz)
 8001610:	7bfb      	ldrb	r3, [r7, #15]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d161      	bne.n	80016da <Show_Str+0xf2>
        {
			if(x>(lcddev.width-size/2)||y>(lcddev.height-size)) 
 8001616:	88fa      	ldrh	r2, [r7, #6]
 8001618:	4b5b      	ldr	r3, [pc, #364]	; (8001788 <Show_Str+0x1a0>)
 800161a:	881b      	ldrh	r3, [r3, #0]
 800161c:	4619      	mov	r1, r3
 800161e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001622:	085b      	lsrs	r3, r3, #1
 8001624:	b2db      	uxtb	r3, r3
 8001626:	1acb      	subs	r3, r1, r3
 8001628:	429a      	cmp	r2, r3
 800162a:	f300 80a7 	bgt.w	800177c <Show_Str+0x194>
 800162e:	88ba      	ldrh	r2, [r7, #4]
 8001630:	4b55      	ldr	r3, [pc, #340]	; (8001788 <Show_Str+0x1a0>)
 8001632:	885b      	ldrh	r3, [r3, #2]
 8001634:	4619      	mov	r1, r3
 8001636:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800163a:	1acb      	subs	r3, r1, r3
 800163c:	429a      	cmp	r2, r3
 800163e:	f300 809d 	bgt.w	800177c <Show_Str+0x194>
			return; 
	        if(*str>0x80)bHz=1;//���� 
 8001642:	6a3b      	ldr	r3, [r7, #32]
 8001644:	781b      	ldrb	r3, [r3, #0]
 8001646:	2b80      	cmp	r3, #128	; 0x80
 8001648:	d902      	bls.n	8001650 <Show_Str+0x68>
 800164a:	2301      	movs	r3, #1
 800164c:	73fb      	strb	r3, [r7, #15]
 800164e:	e08f      	b.n	8001770 <Show_Str+0x188>
	        else              //�ַ�
	        {          
		        if(*str==0x0D)//���з���
 8001650:	6a3b      	ldr	r3, [r7, #32]
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	2b0d      	cmp	r3, #13
 8001656:	d10b      	bne.n	8001670 <Show_Str+0x88>
		        {         
		            y+=size;
 8001658:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800165c:	b29a      	uxth	r2, r3
 800165e:	88bb      	ldrh	r3, [r7, #4]
 8001660:	4413      	add	r3, r2
 8001662:	80bb      	strh	r3, [r7, #4]
					x=x0;
 8001664:	89bb      	ldrh	r3, [r7, #12]
 8001666:	80fb      	strh	r3, [r7, #6]
		            str++; 
 8001668:	6a3b      	ldr	r3, [r7, #32]
 800166a:	3301      	adds	r3, #1
 800166c:	623b      	str	r3, [r7, #32]
 800166e:	e030      	b.n	80016d2 <Show_Str+0xea>
		        }  
		        else
				{
					if(size>16)//�ֿ���û�м���12X24 16X32��Ӣ������,��8X16����
 8001670:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001674:	2b10      	cmp	r3, #16
 8001676:	d913      	bls.n	80016a0 <Show_Str+0xb8>
					{  
					LCD_ShowChar(x,y,fc,bc,*str,16,mode);
 8001678:	6a3b      	ldr	r3, [r7, #32]
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	883d      	ldrh	r5, [r7, #0]
 800167e:	887c      	ldrh	r4, [r7, #2]
 8001680:	88b9      	ldrh	r1, [r7, #4]
 8001682:	88f8      	ldrh	r0, [r7, #6]
 8001684:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001688:	9202      	str	r2, [sp, #8]
 800168a:	2210      	movs	r2, #16
 800168c:	9201      	str	r2, [sp, #4]
 800168e:	9300      	str	r3, [sp, #0]
 8001690:	462b      	mov	r3, r5
 8001692:	4622      	mov	r2, r4
 8001694:	f7ff fcae 	bl	8000ff4 <LCD_ShowChar>
					x+=8; //�ַ�,Ϊȫ�ֵ�һ�� 
 8001698:	88fb      	ldrh	r3, [r7, #6]
 800169a:	3308      	adds	r3, #8
 800169c:	80fb      	strh	r3, [r7, #6]
 800169e:	e018      	b.n	80016d2 <Show_Str+0xea>
					}
					else
					{
					LCD_ShowChar(x,y,fc,bc,*str,size,mode);
 80016a0:	6a3b      	ldr	r3, [r7, #32]
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	883d      	ldrh	r5, [r7, #0]
 80016a6:	887c      	ldrh	r4, [r7, #2]
 80016a8:	88b9      	ldrh	r1, [r7, #4]
 80016aa:	88f8      	ldrh	r0, [r7, #6]
 80016ac:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80016b0:	9202      	str	r2, [sp, #8]
 80016b2:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80016b6:	9201      	str	r2, [sp, #4]
 80016b8:	9300      	str	r3, [sp, #0]
 80016ba:	462b      	mov	r3, r5
 80016bc:	4622      	mov	r2, r4
 80016be:	f7ff fc99 	bl	8000ff4 <LCD_ShowChar>
					x+=size/2; //�ַ�,Ϊȫ�ֵ�һ�� 
 80016c2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80016c6:	085b      	lsrs	r3, r3, #1
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	b29a      	uxth	r2, r3
 80016cc:	88fb      	ldrh	r3, [r7, #6]
 80016ce:	4413      	add	r3, r2
 80016d0:	80fb      	strh	r3, [r7, #6]
					}
				} 
				str++; 
 80016d2:	6a3b      	ldr	r3, [r7, #32]
 80016d4:	3301      	adds	r3, #1
 80016d6:	623b      	str	r3, [r7, #32]
 80016d8:	e04a      	b.n	8001770 <Show_Str+0x188>
		        
	        }
        }else//���� 
        {   
			if(x>(lcddev.width-size)||y>(lcddev.height-size)) 
 80016da:	88fa      	ldrh	r2, [r7, #6]
 80016dc:	4b2a      	ldr	r3, [pc, #168]	; (8001788 <Show_Str+0x1a0>)
 80016de:	881b      	ldrh	r3, [r3, #0]
 80016e0:	4619      	mov	r1, r3
 80016e2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80016e6:	1acb      	subs	r3, r1, r3
 80016e8:	429a      	cmp	r2, r3
 80016ea:	dc49      	bgt.n	8001780 <Show_Str+0x198>
 80016ec:	88ba      	ldrh	r2, [r7, #4]
 80016ee:	4b26      	ldr	r3, [pc, #152]	; (8001788 <Show_Str+0x1a0>)
 80016f0:	885b      	ldrh	r3, [r3, #2]
 80016f2:	4619      	mov	r1, r3
 80016f4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80016f8:	1acb      	subs	r3, r1, r3
 80016fa:	429a      	cmp	r2, r3
 80016fc:	dc40      	bgt.n	8001780 <Show_Str+0x198>
			return;  
            bHz=0;//�к��ֿ�    
 80016fe:	2300      	movs	r3, #0
 8001700:	73fb      	strb	r3, [r7, #15]
			if(size==32)
 8001702:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001706:	2b20      	cmp	r3, #32
 8001708:	d10c      	bne.n	8001724 <Show_Str+0x13c>
			GUI_DrawFont32(x,y,fc,bc,str,mode);	 	
 800170a:	883c      	ldrh	r4, [r7, #0]
 800170c:	887a      	ldrh	r2, [r7, #2]
 800170e:	88b9      	ldrh	r1, [r7, #4]
 8001710:	88f8      	ldrh	r0, [r7, #6]
 8001712:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001716:	9301      	str	r3, [sp, #4]
 8001718:	6a3b      	ldr	r3, [r7, #32]
 800171a:	9300      	str	r3, [sp, #0]
 800171c:	4623      	mov	r3, r4
 800171e:	f7ff fead 	bl	800147c <GUI_DrawFont32>
 8001722:	e01c      	b.n	800175e <Show_Str+0x176>
			else if(size==24)
 8001724:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001728:	2b18      	cmp	r3, #24
 800172a:	d10c      	bne.n	8001746 <Show_Str+0x15e>
			GUI_DrawFont24(x,y,fc,bc,str,mode);	
 800172c:	883c      	ldrh	r4, [r7, #0]
 800172e:	887a      	ldrh	r2, [r7, #2]
 8001730:	88b9      	ldrh	r1, [r7, #4]
 8001732:	88f8      	ldrh	r0, [r7, #6]
 8001734:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001738:	9301      	str	r3, [sp, #4]
 800173a:	6a3b      	ldr	r3, [r7, #32]
 800173c:	9300      	str	r3, [sp, #0]
 800173e:	4623      	mov	r3, r4
 8001740:	f7ff fdea 	bl	8001318 <GUI_DrawFont24>
 8001744:	e00b      	b.n	800175e <Show_Str+0x176>
			else
			GUI_DrawFont16(x,y,fc,bc,str,mode);
 8001746:	883c      	ldrh	r4, [r7, #0]
 8001748:	887a      	ldrh	r2, [r7, #2]
 800174a:	88b9      	ldrh	r1, [r7, #4]
 800174c:	88f8      	ldrh	r0, [r7, #6]
 800174e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001752:	9301      	str	r3, [sp, #4]
 8001754:	6a3b      	ldr	r3, [r7, #32]
 8001756:	9300      	str	r3, [sp, #0]
 8001758:	4623      	mov	r3, r4
 800175a:	f7ff fd27 	bl	80011ac <GUI_DrawFont16>
				
	        str+=2; 
 800175e:	6a3b      	ldr	r3, [r7, #32]
 8001760:	3302      	adds	r3, #2
 8001762:	623b      	str	r3, [r7, #32]
	        x+=size;//��һ������ƫ��	    
 8001764:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001768:	b29a      	uxth	r2, r3
 800176a:	88fb      	ldrh	r3, [r7, #6]
 800176c:	4413      	add	r3, r2
 800176e:	80fb      	strh	r3, [r7, #6]
    while(*str!=0)//����δ����
 8001770:	6a3b      	ldr	r3, [r7, #32]
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	2b00      	cmp	r3, #0
 8001776:	f47f af4b 	bne.w	8001610 <Show_Str+0x28>
 800177a:	e002      	b.n	8001782 <Show_Str+0x19a>
			return; 
 800177c:	bf00      	nop
 800177e:	e000      	b.n	8001782 <Show_Str+0x19a>
			return;  
 8001780:	bf00      	nop
        }						 
    }   
}
 8001782:	3710      	adds	r7, #16
 8001784:	46bd      	mov	sp, r7
 8001786:	bdb0      	pop	{r4, r5, r7, pc}
 8001788:	20000090 	.word	0x20000090

0800178c <Gui_StrCenter>:
								size:the size of Chinese and English strings
								mode:0-no overlying,1-overlying
 * @retvalue   :None
******************************************************************************/ 
void Gui_StrCenter(u16 x, u16 y, u16 fc, u16 bc, u8 *str,u8 size,u8 mode)
{
 800178c:	b590      	push	{r4, r7, lr}
 800178e:	b089      	sub	sp, #36	; 0x24
 8001790:	af04      	add	r7, sp, #16
 8001792:	4604      	mov	r4, r0
 8001794:	4608      	mov	r0, r1
 8001796:	4611      	mov	r1, r2
 8001798:	461a      	mov	r2, r3
 800179a:	4623      	mov	r3, r4
 800179c:	80fb      	strh	r3, [r7, #6]
 800179e:	4603      	mov	r3, r0
 80017a0:	80bb      	strh	r3, [r7, #4]
 80017a2:	460b      	mov	r3, r1
 80017a4:	807b      	strh	r3, [r7, #2]
 80017a6:	4613      	mov	r3, r2
 80017a8:	803b      	strh	r3, [r7, #0]
	u16 len=strlen((const char *)str);
 80017aa:	6a38      	ldr	r0, [r7, #32]
 80017ac:	f7fe fd1c 	bl	80001e8 <strlen>
 80017b0:	4603      	mov	r3, r0
 80017b2:	81fb      	strh	r3, [r7, #14]
	u16 x1=(lcddev.width-len*8)/2;
 80017b4:	4b0e      	ldr	r3, [pc, #56]	; (80017f0 <Gui_StrCenter+0x64>)
 80017b6:	881b      	ldrh	r3, [r3, #0]
 80017b8:	461a      	mov	r2, r3
 80017ba:	89fb      	ldrh	r3, [r7, #14]
 80017bc:	00db      	lsls	r3, r3, #3
 80017be:	1ad3      	subs	r3, r2, r3
 80017c0:	0fda      	lsrs	r2, r3, #31
 80017c2:	4413      	add	r3, r2
 80017c4:	105b      	asrs	r3, r3, #1
 80017c6:	81bb      	strh	r3, [r7, #12]
	Show_Str(x1,y,fc,bc,str,size,mode);
 80017c8:	883c      	ldrh	r4, [r7, #0]
 80017ca:	887a      	ldrh	r2, [r7, #2]
 80017cc:	88b9      	ldrh	r1, [r7, #4]
 80017ce:	89b8      	ldrh	r0, [r7, #12]
 80017d0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80017d4:	9302      	str	r3, [sp, #8]
 80017d6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80017da:	9301      	str	r3, [sp, #4]
 80017dc:	6a3b      	ldr	r3, [r7, #32]
 80017de:	9300      	str	r3, [sp, #0]
 80017e0:	4623      	mov	r3, r4
 80017e2:	f7ff ff01 	bl	80015e8 <Show_Str>
} 
 80017e6:	bf00      	nop
 80017e8:	3714      	adds	r7, #20
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd90      	pop	{r4, r7, pc}
 80017ee:	bf00      	nop
 80017f0:	20000090 	.word	0x20000090

080017f4 <Gui_Drawbmp16>:
                y:the bebinning y coordinate of the BMP image
								p:the start address of image array
 * @retvalue   :None
******************************************************************************/ 
void Gui_Drawbmp16(u16 x,u16 y,const unsigned char *p) //��ʾ40*40 QQͼƬ
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b084      	sub	sp, #16
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	4603      	mov	r3, r0
 80017fc:	603a      	str	r2, [r7, #0]
 80017fe:	80fb      	strh	r3, [r7, #6]
 8001800:	460b      	mov	r3, r1
 8001802:	80bb      	strh	r3, [r7, #4]
  	int i; 
	unsigned char picH,picL; 
	LCD_SetWindows(x,y,x+240-1,y+320-1);//��������
 8001804:	88fb      	ldrh	r3, [r7, #6]
 8001806:	33ef      	adds	r3, #239	; 0xef
 8001808:	b29a      	uxth	r2, r3
 800180a:	88bb      	ldrh	r3, [r7, #4]
 800180c:	f203 133f 	addw	r3, r3, #319	; 0x13f
 8001810:	b29b      	uxth	r3, r3
 8001812:	88b9      	ldrh	r1, [r7, #4]
 8001814:	88f8      	ldrh	r0, [r7, #6]
 8001816:	f000 fad5 	bl	8001dc4 <LCD_SetWindows>
    for(i=0;i<240*320;i++)
 800181a:	2300      	movs	r3, #0
 800181c:	60fb      	str	r3, [r7, #12]
 800181e:	e01b      	b.n	8001858 <Gui_Drawbmp16+0x64>
	{	
	 	picL=*(p+i*2);	//���ݵ�λ��ǰ
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	005b      	lsls	r3, r3, #1
 8001824:	461a      	mov	r2, r3
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	4413      	add	r3, r2
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	72fb      	strb	r3, [r7, #11]
		picH=*(p+i*2+1);				
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	005b      	lsls	r3, r3, #1
 8001832:	3301      	adds	r3, #1
 8001834:	683a      	ldr	r2, [r7, #0]
 8001836:	4413      	add	r3, r2
 8001838:	781b      	ldrb	r3, [r3, #0]
 800183a:	72bb      	strb	r3, [r7, #10]
		Lcd_WriteData_16Bit(picH<<8|picL);  						
 800183c:	7abb      	ldrb	r3, [r7, #10]
 800183e:	021b      	lsls	r3, r3, #8
 8001840:	b21a      	sxth	r2, r3
 8001842:	7afb      	ldrb	r3, [r7, #11]
 8001844:	b21b      	sxth	r3, r3
 8001846:	4313      	orrs	r3, r2
 8001848:	b21b      	sxth	r3, r3
 800184a:	b29b      	uxth	r3, r3
 800184c:	4618      	mov	r0, r3
 800184e:	f000 f877 	bl	8001940 <Lcd_WriteData_16Bit>
    for(i=0;i<240*320;i++)
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	3301      	adds	r3, #1
 8001856:	60fb      	str	r3, [r7, #12]
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
 800185e:	dbdf      	blt.n	8001820 <Gui_Drawbmp16+0x2c>
	}	
	LCD_SetWindows(0,0,lcddev.width-1,lcddev.height-1);//�ָ���ʾ����Ϊȫ��	
 8001860:	4b07      	ldr	r3, [pc, #28]	; (8001880 <Gui_Drawbmp16+0x8c>)
 8001862:	881b      	ldrh	r3, [r3, #0]
 8001864:	3b01      	subs	r3, #1
 8001866:	b29a      	uxth	r2, r3
 8001868:	4b05      	ldr	r3, [pc, #20]	; (8001880 <Gui_Drawbmp16+0x8c>)
 800186a:	885b      	ldrh	r3, [r3, #2]
 800186c:	3b01      	subs	r3, #1
 800186e:	b29b      	uxth	r3, r3
 8001870:	2100      	movs	r1, #0
 8001872:	2000      	movs	r0, #0
 8001874:	f000 faa6 	bl	8001dc4 <LCD_SetWindows>
}
 8001878:	bf00      	nop
 800187a:	3710      	adds	r7, #16
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	20000090 	.word	0x20000090

08001884 <LCD_WR_REG>:
 * @function   :Write an 8-bit command to the LCD screen
 * @parameters :data:Command value to be written
 * @retvalue   :None
******************************************************************************/
void LCD_WR_REG(u8 data)
{ 
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
 800188a:	4603      	mov	r3, r0
 800188c:	71fb      	strb	r3, [r7, #7]
   LCD_CS_CLR;     
 800188e:	4b09      	ldr	r3, [pc, #36]	; (80018b4 <LCD_WR_REG+0x30>)
 8001890:	2200      	movs	r2, #0
 8001892:	601a      	str	r2, [r3, #0]
	 LCD_RS_CLR;	  
 8001894:	4b08      	ldr	r3, [pc, #32]	; (80018b8 <LCD_WR_REG+0x34>)
 8001896:	2200      	movs	r2, #0
 8001898:	601a      	str	r2, [r3, #0]
   SPI_WriteByte(SPI1,data);
 800189a:	79fb      	ldrb	r3, [r7, #7]
 800189c:	4619      	mov	r1, r3
 800189e:	4807      	ldr	r0, [pc, #28]	; (80018bc <LCD_WR_REG+0x38>)
 80018a0:	f000 fb4a 	bl	8001f38 <SPI_WriteByte>
   LCD_CS_SET;	
 80018a4:	4b03      	ldr	r3, [pc, #12]	; (80018b4 <LCD_WR_REG+0x30>)
 80018a6:	2201      	movs	r2, #1
 80018a8:	601a      	str	r2, [r3, #0]
}
 80018aa:	bf00      	nop
 80018ac:	3708      	adds	r7, #8
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	424082bc 	.word	0x424082bc
 80018b8:	424082b8 	.word	0x424082b8
 80018bc:	40013000 	.word	0x40013000

080018c0 <LCD_WR_DATA>:
 * @function   :Write an 8-bit data to the LCD screen
 * @parameters :data:data value to be written
 * @retvalue   :None
******************************************************************************/
void LCD_WR_DATA(u8 data)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	4603      	mov	r3, r0
 80018c8:	71fb      	strb	r3, [r7, #7]
   LCD_CS_CLR;
 80018ca:	4b09      	ldr	r3, [pc, #36]	; (80018f0 <LCD_WR_DATA+0x30>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	601a      	str	r2, [r3, #0]
	 LCD_RS_SET;
 80018d0:	4b08      	ldr	r3, [pc, #32]	; (80018f4 <LCD_WR_DATA+0x34>)
 80018d2:	2201      	movs	r2, #1
 80018d4:	601a      	str	r2, [r3, #0]
   SPI_WriteByte(SPI1,data);
 80018d6:	79fb      	ldrb	r3, [r7, #7]
 80018d8:	4619      	mov	r1, r3
 80018da:	4807      	ldr	r0, [pc, #28]	; (80018f8 <LCD_WR_DATA+0x38>)
 80018dc:	f000 fb2c 	bl	8001f38 <SPI_WriteByte>
   LCD_CS_SET;
 80018e0:	4b03      	ldr	r3, [pc, #12]	; (80018f0 <LCD_WR_DATA+0x30>)
 80018e2:	2201      	movs	r2, #1
 80018e4:	601a      	str	r2, [r3, #0]
}
 80018e6:	bf00      	nop
 80018e8:	3708      	adds	r7, #8
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	424082bc 	.word	0x424082bc
 80018f4:	424082b8 	.word	0x424082b8
 80018f8:	40013000 	.word	0x40013000

080018fc <LCD_WriteReg>:
 * @parameters :LCD_Reg:Register address
                LCD_RegValue:Data to be written
 * @retvalue   :None
******************************************************************************/
void LCD_WriteReg(u8 LCD_Reg, u16 LCD_RegValue)
{	
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0
 8001902:	4603      	mov	r3, r0
 8001904:	460a      	mov	r2, r1
 8001906:	71fb      	strb	r3, [r7, #7]
 8001908:	4613      	mov	r3, r2
 800190a:	80bb      	strh	r3, [r7, #4]
	LCD_WR_REG(LCD_Reg);  
 800190c:	79fb      	ldrb	r3, [r7, #7]
 800190e:	4618      	mov	r0, r3
 8001910:	f7ff ffb8 	bl	8001884 <LCD_WR_REG>
	LCD_WR_DATA(LCD_RegValue);	    		 
 8001914:	88bb      	ldrh	r3, [r7, #4]
 8001916:	b2db      	uxtb	r3, r3
 8001918:	4618      	mov	r0, r3
 800191a:	f7ff ffd1 	bl	80018c0 <LCD_WR_DATA>
}	   
 800191e:	bf00      	nop
 8001920:	3708      	adds	r7, #8
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
	...

08001928 <LCD_WriteRAM_Prepare>:
 * @function   :Write GRAM
 * @parameters :None
 * @retvalue   :None
******************************************************************************/	 
void LCD_WriteRAM_Prepare(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	af00      	add	r7, sp, #0
	LCD_WR_REG(lcddev.wramcmd);
 800192c:	4b03      	ldr	r3, [pc, #12]	; (800193c <LCD_WriteRAM_Prepare+0x14>)
 800192e:	891b      	ldrh	r3, [r3, #8]
 8001930:	b2db      	uxtb	r3, r3
 8001932:	4618      	mov	r0, r3
 8001934:	f7ff ffa6 	bl	8001884 <LCD_WR_REG>
}	 
 8001938:	bf00      	nop
 800193a:	bd80      	pop	{r7, pc}
 800193c:	20000090 	.word	0x20000090

08001940 <Lcd_WriteData_16Bit>:
 * @function   :Write an 16-bit command to the LCD screen
 * @parameters :Data:Data to be written
 * @retvalue   :None
******************************************************************************/	 
void Lcd_WriteData_16Bit(u16 Data)
{	
 8001940:	b580      	push	{r7, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0
 8001946:	4603      	mov	r3, r0
 8001948:	80fb      	strh	r3, [r7, #6]
   LCD_CS_CLR;
 800194a:	4b0d      	ldr	r3, [pc, #52]	; (8001980 <Lcd_WriteData_16Bit+0x40>)
 800194c:	2200      	movs	r2, #0
 800194e:	601a      	str	r2, [r3, #0]
   LCD_RS_SET;  
 8001950:	4b0c      	ldr	r3, [pc, #48]	; (8001984 <Lcd_WriteData_16Bit+0x44>)
 8001952:	2201      	movs	r2, #1
 8001954:	601a      	str	r2, [r3, #0]
   SPI_WriteByte(SPI1,Data>>8);
 8001956:	88fb      	ldrh	r3, [r7, #6]
 8001958:	0a1b      	lsrs	r3, r3, #8
 800195a:	b29b      	uxth	r3, r3
 800195c:	b2db      	uxtb	r3, r3
 800195e:	4619      	mov	r1, r3
 8001960:	4809      	ldr	r0, [pc, #36]	; (8001988 <Lcd_WriteData_16Bit+0x48>)
 8001962:	f000 fae9 	bl	8001f38 <SPI_WriteByte>
	 SPI_WriteByte(SPI1,Data);
 8001966:	88fb      	ldrh	r3, [r7, #6]
 8001968:	b2db      	uxtb	r3, r3
 800196a:	4619      	mov	r1, r3
 800196c:	4806      	ldr	r0, [pc, #24]	; (8001988 <Lcd_WriteData_16Bit+0x48>)
 800196e:	f000 fae3 	bl	8001f38 <SPI_WriteByte>
   LCD_CS_SET;
 8001972:	4b03      	ldr	r3, [pc, #12]	; (8001980 <Lcd_WriteData_16Bit+0x40>)
 8001974:	2201      	movs	r2, #1
 8001976:	601a      	str	r2, [r3, #0]
}
 8001978:	bf00      	nop
 800197a:	3708      	adds	r7, #8
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	424082bc 	.word	0x424082bc
 8001984:	424082b8 	.word	0x424082b8
 8001988:	40013000 	.word	0x40013000

0800198c <LCD_SetColorPoint>:
 * @function   :Set color of point
 * @parameters :color
 * @retvalue   :None
******************************************************************************/
void LCD_SetColorPoint(u16 color)
{
 800198c:	b480      	push	{r7}
 800198e:	b083      	sub	sp, #12
 8001990:	af00      	add	r7, sp, #0
 8001992:	4603      	mov	r3, r0
 8001994:	80fb      	strh	r3, [r7, #6]
	POINT_COLOR = color;
 8001996:	4a04      	ldr	r2, [pc, #16]	; (80019a8 <LCD_SetColorPoint+0x1c>)
 8001998:	88fb      	ldrh	r3, [r7, #6]
 800199a:	8013      	strh	r3, [r2, #0]
}
 800199c:	bf00      	nop
 800199e:	370c      	adds	r7, #12
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr
 80019a8:	2000009e 	.word	0x2000009e

080019ac <LCD_DrawPoint>:
 * @parameters :x:the x coordinate of the pixel
                y:the y coordinate of the pixel
 * @retvalue   :None
******************************************************************************/	
void LCD_DrawPoint(u16 x,u16 y)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	4603      	mov	r3, r0
 80019b4:	460a      	mov	r2, r1
 80019b6:	80fb      	strh	r3, [r7, #6]
 80019b8:	4613      	mov	r3, r2
 80019ba:	80bb      	strh	r3, [r7, #4]
	LCD_SetCursor(x,y);//���ù��λ�� 
 80019bc:	88ba      	ldrh	r2, [r7, #4]
 80019be:	88fb      	ldrh	r3, [r7, #6]
 80019c0:	4611      	mov	r1, r2
 80019c2:	4618      	mov	r0, r3
 80019c4:	f000 fa52 	bl	8001e6c <LCD_SetCursor>
	Lcd_WriteData_16Bit(POINT_COLOR); 
 80019c8:	4b04      	ldr	r3, [pc, #16]	; (80019dc <LCD_DrawPoint+0x30>)
 80019ca:	881b      	ldrh	r3, [r3, #0]
 80019cc:	4618      	mov	r0, r3
 80019ce:	f7ff ffb7 	bl	8001940 <Lcd_WriteData_16Bit>
}
 80019d2:	bf00      	nop
 80019d4:	3708      	adds	r7, #8
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	2000009e 	.word	0x2000009e

080019e0 <LCD_Clear>:
 * @function   :Full screen filled LCD screen
 * @parameters :color:Filled color
 * @retvalue   :None
******************************************************************************/	
void LCD_Clear(u16 Color)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b084      	sub	sp, #16
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	4603      	mov	r3, r0
 80019e8:	80fb      	strh	r3, [r7, #6]
  unsigned int i,m;  
	LCD_SetWindows(0,0,lcddev.width-1,lcddev.height-1);   
 80019ea:	4b1a      	ldr	r3, [pc, #104]	; (8001a54 <LCD_Clear+0x74>)
 80019ec:	881b      	ldrh	r3, [r3, #0]
 80019ee:	3b01      	subs	r3, #1
 80019f0:	b29a      	uxth	r2, r3
 80019f2:	4b18      	ldr	r3, [pc, #96]	; (8001a54 <LCD_Clear+0x74>)
 80019f4:	885b      	ldrh	r3, [r3, #2]
 80019f6:	3b01      	subs	r3, #1
 80019f8:	b29b      	uxth	r3, r3
 80019fa:	2100      	movs	r1, #0
 80019fc:	2000      	movs	r0, #0
 80019fe:	f000 f9e1 	bl	8001dc4 <LCD_SetWindows>
	LCD_CS_CLR;
 8001a02:	4b15      	ldr	r3, [pc, #84]	; (8001a58 <LCD_Clear+0x78>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	601a      	str	r2, [r3, #0]
	LCD_RS_SET;
 8001a08:	4b14      	ldr	r3, [pc, #80]	; (8001a5c <LCD_Clear+0x7c>)
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	601a      	str	r2, [r3, #0]
	for(i=0;i<lcddev.height;i++)
 8001a0e:	2300      	movs	r3, #0
 8001a10:	60fb      	str	r3, [r7, #12]
 8001a12:	e012      	b.n	8001a3a <LCD_Clear+0x5a>
	{
    for(m=0;m<lcddev.width;m++)
 8001a14:	2300      	movs	r3, #0
 8001a16:	60bb      	str	r3, [r7, #8]
 8001a18:	e006      	b.n	8001a28 <LCD_Clear+0x48>
    {	
			Lcd_WriteData_16Bit(Color);
 8001a1a:	88fb      	ldrh	r3, [r7, #6]
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f7ff ff8f 	bl	8001940 <Lcd_WriteData_16Bit>
    for(m=0;m<lcddev.width;m++)
 8001a22:	68bb      	ldr	r3, [r7, #8]
 8001a24:	3301      	adds	r3, #1
 8001a26:	60bb      	str	r3, [r7, #8]
 8001a28:	4b0a      	ldr	r3, [pc, #40]	; (8001a54 <LCD_Clear+0x74>)
 8001a2a:	881b      	ldrh	r3, [r3, #0]
 8001a2c:	461a      	mov	r2, r3
 8001a2e:	68bb      	ldr	r3, [r7, #8]
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d3f2      	bcc.n	8001a1a <LCD_Clear+0x3a>
	for(i=0;i<lcddev.height;i++)
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	3301      	adds	r3, #1
 8001a38:	60fb      	str	r3, [r7, #12]
 8001a3a:	4b06      	ldr	r3, [pc, #24]	; (8001a54 <LCD_Clear+0x74>)
 8001a3c:	885b      	ldrh	r3, [r3, #2]
 8001a3e:	461a      	mov	r2, r3
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d3e6      	bcc.n	8001a14 <LCD_Clear+0x34>
		}
	}
	 LCD_CS_SET;
 8001a46:	4b04      	ldr	r3, [pc, #16]	; (8001a58 <LCD_Clear+0x78>)
 8001a48:	2201      	movs	r2, #1
 8001a4a:	601a      	str	r2, [r3, #0]
} 
 8001a4c:	bf00      	nop
 8001a4e:	3710      	adds	r7, #16
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	20000090 	.word	0x20000090
 8001a58:	424082bc 	.word	0x424082bc
 8001a5c:	424082b8 	.word	0x424082b8

08001a60 <LCD_ClearCursor>:
								wXe:the ending x coordinate of the specified area
								wYe:the ending y coordinate of the specified area
 * @retvalue   :None
******************************************************************************/
void LCD_ClearCursor(u16 wXs,u16 wYs,u16 wXe,u16 wYe,u16 wColor)
{
 8001a60:	b590      	push	{r4, r7, lr}
 8001a62:	b087      	sub	sp, #28
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	4604      	mov	r4, r0
 8001a68:	4608      	mov	r0, r1
 8001a6a:	4611      	mov	r1, r2
 8001a6c:	461a      	mov	r2, r3
 8001a6e:	4623      	mov	r3, r4
 8001a70:	80fb      	strh	r3, [r7, #6]
 8001a72:	4603      	mov	r3, r0
 8001a74:	80bb      	strh	r3, [r7, #4]
 8001a76:	460b      	mov	r3, r1
 8001a78:	807b      	strh	r3, [r7, #2]
 8001a7a:	4613      	mov	r3, r2
 8001a7c:	803b      	strh	r3, [r7, #0]
	  unsigned int i,m;
		u16 width=wXe-wXs+1;
 8001a7e:	887a      	ldrh	r2, [r7, #2]
 8001a80:	88fb      	ldrh	r3, [r7, #6]
 8001a82:	1ad3      	subs	r3, r2, r3
 8001a84:	b29b      	uxth	r3, r3
 8001a86:	3301      	adds	r3, #1
 8001a88:	81fb      	strh	r3, [r7, #14]
		u16 height=wYe-wYs+1;
 8001a8a:	883a      	ldrh	r2, [r7, #0]
 8001a8c:	88bb      	ldrh	r3, [r7, #4]
 8001a8e:	1ad3      	subs	r3, r2, r3
 8001a90:	b29b      	uxth	r3, r3
 8001a92:	3301      	adds	r3, #1
 8001a94:	81bb      	strh	r3, [r7, #12]
		LCD_SetWindows(wXs,wYs,wXe,wYe);
 8001a96:	883b      	ldrh	r3, [r7, #0]
 8001a98:	887a      	ldrh	r2, [r7, #2]
 8001a9a:	88b9      	ldrh	r1, [r7, #4]
 8001a9c:	88f8      	ldrh	r0, [r7, #6]
 8001a9e:	f000 f991 	bl	8001dc4 <LCD_SetWindows>
		LCD_CS_CLR;
 8001aa2:	4b18      	ldr	r3, [pc, #96]	; (8001b04 <LCD_ClearCursor+0xa4>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	601a      	str	r2, [r3, #0]
		LCD_RS_SET;
 8001aa8:	4b17      	ldr	r3, [pc, #92]	; (8001b08 <LCD_ClearCursor+0xa8>)
 8001aaa:	2201      	movs	r2, #1
 8001aac:	601a      	str	r2, [r3, #0]
		for(i=0;i<height;i++)
 8001aae:	2300      	movs	r3, #0
 8001ab0:	617b      	str	r3, [r7, #20]
 8001ab2:	e010      	b.n	8001ad6 <LCD_ClearCursor+0x76>
		{
	    for(m=0;m<width;m++)
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	613b      	str	r3, [r7, #16]
 8001ab8:	e006      	b.n	8001ac8 <LCD_ClearCursor+0x68>
	    {
				Lcd_WriteData_16Bit(wColor);
 8001aba:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001abc:	4618      	mov	r0, r3
 8001abe:	f7ff ff3f 	bl	8001940 <Lcd_WriteData_16Bit>
	    for(m=0;m<width;m++)
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	3301      	adds	r3, #1
 8001ac6:	613b      	str	r3, [r7, #16]
 8001ac8:	89fb      	ldrh	r3, [r7, #14]
 8001aca:	693a      	ldr	r2, [r7, #16]
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d3f4      	bcc.n	8001aba <LCD_ClearCursor+0x5a>
		for(i=0;i<height;i++)
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	3301      	adds	r3, #1
 8001ad4:	617b      	str	r3, [r7, #20]
 8001ad6:	89bb      	ldrh	r3, [r7, #12]
 8001ad8:	697a      	ldr	r2, [r7, #20]
 8001ada:	429a      	cmp	r2, r3
 8001adc:	d3ea      	bcc.n	8001ab4 <LCD_ClearCursor+0x54>
			}
		}
		 LCD_CS_SET;
 8001ade:	4b09      	ldr	r3, [pc, #36]	; (8001b04 <LCD_ClearCursor+0xa4>)
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	601a      	str	r2, [r3, #0]
		 LCD_SetWindows(0,0,lcddev.width-1,lcddev.height-1);
 8001ae4:	4b09      	ldr	r3, [pc, #36]	; (8001b0c <LCD_ClearCursor+0xac>)
 8001ae6:	881b      	ldrh	r3, [r3, #0]
 8001ae8:	3b01      	subs	r3, #1
 8001aea:	b29a      	uxth	r2, r3
 8001aec:	4b07      	ldr	r3, [pc, #28]	; (8001b0c <LCD_ClearCursor+0xac>)
 8001aee:	885b      	ldrh	r3, [r3, #2]
 8001af0:	3b01      	subs	r3, #1
 8001af2:	b29b      	uxth	r3, r3
 8001af4:	2100      	movs	r1, #0
 8001af6:	2000      	movs	r0, #0
 8001af8:	f000 f964 	bl	8001dc4 <LCD_SetWindows>
}
 8001afc:	bf00      	nop
 8001afe:	371c      	adds	r7, #28
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd90      	pop	{r4, r7, pc}
 8001b04:	424082bc 	.word	0x424082bc
 8001b08:	424082b8 	.word	0x424082b8
 8001b0c:	20000090 	.word	0x20000090

08001b10 <LCD_GPIOInit>:
 * @function   :Initialization LCD screen GPIO
 * @parameters :None
 * @retvalue   :None
******************************************************************************/	
void LCD_GPIOInit(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef  GPIO_InitStructure;
	      
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB ,ENABLE);
 8001b16:	2101      	movs	r1, #1
 8001b18:	2002      	movs	r0, #2
 8001b1a:	f7fe fe79 	bl	8000810 <RCC_AHB1PeriphClockCmd>
	
	GPIO_InitStructure.GPIO_Pin =  RST_GPIO| LED_GPIO|RS_GPIO| CS_GPIO;
 8001b1e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001b22:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8001b24:	2301      	movs	r3, #1
 8001b26:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 8001b28:	2303      	movs	r3, #3
 8001b2a:	717b      	strb	r3, [r7, #5]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8001b30:	2301      	movs	r3, #1
 8001b32:	71fb      	strb	r3, [r7, #7]
	GPIO_Init(LCD_PORT, &GPIO_InitStructure);
 8001b34:	463b      	mov	r3, r7
 8001b36:	4619      	mov	r1, r3
 8001b38:	4803      	ldr	r0, [pc, #12]	; (8001b48 <LCD_GPIOInit+0x38>)
 8001b3a:	f7fe fcc9 	bl	80004d0 <GPIO_Init>
}
 8001b3e:	bf00      	nop
 8001b40:	3708      	adds	r7, #8
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	40020400 	.word	0x40020400

08001b4c <LCD_RESET>:
 * @function   :Reset LCD screen
 * @parameters :None
 * @retvalue   :None
******************************************************************************/	
void LCD_RESET(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	af00      	add	r7, sp, #0
	LCD_RST_CLR;
 8001b50:	4b06      	ldr	r3, [pc, #24]	; (8001b6c <LCD_RESET+0x20>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	601a      	str	r2, [r3, #0]
	delay_ms(100);
 8001b56:	2064      	movs	r0, #100	; 0x64
 8001b58:	f003 fd09 	bl	800556e <delay_ms>
	LCD_RST_SET;
 8001b5c:	4b03      	ldr	r3, [pc, #12]	; (8001b6c <LCD_RESET+0x20>)
 8001b5e:	2201      	movs	r2, #1
 8001b60:	601a      	str	r2, [r3, #0]
	delay_ms(50);
 8001b62:	2032      	movs	r0, #50	; 0x32
 8001b64:	f003 fd03 	bl	800556e <delay_ms>
}
 8001b68:	bf00      	nop
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	424082b0 	.word	0x424082b0

08001b70 <LCD_Init>:
 * @function   :Initialization LCD screen
 * @parameters :None
 * @retvalue   :None
******************************************************************************/	 	 
void LCD_Init(void)
{  
 8001b70:	b580      	push	{r7, lr}
 8001b72:	af00      	add	r7, sp, #0
	SPI1_Init(); //Ӳ��SPI��ʼ��
 8001b74:	f000 fa04 	bl	8001f80 <SPI1_Init>
//	SPI_SetSpeed(SPI1,SPI_BaudRatePrescaler_2);
	LCD_GPIOInit();//LCD GPIO��ʼ��										 
 8001b78:	f7ff ffca 	bl	8001b10 <LCD_GPIOInit>
 	LCD_RESET(); //LCD ��λ
 8001b7c:	f7ff ffe6 	bl	8001b4c <LCD_RESET>
//*************3.2inch ILI9341��ʼ��**********//	
	LCD_WR_REG(0xCF);  
 8001b80:	20cf      	movs	r0, #207	; 0xcf
 8001b82:	f7ff fe7f 	bl	8001884 <LCD_WR_REG>
	LCD_WR_DATA(0x00); 
 8001b86:	2000      	movs	r0, #0
 8001b88:	f7ff fe9a 	bl	80018c0 <LCD_WR_DATA>
	LCD_WR_DATA(0xD9); //C1 
 8001b8c:	20d9      	movs	r0, #217	; 0xd9
 8001b8e:	f7ff fe97 	bl	80018c0 <LCD_WR_DATA>
	LCD_WR_DATA(0X30); 
 8001b92:	2030      	movs	r0, #48	; 0x30
 8001b94:	f7ff fe94 	bl	80018c0 <LCD_WR_DATA>
	LCD_WR_REG(0xED);  
 8001b98:	20ed      	movs	r0, #237	; 0xed
 8001b9a:	f7ff fe73 	bl	8001884 <LCD_WR_REG>
	LCD_WR_DATA(0x64); 
 8001b9e:	2064      	movs	r0, #100	; 0x64
 8001ba0:	f7ff fe8e 	bl	80018c0 <LCD_WR_DATA>
	LCD_WR_DATA(0x03); 
 8001ba4:	2003      	movs	r0, #3
 8001ba6:	f7ff fe8b 	bl	80018c0 <LCD_WR_DATA>
	LCD_WR_DATA(0X12); 
 8001baa:	2012      	movs	r0, #18
 8001bac:	f7ff fe88 	bl	80018c0 <LCD_WR_DATA>
	LCD_WR_DATA(0X81); 
 8001bb0:	2081      	movs	r0, #129	; 0x81
 8001bb2:	f7ff fe85 	bl	80018c0 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);  
 8001bb6:	20e8      	movs	r0, #232	; 0xe8
 8001bb8:	f7ff fe64 	bl	8001884 <LCD_WR_REG>
	LCD_WR_DATA(0x85); 
 8001bbc:	2085      	movs	r0, #133	; 0x85
 8001bbe:	f7ff fe7f 	bl	80018c0 <LCD_WR_DATA>
	LCD_WR_DATA(0x10); 
 8001bc2:	2010      	movs	r0, #16
 8001bc4:	f7ff fe7c 	bl	80018c0 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A); 
 8001bc8:	207a      	movs	r0, #122	; 0x7a
 8001bca:	f7ff fe79 	bl	80018c0 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);  
 8001bce:	20cb      	movs	r0, #203	; 0xcb
 8001bd0:	f7ff fe58 	bl	8001884 <LCD_WR_REG>
	LCD_WR_DATA(0x39); 
 8001bd4:	2039      	movs	r0, #57	; 0x39
 8001bd6:	f7ff fe73 	bl	80018c0 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C); 
 8001bda:	202c      	movs	r0, #44	; 0x2c
 8001bdc:	f7ff fe70 	bl	80018c0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00); 
 8001be0:	2000      	movs	r0, #0
 8001be2:	f7ff fe6d 	bl	80018c0 <LCD_WR_DATA>
	LCD_WR_DATA(0x34); 
 8001be6:	2034      	movs	r0, #52	; 0x34
 8001be8:	f7ff fe6a 	bl	80018c0 <LCD_WR_DATA>
	LCD_WR_DATA(0x02); 
 8001bec:	2002      	movs	r0, #2
 8001bee:	f7ff fe67 	bl	80018c0 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);  
 8001bf2:	20f7      	movs	r0, #247	; 0xf7
 8001bf4:	f7ff fe46 	bl	8001884 <LCD_WR_REG>
	LCD_WR_DATA(0x20); 
 8001bf8:	2020      	movs	r0, #32
 8001bfa:	f7ff fe61 	bl	80018c0 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);  
 8001bfe:	20ea      	movs	r0, #234	; 0xea
 8001c00:	f7ff fe40 	bl	8001884 <LCD_WR_REG>
	LCD_WR_DATA(0x00); 
 8001c04:	2000      	movs	r0, #0
 8001c06:	f7ff fe5b 	bl	80018c0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00); 
 8001c0a:	2000      	movs	r0, #0
 8001c0c:	f7ff fe58 	bl	80018c0 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control 
 8001c10:	20c0      	movs	r0, #192	; 0xc0
 8001c12:	f7ff fe37 	bl	8001884 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0] 
 8001c16:	201b      	movs	r0, #27
 8001c18:	f7ff fe52 	bl	80018c0 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control 
 8001c1c:	20c1      	movs	r0, #193	; 0xc1
 8001c1e:	f7ff fe31 	bl	8001884 <LCD_WR_REG>
	LCD_WR_DATA(0x12);   //SAP[2:0];BT[3:0] //0x01
 8001c22:	2012      	movs	r0, #18
 8001c24:	f7ff fe4c 	bl	80018c0 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control 
 8001c28:	20c5      	movs	r0, #197	; 0xc5
 8001c2a:	f7ff fe2b 	bl	8001884 <LCD_WR_REG>
	LCD_WR_DATA(0x26); 	 //3F
 8001c2e:	2026      	movs	r0, #38	; 0x26
 8001c30:	f7ff fe46 	bl	80018c0 <LCD_WR_DATA>
	LCD_WR_DATA(0x26); 	 //3C
 8001c34:	2026      	movs	r0, #38	; 0x26
 8001c36:	f7ff fe43 	bl	80018c0 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2 
 8001c3a:	20c7      	movs	r0, #199	; 0xc7
 8001c3c:	f7ff fe22 	bl	8001884 <LCD_WR_REG>
	LCD_WR_DATA(0XB0); 
 8001c40:	20b0      	movs	r0, #176	; 0xb0
 8001c42:	f7ff fe3d 	bl	80018c0 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control 
 8001c46:	2036      	movs	r0, #54	; 0x36
 8001c48:	f7ff fe1c 	bl	8001884 <LCD_WR_REG>
	LCD_WR_DATA(0x08); 
 8001c4c:	2008      	movs	r0, #8
 8001c4e:	f7ff fe37 	bl	80018c0 <LCD_WR_DATA>
	LCD_WR_REG(0x3A);   
 8001c52:	203a      	movs	r0, #58	; 0x3a
 8001c54:	f7ff fe16 	bl	8001884 <LCD_WR_REG>
	LCD_WR_DATA(0x55); 
 8001c58:	2055      	movs	r0, #85	; 0x55
 8001c5a:	f7ff fe31 	bl	80018c0 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);   
 8001c5e:	20b1      	movs	r0, #177	; 0xb1
 8001c60:	f7ff fe10 	bl	8001884 <LCD_WR_REG>
	LCD_WR_DATA(0x00);   
 8001c64:	2000      	movs	r0, #0
 8001c66:	f7ff fe2b 	bl	80018c0 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A); 
 8001c6a:	201a      	movs	r0, #26
 8001c6c:	f7ff fe28 	bl	80018c0 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control 
 8001c70:	20b6      	movs	r0, #182	; 0xb6
 8001c72:	f7ff fe07 	bl	8001884 <LCD_WR_REG>
	LCD_WR_DATA(0x0A); 
 8001c76:	200a      	movs	r0, #10
 8001c78:	f7ff fe22 	bl	80018c0 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2); 
 8001c7c:	20a2      	movs	r0, #162	; 0xa2
 8001c7e:	f7ff fe1f 	bl	80018c0 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable 
 8001c82:	20f2      	movs	r0, #242	; 0xf2
 8001c84:	f7ff fdfe 	bl	8001884 <LCD_WR_REG>
	LCD_WR_DATA(0x00); 
 8001c88:	2000      	movs	r0, #0
 8001c8a:	f7ff fe19 	bl	80018c0 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected 
 8001c8e:	2026      	movs	r0, #38	; 0x26
 8001c90:	f7ff fdf8 	bl	8001884 <LCD_WR_REG>
	LCD_WR_DATA(0x01); 
 8001c94:	2001      	movs	r0, #1
 8001c96:	f7ff fe13 	bl	80018c0 <LCD_WR_DATA>
	LCD_WR_REG(0xE0); //Set Gamma
 8001c9a:	20e0      	movs	r0, #224	; 0xe0
 8001c9c:	f7ff fdf2 	bl	8001884 <LCD_WR_REG>
	LCD_WR_DATA(0x1F);
 8001ca0:	201f      	movs	r0, #31
 8001ca2:	f7ff fe0d 	bl	80018c0 <LCD_WR_DATA>
	LCD_WR_DATA(0x24);
 8001ca6:	2024      	movs	r0, #36	; 0x24
 8001ca8:	f7ff fe0a 	bl	80018c0 <LCD_WR_DATA>
	LCD_WR_DATA(0x24);
 8001cac:	2024      	movs	r0, #36	; 0x24
 8001cae:	f7ff fe07 	bl	80018c0 <LCD_WR_DATA>
	LCD_WR_DATA(0x0D);
 8001cb2:	200d      	movs	r0, #13
 8001cb4:	f7ff fe04 	bl	80018c0 <LCD_WR_DATA>
	LCD_WR_DATA(0x12);
 8001cb8:	2012      	movs	r0, #18
 8001cba:	f7ff fe01 	bl	80018c0 <LCD_WR_DATA>
	LCD_WR_DATA(0x09);
 8001cbe:	2009      	movs	r0, #9
 8001cc0:	f7ff fdfe 	bl	80018c0 <LCD_WR_DATA>
	LCD_WR_DATA(0x52);
 8001cc4:	2052      	movs	r0, #82	; 0x52
 8001cc6:	f7ff fdfb 	bl	80018c0 <LCD_WR_DATA>
	LCD_WR_DATA(0xB7);
 8001cca:	20b7      	movs	r0, #183	; 0xb7
 8001ccc:	f7ff fdf8 	bl	80018c0 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8001cd0:	203f      	movs	r0, #63	; 0x3f
 8001cd2:	f7ff fdf5 	bl	80018c0 <LCD_WR_DATA>
	LCD_WR_DATA(0x0C);
 8001cd6:	200c      	movs	r0, #12
 8001cd8:	f7ff fdf2 	bl	80018c0 <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 8001cdc:	2015      	movs	r0, #21
 8001cde:	f7ff fdef 	bl	80018c0 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 8001ce2:	2006      	movs	r0, #6
 8001ce4:	f7ff fdec 	bl	80018c0 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 8001ce8:	200e      	movs	r0, #14
 8001cea:	f7ff fde9 	bl	80018c0 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8001cee:	2008      	movs	r0, #8
 8001cf0:	f7ff fde6 	bl	80018c0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001cf4:	2000      	movs	r0, #0
 8001cf6:	f7ff fde3 	bl	80018c0 <LCD_WR_DATA>
	LCD_WR_REG(0XE1); //Set Gamma
 8001cfa:	20e1      	movs	r0, #225	; 0xe1
 8001cfc:	f7ff fdc2 	bl	8001884 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001d00:	2000      	movs	r0, #0
 8001d02:	f7ff fddd 	bl	80018c0 <LCD_WR_DATA>
	LCD_WR_DATA(0x1B);
 8001d06:	201b      	movs	r0, #27
 8001d08:	f7ff fdda 	bl	80018c0 <LCD_WR_DATA>
	LCD_WR_DATA(0x1B);
 8001d0c:	201b      	movs	r0, #27
 8001d0e:	f7ff fdd7 	bl	80018c0 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 8001d12:	2002      	movs	r0, #2
 8001d14:	f7ff fdd4 	bl	80018c0 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 8001d18:	200e      	movs	r0, #14
 8001d1a:	f7ff fdd1 	bl	80018c0 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 8001d1e:	2006      	movs	r0, #6
 8001d20:	f7ff fdce 	bl	80018c0 <LCD_WR_DATA>
	LCD_WR_DATA(0x2E);
 8001d24:	202e      	movs	r0, #46	; 0x2e
 8001d26:	f7ff fdcb 	bl	80018c0 <LCD_WR_DATA>
	LCD_WR_DATA(0x48);
 8001d2a:	2048      	movs	r0, #72	; 0x48
 8001d2c:	f7ff fdc8 	bl	80018c0 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8001d30:	203f      	movs	r0, #63	; 0x3f
 8001d32:	f7ff fdc5 	bl	80018c0 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8001d36:	2003      	movs	r0, #3
 8001d38:	f7ff fdc2 	bl	80018c0 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 8001d3c:	200a      	movs	r0, #10
 8001d3e:	f7ff fdbf 	bl	80018c0 <LCD_WR_DATA>
	LCD_WR_DATA(0x09);
 8001d42:	2009      	movs	r0, #9
 8001d44:	f7ff fdbc 	bl	80018c0 <LCD_WR_DATA>
	LCD_WR_DATA(0x31);
 8001d48:	2031      	movs	r0, #49	; 0x31
 8001d4a:	f7ff fdb9 	bl	80018c0 <LCD_WR_DATA>
	LCD_WR_DATA(0x37);
 8001d4e:	2037      	movs	r0, #55	; 0x37
 8001d50:	f7ff fdb6 	bl	80018c0 <LCD_WR_DATA>
	LCD_WR_DATA(0x1F);
 8001d54:	201f      	movs	r0, #31
 8001d56:	f7ff fdb3 	bl	80018c0 <LCD_WR_DATA>

	LCD_WR_REG(0x2B); 
 8001d5a:	202b      	movs	r0, #43	; 0x2b
 8001d5c:	f7ff fd92 	bl	8001884 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001d60:	2000      	movs	r0, #0
 8001d62:	f7ff fdad 	bl	80018c0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001d66:	2000      	movs	r0, #0
 8001d68:	f7ff fdaa 	bl	80018c0 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 8001d6c:	2001      	movs	r0, #1
 8001d6e:	f7ff fda7 	bl	80018c0 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 8001d72:	203f      	movs	r0, #63	; 0x3f
 8001d74:	f7ff fda4 	bl	80018c0 <LCD_WR_DATA>
	LCD_WR_REG(0x2A); 
 8001d78:	202a      	movs	r0, #42	; 0x2a
 8001d7a:	f7ff fd83 	bl	8001884 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001d7e:	2000      	movs	r0, #0
 8001d80:	f7ff fd9e 	bl	80018c0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001d84:	2000      	movs	r0, #0
 8001d86:	f7ff fd9b 	bl	80018c0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001d8a:	2000      	movs	r0, #0
 8001d8c:	f7ff fd98 	bl	80018c0 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);	 
 8001d90:	20ef      	movs	r0, #239	; 0xef
 8001d92:	f7ff fd95 	bl	80018c0 <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 8001d96:	2011      	movs	r0, #17
 8001d98:	f7ff fd74 	bl	8001884 <LCD_WR_REG>
	delay_ms(120);
 8001d9c:	2078      	movs	r0, #120	; 0x78
 8001d9e:	f003 fbe6 	bl	800556e <delay_ms>
	LCD_WR_REG(0x29); //display on		
 8001da2:	2029      	movs	r0, #41	; 0x29
 8001da4:	f7ff fd6e 	bl	8001884 <LCD_WR_REG>

  LCD_direction(USE_HORIZONTAL);
 8001da8:	2000      	movs	r0, #0
 8001daa:	f000 f871 	bl	8001e90 <LCD_direction>
	LCD_LED=1;
 8001dae:	4b04      	ldr	r3, [pc, #16]	; (8001dc0 <LCD_Init+0x250>)
 8001db0:	2201      	movs	r2, #1
 8001db2:	601a      	str	r2, [r3, #0]
	LCD_Clear(WHITE);
 8001db4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001db8:	f7ff fe12 	bl	80019e0 <LCD_Clear>
}
 8001dbc:	bf00      	nop
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	424082b4 	.word	0x424082b4

08001dc4 <LCD_SetWindows>:
								xEnd:the endning x coordinate of the LCD display window
								yEnd:the endning y coordinate of the LCD display window
 * @retvalue   :None
******************************************************************************/ 
void LCD_SetWindows(u16 xStar, u16 yStar,u16 xEnd,u16 yEnd)
{	
 8001dc4:	b590      	push	{r4, r7, lr}
 8001dc6:	b083      	sub	sp, #12
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	4604      	mov	r4, r0
 8001dcc:	4608      	mov	r0, r1
 8001dce:	4611      	mov	r1, r2
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	4623      	mov	r3, r4
 8001dd4:	80fb      	strh	r3, [r7, #6]
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	80bb      	strh	r3, [r7, #4]
 8001dda:	460b      	mov	r3, r1
 8001ddc:	807b      	strh	r3, [r7, #2]
 8001dde:	4613      	mov	r3, r2
 8001de0:	803b      	strh	r3, [r7, #0]
	LCD_WR_REG(lcddev.setxcmd);	
 8001de2:	4b21      	ldr	r3, [pc, #132]	; (8001e68 <LCD_SetWindows+0xa4>)
 8001de4:	895b      	ldrh	r3, [r3, #10]
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	4618      	mov	r0, r3
 8001dea:	f7ff fd4b 	bl	8001884 <LCD_WR_REG>
	LCD_WR_DATA(xStar>>8);
 8001dee:	88fb      	ldrh	r3, [r7, #6]
 8001df0:	0a1b      	lsrs	r3, r3, #8
 8001df2:	b29b      	uxth	r3, r3
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	4618      	mov	r0, r3
 8001df8:	f7ff fd62 	bl	80018c0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00FF&xStar);		
 8001dfc:	88fb      	ldrh	r3, [r7, #6]
 8001dfe:	b2db      	uxtb	r3, r3
 8001e00:	4618      	mov	r0, r3
 8001e02:	f7ff fd5d 	bl	80018c0 <LCD_WR_DATA>
	LCD_WR_DATA(xEnd>>8);
 8001e06:	887b      	ldrh	r3, [r7, #2]
 8001e08:	0a1b      	lsrs	r3, r3, #8
 8001e0a:	b29b      	uxth	r3, r3
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f7ff fd56 	bl	80018c0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00FF&xEnd);
 8001e14:	887b      	ldrh	r3, [r7, #2]
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f7ff fd51 	bl	80018c0 <LCD_WR_DATA>

	LCD_WR_REG(lcddev.setycmd);	
 8001e1e:	4b12      	ldr	r3, [pc, #72]	; (8001e68 <LCD_SetWindows+0xa4>)
 8001e20:	899b      	ldrh	r3, [r3, #12]
 8001e22:	b2db      	uxtb	r3, r3
 8001e24:	4618      	mov	r0, r3
 8001e26:	f7ff fd2d 	bl	8001884 <LCD_WR_REG>
	LCD_WR_DATA(yStar>>8);
 8001e2a:	88bb      	ldrh	r3, [r7, #4]
 8001e2c:	0a1b      	lsrs	r3, r3, #8
 8001e2e:	b29b      	uxth	r3, r3
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	4618      	mov	r0, r3
 8001e34:	f7ff fd44 	bl	80018c0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00FF&yStar);		
 8001e38:	88bb      	ldrh	r3, [r7, #4]
 8001e3a:	b2db      	uxtb	r3, r3
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f7ff fd3f 	bl	80018c0 <LCD_WR_DATA>
	LCD_WR_DATA(yEnd>>8);
 8001e42:	883b      	ldrh	r3, [r7, #0]
 8001e44:	0a1b      	lsrs	r3, r3, #8
 8001e46:	b29b      	uxth	r3, r3
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f7ff fd38 	bl	80018c0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00FF&yEnd);
 8001e50:	883b      	ldrh	r3, [r7, #0]
 8001e52:	b2db      	uxtb	r3, r3
 8001e54:	4618      	mov	r0, r3
 8001e56:	f7ff fd33 	bl	80018c0 <LCD_WR_DATA>

	LCD_WriteRAM_Prepare();	//��ʼд��GRAM			
 8001e5a:	f7ff fd65 	bl	8001928 <LCD_WriteRAM_Prepare>
}   
 8001e5e:	bf00      	nop
 8001e60:	370c      	adds	r7, #12
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd90      	pop	{r4, r7, pc}
 8001e66:	bf00      	nop
 8001e68:	20000090 	.word	0x20000090

08001e6c <LCD_SetCursor>:
 * @parameters :Xpos:the  x coordinate of the pixel
								Ypos:the  y coordinate of the pixel
 * @retvalue   :None
******************************************************************************/ 
void LCD_SetCursor(u16 Xpos, u16 Ypos)
{	  	    			
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	4603      	mov	r3, r0
 8001e74:	460a      	mov	r2, r1
 8001e76:	80fb      	strh	r3, [r7, #6]
 8001e78:	4613      	mov	r3, r2
 8001e7a:	80bb      	strh	r3, [r7, #4]
	LCD_SetWindows(Xpos,Ypos,Xpos,Ypos);	
 8001e7c:	88bb      	ldrh	r3, [r7, #4]
 8001e7e:	88fa      	ldrh	r2, [r7, #6]
 8001e80:	88b9      	ldrh	r1, [r7, #4]
 8001e82:	88f8      	ldrh	r0, [r7, #6]
 8001e84:	f7ff ff9e 	bl	8001dc4 <LCD_SetWindows>
} 
 8001e88:	bf00      	nop
 8001e8a:	3708      	adds	r7, #8
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}

08001e90 <LCD_direction>:
													2-180 degree
													3-270 degree
 * @retvalue   :None
******************************************************************************/ 
void LCD_direction(u8 direction)
{ 
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	4603      	mov	r3, r0
 8001e98:	71fb      	strb	r3, [r7, #7]
			lcddev.setxcmd=0x2A;
 8001e9a:	4b26      	ldr	r3, [pc, #152]	; (8001f34 <LCD_direction+0xa4>)
 8001e9c:	222a      	movs	r2, #42	; 0x2a
 8001e9e:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0x2B;
 8001ea0:	4b24      	ldr	r3, [pc, #144]	; (8001f34 <LCD_direction+0xa4>)
 8001ea2:	222b      	movs	r2, #43	; 0x2b
 8001ea4:	819a      	strh	r2, [r3, #12]
			lcddev.wramcmd=0x2C;
 8001ea6:	4b23      	ldr	r3, [pc, #140]	; (8001f34 <LCD_direction+0xa4>)
 8001ea8:	222c      	movs	r2, #44	; 0x2c
 8001eaa:	811a      	strh	r2, [r3, #8]
	switch(direction){		  
 8001eac:	79fb      	ldrb	r3, [r7, #7]
 8001eae:	2b03      	cmp	r3, #3
 8001eb0:	d83a      	bhi.n	8001f28 <LCD_direction+0x98>
 8001eb2:	a201      	add	r2, pc, #4	; (adr r2, 8001eb8 <LCD_direction+0x28>)
 8001eb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001eb8:	08001ec9 	.word	0x08001ec9
 8001ebc:	08001ee1 	.word	0x08001ee1
 8001ec0:	08001ef9 	.word	0x08001ef9
 8001ec4:	08001f11 	.word	0x08001f11
		case 0:						 	 		
			lcddev.width=LCD_W;
 8001ec8:	4b1a      	ldr	r3, [pc, #104]	; (8001f34 <LCD_direction+0xa4>)
 8001eca:	22f0      	movs	r2, #240	; 0xf0
 8001ecc:	801a      	strh	r2, [r3, #0]
			lcddev.height=LCD_H;		
 8001ece:	4b19      	ldr	r3, [pc, #100]	; (8001f34 <LCD_direction+0xa4>)
 8001ed0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001ed4:	805a      	strh	r2, [r3, #2]
			LCD_WriteReg(0x36,(1<<3)|(0<<6)|(0<<7));//BGR==1,MY==0,MX==0,MV==0
 8001ed6:	2108      	movs	r1, #8
 8001ed8:	2036      	movs	r0, #54	; 0x36
 8001eda:	f7ff fd0f 	bl	80018fc <LCD_WriteReg>
		break;
 8001ede:	e024      	b.n	8001f2a <LCD_direction+0x9a>
		case 1:
			lcddev.width=LCD_H;
 8001ee0:	4b14      	ldr	r3, [pc, #80]	; (8001f34 <LCD_direction+0xa4>)
 8001ee2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001ee6:	801a      	strh	r2, [r3, #0]
			lcddev.height=LCD_W;
 8001ee8:	4b12      	ldr	r3, [pc, #72]	; (8001f34 <LCD_direction+0xa4>)
 8001eea:	22f0      	movs	r2, #240	; 0xf0
 8001eec:	805a      	strh	r2, [r3, #2]
			LCD_WriteReg(0x36,(1<<3)|(0<<7)|(1<<6)|(1<<5));//BGR==1,MY==1,MX==0,MV==1
 8001eee:	2168      	movs	r1, #104	; 0x68
 8001ef0:	2036      	movs	r0, #54	; 0x36
 8001ef2:	f7ff fd03 	bl	80018fc <LCD_WriteReg>
		break;
 8001ef6:	e018      	b.n	8001f2a <LCD_direction+0x9a>
		case 2:						 	 		
			lcddev.width=LCD_W;
 8001ef8:	4b0e      	ldr	r3, [pc, #56]	; (8001f34 <LCD_direction+0xa4>)
 8001efa:	22f0      	movs	r2, #240	; 0xf0
 8001efc:	801a      	strh	r2, [r3, #0]
			lcddev.height=LCD_H;	
 8001efe:	4b0d      	ldr	r3, [pc, #52]	; (8001f34 <LCD_direction+0xa4>)
 8001f00:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001f04:	805a      	strh	r2, [r3, #2]
			LCD_WriteReg(0x36,(1<<3)|(1<<6)|(1<<7));//BGR==1,MY==0,MX==0,MV==0
 8001f06:	21c8      	movs	r1, #200	; 0xc8
 8001f08:	2036      	movs	r0, #54	; 0x36
 8001f0a:	f7ff fcf7 	bl	80018fc <LCD_WriteReg>
		break;
 8001f0e:	e00c      	b.n	8001f2a <LCD_direction+0x9a>
		case 3:
			lcddev.width=LCD_H;
 8001f10:	4b08      	ldr	r3, [pc, #32]	; (8001f34 <LCD_direction+0xa4>)
 8001f12:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001f16:	801a      	strh	r2, [r3, #0]
			lcddev.height=LCD_W;
 8001f18:	4b06      	ldr	r3, [pc, #24]	; (8001f34 <LCD_direction+0xa4>)
 8001f1a:	22f0      	movs	r2, #240	; 0xf0
 8001f1c:	805a      	strh	r2, [r3, #2]
			LCD_WriteReg(0x36,(1<<3)|(1<<7)|(1<<5));//BGR==1,MY==1,MX==0,MV==1
 8001f1e:	21a8      	movs	r1, #168	; 0xa8
 8001f20:	2036      	movs	r0, #54	; 0x36
 8001f22:	f7ff fceb 	bl	80018fc <LCD_WriteReg>
		break;	
 8001f26:	e000      	b.n	8001f2a <LCD_direction+0x9a>
		default:break;
 8001f28:	bf00      	nop
	}		
}	 
 8001f2a:	bf00      	nop
 8001f2c:	3708      	adds	r7, #8
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	20000090 	.word	0x20000090

08001f38 <SPI_WriteByte>:
 * @parameters :SPIx: SPI type,x for 1,2,3
                Byte:Data to be written
 * @retvalue   :Data received by the bus
******************************************************************************/
u8 SPI_WriteByte(SPI_TypeDef* SPIx,u8 Byte)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b083      	sub	sp, #12
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
 8001f40:	460b      	mov	r3, r1
 8001f42:	70fb      	strb	r3, [r7, #3]
	while((SPIx->SR&SPI_I2S_FLAG_TXE)==RESET);
 8001f44:	bf00      	nop
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	891b      	ldrh	r3, [r3, #8]
 8001f4a:	b29b      	uxth	r3, r3
 8001f4c:	f003 0302 	and.w	r3, r3, #2
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d0f8      	beq.n	8001f46 <SPI_WriteByte+0xe>
	SPIx->DR=Byte;
 8001f54:	78fb      	ldrb	r3, [r7, #3]
 8001f56:	b29a      	uxth	r2, r3
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	819a      	strh	r2, [r3, #12]
	while((SPIx->SR&SPI_I2S_FLAG_RXNE)==RESET);
 8001f5c:	bf00      	nop
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	891b      	ldrh	r3, [r3, #8]
 8001f62:	b29b      	uxth	r3, r3
 8001f64:	f003 0301 	and.w	r3, r3, #1
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d0f8      	beq.n	8001f5e <SPI_WriteByte+0x26>
	return SPIx->DR;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	899b      	ldrh	r3, [r3, #12]
 8001f70:	b29b      	uxth	r3, r3
 8001f72:	b2db      	uxtb	r3, r3
} 
 8001f74:	4618      	mov	r0, r3
 8001f76:	370c      	adds	r7, #12
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr

08001f80 <SPI1_Init>:
 * @function   :Initialize the STM32 hardware SPI1
 * @parameters :None
 * @retvalue   :None
******************************************************************************/
void SPI1_Init(void)	
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b088      	sub	sp, #32
 8001f84:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef  GPIO_InitStructure;
	SPI_InitTypeDef  SPI_InitStructure;

	RCC_AHB1PeriphClockCmd(LCD_GPIO_RCC, ENABLE);
 8001f86:	2101      	movs	r1, #1
 8001f88:	2002      	movs	r0, #2
 8001f8a:	f7fe fc41 	bl	8000810 <RCC_AHB1PeriphClockCmd>
	RCC_APB2PeriphClockCmd(LCD_SPI_RCC, ENABLE);
 8001f8e:	2101      	movs	r1, #1
 8001f90:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001f94:	f7fe fc5c 	bl	8000850 <RCC_APB2PeriphClockCmd>
	
	GPIO_InitStructure.GPIO_Pin = LCD_SPI_GPIO_SCK|LCD_SPI_GPIO_MISO|LCD_SPI_GPIO_MOSI;
 8001f98:	2338      	movs	r3, #56	; 0x38
 8001f9a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8001f9c:	2302      	movs	r3, #2
 8001f9e:	773b      	strb	r3, [r7, #28]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	77bb      	strb	r3, [r7, #30]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 8001fa4:	2303      	movs	r3, #3
 8001fa6:	777b      	strb	r3, [r7, #29]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	77fb      	strb	r3, [r7, #31]
	GPIO_Init(LCD_SPI_PORT, &GPIO_InitStructure);
 8001fac:	f107 0318 	add.w	r3, r7, #24
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	481d      	ldr	r0, [pc, #116]	; (8002028 <SPI1_Init+0xa8>)
 8001fb4:	f7fe fa8c 	bl	80004d0 <GPIO_Init>
	
	GPIO_PinAFConfig(LCD_SPI_PORT,LCD_SPI_PINSOURCE_SCK,LCD_SPI_AF);
 8001fb8:	2205      	movs	r2, #5
 8001fba:	2103      	movs	r1, #3
 8001fbc:	481a      	ldr	r0, [pc, #104]	; (8002028 <SPI1_Init+0xa8>)
 8001fbe:	f7fe fb30 	bl	8000622 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(LCD_SPI_PORT,LCD_SPI_PINSOURCE_MISO,LCD_SPI_AF);
 8001fc2:	2205      	movs	r2, #5
 8001fc4:	2104      	movs	r1, #4
 8001fc6:	4818      	ldr	r0, [pc, #96]	; (8002028 <SPI1_Init+0xa8>)
 8001fc8:	f7fe fb2b 	bl	8000622 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(LCD_SPI_PORT,LCD_SPI_PINSOURCE_MOSI,LCD_SPI_AF);
 8001fcc:	2205      	movs	r2, #5
 8001fce:	2105      	movs	r1, #5
 8001fd0:	4815      	ldr	r0, [pc, #84]	; (8002028 <SPI1_Init+0xa8>)
 8001fd2:	f7fe fb26 	bl	8000622 <GPIO_PinAFConfig>

	RCC_APB2PeriphResetCmd(LCD_SPI_RCC,ENABLE);
 8001fd6:	2101      	movs	r1, #1
 8001fd8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001fdc:	f7fe fc58 	bl	8000890 <RCC_APB2PeriphResetCmd>
	RCC_APB2PeriphResetCmd(LCD_SPI_RCC,DISABLE);
 8001fe0:	2100      	movs	r1, #0
 8001fe2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001fe6:	f7fe fc53 	bl	8000890 <RCC_APB2PeriphResetCmd>

	SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 8001fea:	2300      	movs	r3, #0
 8001fec:	80bb      	strh	r3, [r7, #4]
	SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
 8001fee:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001ff2:	80fb      	strh	r3, [r7, #6]
	SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	813b      	strh	r3, [r7, #8]
	SPI_InitStructure.SPI_CPOL = SPI_CPOL_Low;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	817b      	strh	r3, [r7, #10]
	SPI_InitStructure.SPI_CPHA = SPI_CPHA_1Edge;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	81bb      	strh	r3, [r7, #12]
	SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;
 8002000:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002004:	81fb      	strh	r3, [r7, #14]
	//SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
	SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
 8002006:	2300      	movs	r3, #0
 8002008:	827b      	strh	r3, [r7, #18]
	SPI_InitStructure.SPI_CRCPolynomial = 7;
 800200a:	2307      	movs	r3, #7
 800200c:	82bb      	strh	r3, [r7, #20]
	SPI_Init(LCD_SPI, &SPI_InitStructure);
 800200e:	1d3b      	adds	r3, r7, #4
 8002010:	4619      	mov	r1, r3
 8002012:	4806      	ldr	r0, [pc, #24]	; (800202c <SPI1_Init+0xac>)
 8002014:	f7fe fc5c 	bl	80008d0 <SPI_Init>
 
	SPI_Cmd(LCD_SPI, ENABLE);
 8002018:	2101      	movs	r1, #1
 800201a:	4804      	ldr	r0, [pc, #16]	; (800202c <SPI1_Init+0xac>)
 800201c:	f7fe fc9c 	bl	8000958 <SPI_Cmd>
	
	
}
 8002020:	bf00      	nop
 8002022:	3720      	adds	r7, #32
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}
 8002028:	40020400 	.word	0x40020400
 800202c:	40013000 	.word	0x40013000

08002030 <bufInit>:
bufInit(
    void *pBuffer,
    buffqueue_p pQueue,
	uint8_t sizeofElement,
	uint16_t numberOfElement
) {
 8002030:	b580      	push	{r7, lr}
 8002032:	b084      	sub	sp, #16
 8002034:	af00      	add	r7, sp, #0
 8002036:	60f8      	str	r0, [r7, #12]
 8002038:	60b9      	str	r1, [r7, #8]
 800203a:	4611      	mov	r1, r2
 800203c:	461a      	mov	r2, r3
 800203e:	460b      	mov	r3, r1
 8002040:	71fb      	strb	r3, [r7, #7]
 8002042:	4613      	mov	r3, r2
 8002044:	80bb      	strh	r3, [r7, #4]
    pQueue->wSize = numberOfElement;
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	88ba      	ldrh	r2, [r7, #4]
 800204a:	801a      	strh	r2, [r3, #0]
    pQueue->byItemSize = sizeofElement;
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	79fa      	ldrb	r2, [r7, #7]
 8002050:	711a      	strb	r2, [r3, #4]
    pQueue->pData = (uint8_t *)pBuffer;
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	68fa      	ldr	r2, [r7, #12]
 8002056:	60da      	str	r2, [r3, #12]
    bufFlush(pQueue);
 8002058:	68b8      	ldr	r0, [r7, #8]
 800205a:	f000 f836 	bl	80020ca <bufFlush>
}
 800205e:	bf00      	nop
 8002060:	3710      	adds	r7, #16
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}

08002066 <bufNumItems>:
 * @return The number of items in the ring buffer
 */
uint16_t
bufNumItems(
	buffqueue_p pQueue
) {
 8002066:	b480      	push	{r7}
 8002068:	b083      	sub	sp, #12
 800206a:	af00      	add	r7, sp, #0
 800206c:	6078      	str	r0, [r7, #4]
    return pQueue->wCountEle;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	885b      	ldrh	r3, [r3, #2]
}
 8002072:	4618      	mov	r0, r3
 8002074:	370c      	adds	r7, #12
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr

0800207e <bufIsFull>:
 * @return 1 if full; 0 otherwise
 */
uint8_t
bufIsFull(
    buffqueue_p pQueue
) {
 800207e:	b480      	push	{r7}
 8002080:	b083      	sub	sp, #12
 8002082:	af00      	add	r7, sp, #0
 8002084:	6078      	str	r0, [r7, #4]
    return (pQueue->wCountEle >= pQueue->wSize);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	885a      	ldrh	r2, [r3, #2]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	881b      	ldrh	r3, [r3, #0]
 800208e:	429a      	cmp	r2, r3
 8002090:	bf2c      	ite	cs
 8002092:	2301      	movcs	r3, #1
 8002094:	2300      	movcc	r3, #0
 8002096:	b2db      	uxtb	r3, r3
}
 8002098:	4618      	mov	r0, r3
 800209a:	370c      	adds	r7, #12
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr

080020a4 <bufIsEmpty>:
 * @return 1 if empty; 0 otherwise
 */
uint8_t
bufIsEmpty(
    buffqueue_p pQueue
) {
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
    return (pQueue->wHeadIndex == pQueue->wTailIndex);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	88da      	ldrh	r2, [r3, #6]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	891b      	ldrh	r3, [r3, #8]
 80020b4:	429a      	cmp	r2, r3
 80020b6:	bf0c      	ite	eq
 80020b8:	2301      	moveq	r3, #1
 80020ba:	2300      	movne	r3, #0
 80020bc:	b2db      	uxtb	r3, r3
}
 80020be:	4618      	mov	r0, r3
 80020c0:	370c      	adds	r7, #12
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr

080020ca <bufFlush>:
 * @retval None
 */
void
bufFlush(
    buffqueue_p pQueue
) {
 80020ca:	b580      	push	{r7, lr}
 80020cc:	b082      	sub	sp, #8
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	6078      	str	r0, [r7, #4]
    pQueue->wHeadIndex = 0;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2200      	movs	r2, #0
 80020d6:	80da      	strh	r2, [r3, #6]
    pQueue->wTailIndex = 0;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2200      	movs	r2, #0
 80020dc:	811a      	strh	r2, [r3, #8]
    pQueue->wCountEle = 0;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2200      	movs	r2, #0
 80020e2:	805a      	strh	r2, [r3, #2]
    
    memsetl(pQueue->pData, 0, pQueue->wSize);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	68d8      	ldr	r0, [r3, #12]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	881b      	ldrh	r3, [r3, #0]
 80020ec:	461a      	mov	r2, r3
 80020ee:	2100      	movs	r1, #0
 80020f0:	f000 f899 	bl	8002226 <memsetl>
}
 80020f4:	bf00      	nop
 80020f6:	3708      	adds	r7, #8
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}

080020fc <bufEnDat>:
 */
uint8_t
bufEnDat(
    buffqueue_p pQueue,
	uint8_t *pReceiverData
) {
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b084      	sub	sp, #16
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
 8002104:	6039      	str	r1, [r7, #0]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002106:	b672      	cpsid	i
}
 8002108:	bf00      	nop
	__disable_irq();
    
    /* Place data in buffer */
    for (uint8_t i = 0; i < pQueue->byItemSize; i++) {
 800210a:	2300      	movs	r3, #0
 800210c:	73fb      	strb	r3, [r7, #15]
 800210e:	e021      	b.n	8002154 <bufEnDat+0x58>
        pQueue->pData[pQueue->wHeadIndex] = pReceiverData[i];
 8002110:	7bfb      	ldrb	r3, [r7, #15]
 8002112:	683a      	ldr	r2, [r7, #0]
 8002114:	441a      	add	r2, r3
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	68db      	ldr	r3, [r3, #12]
 800211a:	6879      	ldr	r1, [r7, #4]
 800211c:	88c9      	ldrh	r1, [r1, #6]
 800211e:	440b      	add	r3, r1
 8002120:	7812      	ldrb	r2, [r2, #0]
 8002122:	701a      	strb	r2, [r3, #0]
        pQueue->wHeadIndex = ((pQueue->wHeadIndex + 1)  & (pQueue->wSize - 1));
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	88db      	ldrh	r3, [r3, #6]
 8002128:	3301      	adds	r3, #1
 800212a:	b29b      	uxth	r3, r3
 800212c:	b21a      	sxth	r2, r3
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	881b      	ldrh	r3, [r3, #0]
 8002132:	3b01      	subs	r3, #1
 8002134:	b29b      	uxth	r3, r3
 8002136:	b21b      	sxth	r3, r3
 8002138:	4013      	ands	r3, r2
 800213a:	b21b      	sxth	r3, r3
 800213c:	b29a      	uxth	r2, r3
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	80da      	strh	r2, [r3, #6]
        pQueue->wCountEle++;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	885b      	ldrh	r3, [r3, #2]
 8002146:	3301      	adds	r3, #1
 8002148:	b29a      	uxth	r2, r3
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	805a      	strh	r2, [r3, #2]
    for (uint8_t i = 0; i < pQueue->byItemSize; i++) {
 800214e:	7bfb      	ldrb	r3, [r7, #15]
 8002150:	3301      	adds	r3, #1
 8002152:	73fb      	strb	r3, [r7, #15]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	791b      	ldrb	r3, [r3, #4]
 8002158:	7bfa      	ldrb	r2, [r7, #15]
 800215a:	429a      	cmp	r2, r3
 800215c:	d3d8      	bcc.n	8002110 <bufEnDat+0x14>
    }
    
    if (bufIsFull(pQueue)) {
 800215e:	6878      	ldr	r0, [r7, #4]
 8002160:	f7ff ff8d 	bl	800207e <bufIsFull>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d011      	beq.n	800218e <bufEnDat+0x92>
        /* Is going to overwrite the oldest byte */
        /* Increase tail index */
        pQueue->wTailIndex = (pQueue->wTailIndex + pQueue->byItemSize) & (pQueue->wSize - 1);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	891a      	ldrh	r2, [r3, #8]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	791b      	ldrb	r3, [r3, #4]
 8002172:	b29b      	uxth	r3, r3
 8002174:	4413      	add	r3, r2
 8002176:	b29b      	uxth	r3, r3
 8002178:	b21a      	sxth	r2, r3
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	881b      	ldrh	r3, [r3, #0]
 800217e:	3b01      	subs	r3, #1
 8002180:	b29b      	uxth	r3, r3
 8002182:	b21b      	sxth	r3, r3
 8002184:	4013      	ands	r3, r2
 8002186:	b21b      	sxth	r3, r3
 8002188:	b29a      	uxth	r2, r3
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	811a      	strh	r2, [r3, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 800218e:	b662      	cpsie	i
}
 8002190:	bf00      	nop
    }
    
    __enable_irq();
    return ERR_OK;
 8002192:	2300      	movs	r3, #0
}
 8002194:	4618      	mov	r0, r3
 8002196:	3710      	adds	r7, #16
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}

0800219c <bufDeDat>:
 */
uint8_t
bufDeDat(
    buffqueue_p pQueue,
	uint8_t *pBuffer
) {
 800219c:	b580      	push	{r7, lr}
 800219e:	b084      	sub	sp, #16
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
 80021a4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80021a6:	b672      	cpsid	i
}
 80021a8:	bf00      	nop
	__disable_irq();
    
    if (bufIsEmpty(pQueue)) {
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	f7ff ff7a 	bl	80020a4 <bufIsEmpty>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d006      	beq.n	80021c4 <bufDeDat+0x28>
        /* No items */
        pQueue->wCountEle = 0;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2200      	movs	r2, #0
 80021ba:	805a      	strh	r2, [r3, #2]
  __ASM volatile ("cpsie i" : : : "memory");
 80021bc:	b662      	cpsie	i
}
 80021be:	bf00      	nop
        __enable_irq();
        return ERR_BUF_EMPTY;
 80021c0:	2302      	movs	r3, #2
 80021c2:	e02c      	b.n	800221e <bufDeDat+0x82>
    }
    
    for (uint8_t i = 0; i < pQueue->byItemSize; i++) {
 80021c4:	2300      	movs	r3, #0
 80021c6:	73fb      	strb	r3, [r7, #15]
 80021c8:	e021      	b.n	800220e <bufDeDat+0x72>
        pBuffer[i] = pQueue->pData[pQueue->wTailIndex];
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	68db      	ldr	r3, [r3, #12]
 80021ce:	687a      	ldr	r2, [r7, #4]
 80021d0:	8912      	ldrh	r2, [r2, #8]
 80021d2:	441a      	add	r2, r3
 80021d4:	7bfb      	ldrb	r3, [r7, #15]
 80021d6:	6839      	ldr	r1, [r7, #0]
 80021d8:	440b      	add	r3, r1
 80021da:	7812      	ldrb	r2, [r2, #0]
 80021dc:	701a      	strb	r2, [r3, #0]
        pQueue->wTailIndex = ((pQueue->wTailIndex + 1) & (pQueue->wSize - 1));
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	891b      	ldrh	r3, [r3, #8]
 80021e2:	3301      	adds	r3, #1
 80021e4:	b29b      	uxth	r3, r3
 80021e6:	b21a      	sxth	r2, r3
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	881b      	ldrh	r3, [r3, #0]
 80021ec:	3b01      	subs	r3, #1
 80021ee:	b29b      	uxth	r3, r3
 80021f0:	b21b      	sxth	r3, r3
 80021f2:	4013      	ands	r3, r2
 80021f4:	b21b      	sxth	r3, r3
 80021f6:	b29a      	uxth	r2, r3
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	811a      	strh	r2, [r3, #8]
        pQueue->wCountEle--;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	885b      	ldrh	r3, [r3, #2]
 8002200:	3b01      	subs	r3, #1
 8002202:	b29a      	uxth	r2, r3
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	805a      	strh	r2, [r3, #2]
    for (uint8_t i = 0; i < pQueue->byItemSize; i++) {
 8002208:	7bfb      	ldrb	r3, [r7, #15]
 800220a:	3301      	adds	r3, #1
 800220c:	73fb      	strb	r3, [r7, #15]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	791b      	ldrb	r3, [r3, #4]
 8002212:	7bfa      	ldrb	r2, [r7, #15]
 8002214:	429a      	cmp	r2, r3
 8002216:	d3d8      	bcc.n	80021ca <bufDeDat+0x2e>
  __ASM volatile ("cpsie i" : : : "memory");
 8002218:	b662      	cpsie	i
}
 800221a:	bf00      	nop
    }
    
    __enable_irq();
    return ERR_OK;
 800221c:	2300      	movs	r3, #0
}
 800221e:	4618      	mov	r0, r3
 8002220:	3710      	adds	r7, #16
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}

08002226 <memsetl>:
void
memsetl(
	uint8_t *dst,
	uint8_t value,
	uint16_t size
) {
 8002226:	b480      	push	{r7}
 8002228:	b083      	sub	sp, #12
 800222a:	af00      	add	r7, sp, #0
 800222c:	6078      	str	r0, [r7, #4]
 800222e:	460b      	mov	r3, r1
 8002230:	70fb      	strb	r3, [r7, #3]
 8002232:	4613      	mov	r3, r2
 8002234:	803b      	strh	r3, [r7, #0]
    while (size--) {
 8002236:	e004      	b.n	8002242 <memsetl+0x1c>
        *dst++ = value;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	1c5a      	adds	r2, r3, #1
 800223c:	607a      	str	r2, [r7, #4]
 800223e:	78fa      	ldrb	r2, [r7, #3]
 8002240:	701a      	strb	r2, [r3, #0]
    while (size--) {
 8002242:	883b      	ldrh	r3, [r7, #0]
 8002244:	1e5a      	subs	r2, r3, #1
 8002246:	803a      	strh	r2, [r7, #0]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d1f5      	bne.n	8002238 <memsetl+0x12>
    }    
}
 800224c:	bf00      	nop
 800224e:	bf00      	nop
 8002250:	370c      	adds	r7, #12
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr
	...

0800225c <buttonInit>:
/******************************************************************************/
/*                            EXPORTED FUNCTIONS                              */
/******************************************************************************/

void buttonInit(void)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b082      	sub	sp, #8
 8002260:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef gpioInitStruct;

	//---------------------------------------------------------------------------B3
	//1. Bat xung clock
	RCC_AHB1PeriphClockCmd(BUTTON_1_2_GPIO_RCC, ENABLE);
 8002262:	2101      	movs	r1, #1
 8002264:	2002      	movs	r0, #2
 8002266:	f7fe fad3 	bl	8000810 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(BUTTON_3_4_GPIO_RCC, ENABLE);
 800226a:	2101      	movs	r1, #1
 800226c:	2004      	movs	r0, #4
 800226e:	f7fe facf 	bl	8000810 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(BUTTON_5_GPIO_RCC, ENABLE);
 8002272:	2101      	movs	r1, #1
 8002274:	2001      	movs	r0, #1
 8002276:	f7fe facb 	bl	8000810 <RCC_AHB1PeriphClockCmd>
	//2. Config GPIO
	gpioInitStruct.GPIO_Mode = GPIO_Mode_IN;
 800227a:	2300      	movs	r3, #0
 800227c:	713b      	strb	r3, [r7, #4]
	gpioInitStruct.GPIO_Speed = GPIO_Speed_50MHz;
 800227e:	2302      	movs	r3, #2
 8002280:	717b      	strb	r3, [r7, #5]
	gpioInitStruct.GPIO_PuPd = GPIO_PuPd_UP;
 8002282:	2301      	movs	r3, #1
 8002284:	71fb      	strb	r3, [r7, #7]

	gpioInitStruct.GPIO_Pin = BUTTON_1_PIN|BUTTON_2_PIN;
 8002286:	2306      	movs	r3, #6
 8002288:	603b      	str	r3, [r7, #0]
	GPIO_Init(BUTTON_1_2_PORT, &gpioInitStruct);
 800228a:	463b      	mov	r3, r7
 800228c:	4619      	mov	r1, r3
 800228e:	480a      	ldr	r0, [pc, #40]	; (80022b8 <buttonInit+0x5c>)
 8002290:	f7fe f91e 	bl	80004d0 <GPIO_Init>

	gpioInitStruct.GPIO_Pin = BUTTON_3_PIN|BUTTON_4_PIN;
 8002294:	2309      	movs	r3, #9
 8002296:	603b      	str	r3, [r7, #0]
	GPIO_Init(BUTTON_3_4_PORT, &gpioInitStruct);
 8002298:	463b      	mov	r3, r7
 800229a:	4619      	mov	r1, r3
 800229c:	4807      	ldr	r0, [pc, #28]	; (80022bc <buttonInit+0x60>)
 800229e:	f7fe f917 	bl	80004d0 <GPIO_Init>

	gpioInitStruct.GPIO_Pin = BUTTON_5_PIN;
 80022a2:	2320      	movs	r3, #32
 80022a4:	603b      	str	r3, [r7, #0]
	GPIO_Init(BUTTON_5_PORT, &gpioInitStruct);
 80022a6:	463b      	mov	r3, r7
 80022a8:	4619      	mov	r1, r3
 80022aa:	4805      	ldr	r0, [pc, #20]	; (80022c0 <buttonInit+0x64>)
 80022ac:	f7fe f910 	bl	80004d0 <GPIO_Init>
}
 80022b0:	bf00      	nop
 80022b2:	3708      	adds	r7, #8
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	40020400 	.word	0x40020400
 80022bc:	40020800 	.word	0x40020800
 80022c0:	40020000 	.word	0x40020000

080022c4 <dwCalculatorTime>:
static uint32_t dwCalculatorTime(uint32_t dwTimeInit,uint32_t dwTimeCurrent)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
 80022cc:	6039      	str	r1, [r7, #0]
	if(dwTimeCurrent >= dwTimeInit)
 80022ce:	683a      	ldr	r2, [r7, #0]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	429a      	cmp	r2, r3
 80022d4:	d303      	bcc.n	80022de <dwCalculatorTime+0x1a>
	{
		return (dwTimeCurrent - dwTimeInit);
 80022d6:	683a      	ldr	r2, [r7, #0]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	1ad3      	subs	r3, r2, r3
 80022dc:	e003      	b.n	80022e6 <dwCalculatorTime+0x22>
	}else
	{
		return (0xFFFFFFFF + dwTimeCurrent - dwTimeInit);
 80022de:	683a      	ldr	r2, [r7, #0]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	1ad3      	subs	r3, r2, r3
 80022e4:	3b01      	subs	r3, #1
	}
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	370c      	adds	r7, #12
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr
	...

080022f4 <processEventButton>:
ValueKey_e processEventButton(void)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b082      	sub	sp, #8
 80022f8:	af00      	add	r7, sp, #0
	ValueKey_e valueKeyTemp = NOKEY;
 80022fa:	2300      	movs	r3, #0
 80022fc:	71fb      	strb	r3, [r7, #7]

	GetEventButton();
 80022fe:	f000 f8d5 	bl	80024ac <GetEventButton>

	switch(button1.buttonEven)
 8002302:	4b65      	ldr	r3, [pc, #404]	; (8002498 <processEventButton+0x1a4>)
 8002304:	781b      	ldrb	r3, [r3, #0]
 8002306:	3b01      	subs	r3, #1
 8002308:	2b03      	cmp	r3, #3
 800230a:	d823      	bhi.n	8002354 <processEventButton+0x60>
 800230c:	a201      	add	r2, pc, #4	; (adr r2, 8002314 <processEventButton+0x20>)
 800230e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002312:	bf00      	nop
 8002314:	08002331 	.word	0x08002331
 8002318:	0800233d 	.word	0x0800233d
 800231c:	08002349 	.word	0x08002349
 8002320:	08002325 	.word	0x08002325
	{
	case EVENT_OF_BUTTON_HOLD_500MS:
		valueKeyTemp = RETURN;
 8002324:	2306      	movs	r3, #6
 8002326:	71fb      	strb	r3, [r7, #7]
		button1.buttonEven = EVENT_OF_BUTTON_NOCLICK;
 8002328:	4b5b      	ldr	r3, [pc, #364]	; (8002498 <processEventButton+0x1a4>)
 800232a:	2200      	movs	r2, #0
 800232c:	701a      	strb	r2, [r3, #0]
		break;
 800232e:	e015      	b.n	800235c <processEventButton+0x68>
	case EVENT_OF_BUTTON_PRESS_1_TIMES:
		valueKeyTemp = SELECT;
 8002330:	2301      	movs	r3, #1
 8002332:	71fb      	strb	r3, [r7, #7]
		button1.buttonEven = EVENT_OF_BUTTON_NOCLICK;
 8002334:	4b58      	ldr	r3, [pc, #352]	; (8002498 <processEventButton+0x1a4>)
 8002336:	2200      	movs	r2, #0
 8002338:	701a      	strb	r2, [r3, #0]
		break;
 800233a:	e00f      	b.n	800235c <processEventButton+0x68>
	case EVENT_OF_BUTTON_PRESS_2_TIMES:
		valueKeyTemp = UP;
 800233c:	2302      	movs	r3, #2
 800233e:	71fb      	strb	r3, [r7, #7]
		button1.buttonEven = EVENT_OF_BUTTON_NOCLICK;
 8002340:	4b55      	ldr	r3, [pc, #340]	; (8002498 <processEventButton+0x1a4>)
 8002342:	2200      	movs	r2, #0
 8002344:	701a      	strb	r2, [r3, #0]
		break;
 8002346:	e009      	b.n	800235c <processEventButton+0x68>
	case EVENT_OF_BUTTON_PRESS_3_TIMES:
		valueKeyTemp = DOWN;
 8002348:	2303      	movs	r3, #3
 800234a:	71fb      	strb	r3, [r7, #7]
		button1.buttonEven = EVENT_OF_BUTTON_NOCLICK;
 800234c:	4b52      	ldr	r3, [pc, #328]	; (8002498 <processEventButton+0x1a4>)
 800234e:	2200      	movs	r2, #0
 8002350:	701a      	strb	r2, [r3, #0]
		break;
 8002352:	e003      	b.n	800235c <processEventButton+0x68>
	default:
		button1.buttonEven = EVENT_OF_BUTTON_NOCLICK;
 8002354:	4b50      	ldr	r3, [pc, #320]	; (8002498 <processEventButton+0x1a4>)
 8002356:	2200      	movs	r2, #0
 8002358:	701a      	strb	r2, [r3, #0]
		break;
 800235a:	bf00      	nop
	}
	switch(button2.buttonEven)
 800235c:	4b4f      	ldr	r3, [pc, #316]	; (800249c <processEventButton+0x1a8>)
 800235e:	781b      	ldrb	r3, [r3, #0]
 8002360:	3b01      	subs	r3, #1
 8002362:	2b03      	cmp	r3, #3
 8002364:	d81c      	bhi.n	80023a0 <processEventButton+0xac>
 8002366:	a201      	add	r2, pc, #4	; (adr r2, 800236c <processEventButton+0x78>)
 8002368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800236c:	08002385 	.word	0x08002385
 8002370:	08002391 	.word	0x08002391
 8002374:	08002399 	.word	0x08002399
 8002378:	0800237d 	.word	0x0800237d
	{
	case EVENT_OF_BUTTON_HOLD_500MS:

		button2.buttonEven = EVENT_OF_BUTTON_NOCLICK;
 800237c:	4b47      	ldr	r3, [pc, #284]	; (800249c <processEventButton+0x1a8>)
 800237e:	2200      	movs	r2, #0
 8002380:	701a      	strb	r2, [r3, #0]
		break;
 8002382:	e011      	b.n	80023a8 <processEventButton+0xb4>
	case EVENT_OF_BUTTON_PRESS_1_TIMES:
		valueKeyTemp = UP;
 8002384:	2302      	movs	r3, #2
 8002386:	71fb      	strb	r3, [r7, #7]
		button2.buttonEven = EVENT_OF_BUTTON_NOCLICK;
 8002388:	4b44      	ldr	r3, [pc, #272]	; (800249c <processEventButton+0x1a8>)
 800238a:	2200      	movs	r2, #0
 800238c:	701a      	strb	r2, [r3, #0]
		break;
 800238e:	e00b      	b.n	80023a8 <processEventButton+0xb4>
	case EVENT_OF_BUTTON_PRESS_2_TIMES:

		button2.buttonEven = EVENT_OF_BUTTON_NOCLICK;
 8002390:	4b42      	ldr	r3, [pc, #264]	; (800249c <processEventButton+0x1a8>)
 8002392:	2200      	movs	r2, #0
 8002394:	701a      	strb	r2, [r3, #0]
		break;
 8002396:	e007      	b.n	80023a8 <processEventButton+0xb4>
	case EVENT_OF_BUTTON_PRESS_3_TIMES:

		button2.buttonEven = EVENT_OF_BUTTON_NOCLICK;
 8002398:	4b40      	ldr	r3, [pc, #256]	; (800249c <processEventButton+0x1a8>)
 800239a:	2200      	movs	r2, #0
 800239c:	701a      	strb	r2, [r3, #0]
		break;
 800239e:	e003      	b.n	80023a8 <processEventButton+0xb4>
	default:
		button2.buttonEven = EVENT_OF_BUTTON_NOCLICK;
 80023a0:	4b3e      	ldr	r3, [pc, #248]	; (800249c <processEventButton+0x1a8>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	701a      	strb	r2, [r3, #0]
		break;
 80023a6:	bf00      	nop
	}
	switch(button3.buttonEven)
 80023a8:	4b3d      	ldr	r3, [pc, #244]	; (80024a0 <processEventButton+0x1ac>)
 80023aa:	781b      	ldrb	r3, [r3, #0]
 80023ac:	3b01      	subs	r3, #1
 80023ae:	2b03      	cmp	r3, #3
 80023b0:	d81c      	bhi.n	80023ec <processEventButton+0xf8>
 80023b2:	a201      	add	r2, pc, #4	; (adr r2, 80023b8 <processEventButton+0xc4>)
 80023b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023b8:	080023d1 	.word	0x080023d1
 80023bc:	080023dd 	.word	0x080023dd
 80023c0:	080023e5 	.word	0x080023e5
 80023c4:	080023c9 	.word	0x080023c9
	{
	case EVENT_OF_BUTTON_HOLD_500MS:
		button3.buttonEven = EVENT_OF_BUTTON_NOCLICK;
 80023c8:	4b35      	ldr	r3, [pc, #212]	; (80024a0 <processEventButton+0x1ac>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	701a      	strb	r2, [r3, #0]
		break;
 80023ce:	e011      	b.n	80023f4 <processEventButton+0x100>
	case EVENT_OF_BUTTON_PRESS_1_TIMES:
		valueKeyTemp = DOWN;
 80023d0:	2303      	movs	r3, #3
 80023d2:	71fb      	strb	r3, [r7, #7]
		button3.buttonEven = EVENT_OF_BUTTON_NOCLICK;
 80023d4:	4b32      	ldr	r3, [pc, #200]	; (80024a0 <processEventButton+0x1ac>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	701a      	strb	r2, [r3, #0]
		break;
 80023da:	e00b      	b.n	80023f4 <processEventButton+0x100>
	case EVENT_OF_BUTTON_PRESS_2_TIMES:
		button3.buttonEven = EVENT_OF_BUTTON_NOCLICK;
 80023dc:	4b30      	ldr	r3, [pc, #192]	; (80024a0 <processEventButton+0x1ac>)
 80023de:	2200      	movs	r2, #0
 80023e0:	701a      	strb	r2, [r3, #0]
		break;
 80023e2:	e007      	b.n	80023f4 <processEventButton+0x100>
	case EVENT_OF_BUTTON_PRESS_3_TIMES:
		button3.buttonEven = EVENT_OF_BUTTON_NOCLICK;
 80023e4:	4b2e      	ldr	r3, [pc, #184]	; (80024a0 <processEventButton+0x1ac>)
 80023e6:	2200      	movs	r2, #0
 80023e8:	701a      	strb	r2, [r3, #0]
		break;
 80023ea:	e003      	b.n	80023f4 <processEventButton+0x100>
	default:
		button3.buttonEven = EVENT_OF_BUTTON_NOCLICK;
 80023ec:	4b2c      	ldr	r3, [pc, #176]	; (80024a0 <processEventButton+0x1ac>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	701a      	strb	r2, [r3, #0]
		break;
 80023f2:	bf00      	nop
	}


	switch(button4.buttonEven)
 80023f4:	4b2b      	ldr	r3, [pc, #172]	; (80024a4 <processEventButton+0x1b0>)
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	3b01      	subs	r3, #1
 80023fa:	2b03      	cmp	r3, #3
 80023fc:	d81c      	bhi.n	8002438 <processEventButton+0x144>
 80023fe:	a201      	add	r2, pc, #4	; (adr r2, 8002404 <processEventButton+0x110>)
 8002400:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002404:	0800241d 	.word	0x0800241d
 8002408:	08002429 	.word	0x08002429
 800240c:	08002431 	.word	0x08002431
 8002410:	08002415 	.word	0x08002415
	{
	case EVENT_OF_BUTTON_HOLD_500MS:
		button4.buttonEven = EVENT_OF_BUTTON_NOCLICK;
 8002414:	4b23      	ldr	r3, [pc, #140]	; (80024a4 <processEventButton+0x1b0>)
 8002416:	2200      	movs	r2, #0
 8002418:	701a      	strb	r2, [r3, #0]
		break;
 800241a:	e011      	b.n	8002440 <processEventButton+0x14c>
	case EVENT_OF_BUTTON_PRESS_1_TIMES:
		valueKeyTemp = LEFT;
 800241c:	2304      	movs	r3, #4
 800241e:	71fb      	strb	r3, [r7, #7]
		button4.buttonEven = EVENT_OF_BUTTON_NOCLICK;
 8002420:	4b20      	ldr	r3, [pc, #128]	; (80024a4 <processEventButton+0x1b0>)
 8002422:	2200      	movs	r2, #0
 8002424:	701a      	strb	r2, [r3, #0]
		break;
 8002426:	e00b      	b.n	8002440 <processEventButton+0x14c>
	case EVENT_OF_BUTTON_PRESS_2_TIMES:
		button4.buttonEven = EVENT_OF_BUTTON_NOCLICK;
 8002428:	4b1e      	ldr	r3, [pc, #120]	; (80024a4 <processEventButton+0x1b0>)
 800242a:	2200      	movs	r2, #0
 800242c:	701a      	strb	r2, [r3, #0]
		break;
 800242e:	e007      	b.n	8002440 <processEventButton+0x14c>
	case EVENT_OF_BUTTON_PRESS_3_TIMES:
		button4.buttonEven = EVENT_OF_BUTTON_NOCLICK;
 8002430:	4b1c      	ldr	r3, [pc, #112]	; (80024a4 <processEventButton+0x1b0>)
 8002432:	2200      	movs	r2, #0
 8002434:	701a      	strb	r2, [r3, #0]
		break;
 8002436:	e003      	b.n	8002440 <processEventButton+0x14c>
	default:
		button4.buttonEven = EVENT_OF_BUTTON_NOCLICK;
 8002438:	4b1a      	ldr	r3, [pc, #104]	; (80024a4 <processEventButton+0x1b0>)
 800243a:	2200      	movs	r2, #0
 800243c:	701a      	strb	r2, [r3, #0]
		break;
 800243e:	bf00      	nop
	}
	switch(button5.buttonEven)
 8002440:	4b19      	ldr	r3, [pc, #100]	; (80024a8 <processEventButton+0x1b4>)
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	3b01      	subs	r3, #1
 8002446:	2b03      	cmp	r3, #3
 8002448:	d81c      	bhi.n	8002484 <processEventButton+0x190>
 800244a:	a201      	add	r2, pc, #4	; (adr r2, 8002450 <processEventButton+0x15c>)
 800244c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002450:	08002469 	.word	0x08002469
 8002454:	08002475 	.word	0x08002475
 8002458:	0800247d 	.word	0x0800247d
 800245c:	08002461 	.word	0x08002461
	{
	case EVENT_OF_BUTTON_HOLD_500MS:
		button5.buttonEven = EVENT_OF_BUTTON_NOCLICK;
 8002460:	4b11      	ldr	r3, [pc, #68]	; (80024a8 <processEventButton+0x1b4>)
 8002462:	2200      	movs	r2, #0
 8002464:	701a      	strb	r2, [r3, #0]
		break;
 8002466:	e011      	b.n	800248c <processEventButton+0x198>
	case EVENT_OF_BUTTON_PRESS_1_TIMES:
		valueKeyTemp = RIGHT;
 8002468:	2305      	movs	r3, #5
 800246a:	71fb      	strb	r3, [r7, #7]
		button5.buttonEven = EVENT_OF_BUTTON_NOCLICK;
 800246c:	4b0e      	ldr	r3, [pc, #56]	; (80024a8 <processEventButton+0x1b4>)
 800246e:	2200      	movs	r2, #0
 8002470:	701a      	strb	r2, [r3, #0]
		break;
 8002472:	e00b      	b.n	800248c <processEventButton+0x198>
	case EVENT_OF_BUTTON_PRESS_2_TIMES:
		button5.buttonEven = EVENT_OF_BUTTON_NOCLICK;
 8002474:	4b0c      	ldr	r3, [pc, #48]	; (80024a8 <processEventButton+0x1b4>)
 8002476:	2200      	movs	r2, #0
 8002478:	701a      	strb	r2, [r3, #0]
		break;
 800247a:	e007      	b.n	800248c <processEventButton+0x198>
	case EVENT_OF_BUTTON_PRESS_3_TIMES:
		button5.buttonEven = EVENT_OF_BUTTON_NOCLICK;
 800247c:	4b0a      	ldr	r3, [pc, #40]	; (80024a8 <processEventButton+0x1b4>)
 800247e:	2200      	movs	r2, #0
 8002480:	701a      	strb	r2, [r3, #0]
		break;
 8002482:	e003      	b.n	800248c <processEventButton+0x198>
	default:
		button5.buttonEven = EVENT_OF_BUTTON_NOCLICK;
 8002484:	4b08      	ldr	r3, [pc, #32]	; (80024a8 <processEventButton+0x1b4>)
 8002486:	2200      	movs	r2, #0
 8002488:	701a      	strb	r2, [r3, #0]
		break;
 800248a:	bf00      	nop
	}
	return valueKeyTemp;
 800248c:	79fb      	ldrb	r3, [r7, #7]
}
 800248e:	4618      	mov	r0, r3
 8002490:	3708      	adds	r7, #8
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	200000a0 	.word	0x200000a0
 800249c:	200000b0 	.word	0x200000b0
 80024a0:	200000c0 	.word	0x200000c0
 80024a4:	200000d0 	.word	0x200000d0
 80024a8:	200000e0 	.word	0x200000e0

080024ac <GetEventButton>:

static void GetEventButton(void)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b082      	sub	sp, #8
 80024b0:	af00      	add	r7, sp, #0

	u32 dwDeltaTime = 0,dwTimeNow;
 80024b2:	2300      	movs	r3, #0
 80024b4:	607b      	str	r3, [r7, #4]
	dwTimeNow = GetMilSecTick();
 80024b6:	f002 fec3 	bl	8005240 <GetMilSecTick>
 80024ba:	6038      	str	r0, [r7, #0]
	if(button1.buttonEven ==EVENT_OF_BUTTON_NOCLICK)
 80024bc:	4b4f      	ldr	r3, [pc, #316]	; (80025fc <GetEventButton+0x150>)
 80024be:	781b      	ldrb	r3, [r3, #0]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	f040 80d3 	bne.w	800266c <GetEventButton+0x1c0>
	{
		//Khi nut nhan duoc nhan
			if(BTN1_GET == 0)
 80024c6:	2102      	movs	r1, #2
 80024c8:	484d      	ldr	r0, [pc, #308]	; (8002600 <GetEventButton+0x154>)
 80024ca:	f7fe f890 	bl	80005ee <GPIO_ReadInputDataBit>
 80024ce:	4603      	mov	r3, r0
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d111      	bne.n	80024f8 <GetEventButton+0x4c>
			{
				if(button1.byFlagBtn1Press == 0)
 80024d4:	4b49      	ldr	r3, [pc, #292]	; (80025fc <GetEventButton+0x150>)
 80024d6:	789b      	ldrb	r3, [r3, #2]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d10d      	bne.n	80024f8 <GetEventButton+0x4c>
				{
					button1.dwTimeInit = GetMilSecTick();
 80024dc:	f002 feb0 	bl	8005240 <GetMilSecTick>
 80024e0:	4603      	mov	r3, r0
 80024e2:	4a46      	ldr	r2, [pc, #280]	; (80025fc <GetEventButton+0x150>)
 80024e4:	6093      	str	r3, [r2, #8]
					button1.byPressCnt++;
 80024e6:	4b45      	ldr	r3, [pc, #276]	; (80025fc <GetEventButton+0x150>)
 80024e8:	785b      	ldrb	r3, [r3, #1]
 80024ea:	3301      	adds	r3, #1
 80024ec:	b2da      	uxtb	r2, r3
 80024ee:	4b43      	ldr	r3, [pc, #268]	; (80025fc <GetEventButton+0x150>)
 80024f0:	705a      	strb	r2, [r3, #1]
					button1.byFlagBtn1Press = 1;
 80024f2:	4b42      	ldr	r3, [pc, #264]	; (80025fc <GetEventButton+0x150>)
 80024f4:	2201      	movs	r2, #1
 80024f6:	709a      	strb	r2, [r3, #2]
				}

			}
			//Khi nut nhan ko duoc nhan
			if(BTN1_GET!=0)
 80024f8:	2102      	movs	r1, #2
 80024fa:	4841      	ldr	r0, [pc, #260]	; (8002600 <GetEventButton+0x154>)
 80024fc:	f7fe f877 	bl	80005ee <GPIO_ReadInputDataBit>
 8002500:	4603      	mov	r3, r0
 8002502:	2b00      	cmp	r3, #0
 8002504:	d00f      	beq.n	8002526 <GetEventButton+0x7a>
			{
				if((button1.byFlagBtn1Released == 0)&&(button1.byFlagBtn1Press == 1))
 8002506:	4b3d      	ldr	r3, [pc, #244]	; (80025fc <GetEventButton+0x150>)
 8002508:	78db      	ldrb	r3, [r3, #3]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d10b      	bne.n	8002526 <GetEventButton+0x7a>
 800250e:	4b3b      	ldr	r3, [pc, #236]	; (80025fc <GetEventButton+0x150>)
 8002510:	789b      	ldrb	r3, [r3, #2]
 8002512:	2b01      	cmp	r3, #1
 8002514:	d107      	bne.n	8002526 <GetEventButton+0x7a>
				{
					button1.dwTimeCurrent = GetMilSecTick();
 8002516:	f002 fe93 	bl	8005240 <GetMilSecTick>
 800251a:	4603      	mov	r3, r0
 800251c:	4a37      	ldr	r2, [pc, #220]	; (80025fc <GetEventButton+0x150>)
 800251e:	60d3      	str	r3, [r2, #12]
					button1.byFlagBtn1Released = 1;
 8002520:	4b36      	ldr	r3, [pc, #216]	; (80025fc <GetEventButton+0x150>)
 8002522:	2201      	movs	r2, #1
 8002524:	70da      	strb	r2, [r3, #3]
				}

			}

			//Xu ly khi nhan giu
			if((button1.byFlagBtn1Press == 1 )&&(button1.byFlagBtn1Released == 0))
 8002526:	4b35      	ldr	r3, [pc, #212]	; (80025fc <GetEventButton+0x150>)
 8002528:	789b      	ldrb	r3, [r3, #2]
 800252a:	2b01      	cmp	r3, #1
 800252c:	d117      	bne.n	800255e <GetEventButton+0xb2>
 800252e:	4b33      	ldr	r3, [pc, #204]	; (80025fc <GetEventButton+0x150>)
 8002530:	78db      	ldrb	r3, [r3, #3]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d113      	bne.n	800255e <GetEventButton+0xb2>
			{
				dwDeltaTime = dwCalculatorTime(button1.dwTimeInit,dwTimeNow);
 8002536:	4b31      	ldr	r3, [pc, #196]	; (80025fc <GetEventButton+0x150>)
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	6839      	ldr	r1, [r7, #0]
 800253c:	4618      	mov	r0, r3
 800253e:	f7ff fec1 	bl	80022c4 <dwCalculatorTime>
 8002542:	6078      	str	r0, [r7, #4]
				if(dwDeltaTime>BUTTON_LONG_PRESS_TIME)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800254a:	d908      	bls.n	800255e <GetEventButton+0xb2>
				{
					button1.buttonEven = EVENT_OF_BUTTON_HOLD_500MS;
 800254c:	4b2b      	ldr	r3, [pc, #172]	; (80025fc <GetEventButton+0x150>)
 800254e:	2204      	movs	r2, #4
 8002550:	701a      	strb	r2, [r3, #0]
					button1.byFlagBtn1Hold = 1;
 8002552:	4b2a      	ldr	r3, [pc, #168]	; (80025fc <GetEventButton+0x150>)
 8002554:	2201      	movs	r2, #1
 8002556:	711a      	strb	r2, [r3, #4]
					button1.byPressCnt = 0;
 8002558:	4b28      	ldr	r3, [pc, #160]	; (80025fc <GetEventButton+0x150>)
 800255a:	2200      	movs	r2, #0
 800255c:	705a      	strb	r2, [r3, #1]
				}
			}
			//Xu ly khi nhan/nha

			if((button1.byFlagBtn1Press == 1)&&(button1.byFlagBtn1Released == 1))
 800255e:	4b27      	ldr	r3, [pc, #156]	; (80025fc <GetEventButton+0x150>)
 8002560:	789b      	ldrb	r3, [r3, #2]
 8002562:	2b01      	cmp	r3, #1
 8002564:	d163      	bne.n	800262e <GetEventButton+0x182>
 8002566:	4b25      	ldr	r3, [pc, #148]	; (80025fc <GetEventButton+0x150>)
 8002568:	78db      	ldrb	r3, [r3, #3]
 800256a:	2b01      	cmp	r3, #1
 800256c:	d15f      	bne.n	800262e <GetEventButton+0x182>
			{
				if(button1.byFlagBtn1Hold == 1)
 800256e:	4b23      	ldr	r3, [pc, #140]	; (80025fc <GetEventButton+0x150>)
 8002570:	791b      	ldrb	r3, [r3, #4]
 8002572:	2b01      	cmp	r3, #1
 8002574:	d10c      	bne.n	8002590 <GetEventButton+0xe4>
				{
					button1.buttonEven = EVENT_OF_BUTTON_NOCLICK;
 8002576:	4b21      	ldr	r3, [pc, #132]	; (80025fc <GetEventButton+0x150>)
 8002578:	2200      	movs	r2, #0
 800257a:	701a      	strb	r2, [r3, #0]
					button1.byFlagBtn1Press = 0;
 800257c:	4b1f      	ldr	r3, [pc, #124]	; (80025fc <GetEventButton+0x150>)
 800257e:	2200      	movs	r2, #0
 8002580:	709a      	strb	r2, [r3, #2]
					button1.byFlagBtn1Released = 0;
 8002582:	4b1e      	ldr	r3, [pc, #120]	; (80025fc <GetEventButton+0x150>)
 8002584:	2200      	movs	r2, #0
 8002586:	70da      	strb	r2, [r3, #3]
					button1.byFlagBtn1Hold = 0;
 8002588:	4b1c      	ldr	r3, [pc, #112]	; (80025fc <GetEventButton+0x150>)
 800258a:	2200      	movs	r2, #0
 800258c:	711a      	strb	r2, [r3, #4]
 800258e:	e04e      	b.n	800262e <GetEventButton+0x182>
				}else
				{
					dwDeltaTime = dwCalculatorTime(button1.dwTimeInit, button1.dwTimeCurrent);
 8002590:	4b1a      	ldr	r3, [pc, #104]	; (80025fc <GetEventButton+0x150>)
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	4a19      	ldr	r2, [pc, #100]	; (80025fc <GetEventButton+0x150>)
 8002596:	68d2      	ldr	r2, [r2, #12]
 8002598:	4611      	mov	r1, r2
 800259a:	4618      	mov	r0, r3
 800259c:	f7ff fe92 	bl	80022c4 <dwCalculatorTime>
 80025a0:	6078      	str	r0, [r7, #4]
					if((dwDeltaTime > BUTTON_NORMAL_PRESS_TIME)&&(dwDeltaTime < BUTTON_LONG_PRESS_TIME))
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2b3c      	cmp	r3, #60	; 0x3c
 80025a6:	d92d      	bls.n	8002604 <GetEventButton+0x158>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80025ae:	d229      	bcs.n	8002604 <GetEventButton+0x158>
					{
							dwDeltaTime = dwCalculatorTime(button1.dwTimeCurrent, dwTimeNow);
 80025b0:	4b12      	ldr	r3, [pc, #72]	; (80025fc <GetEventButton+0x150>)
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	6839      	ldr	r1, [r7, #0]
 80025b6:	4618      	mov	r0, r3
 80025b8:	f7ff fe84 	bl	80022c4 <dwCalculatorTime>
 80025bc:	6078      	str	r0, [r7, #4]
						if(dwDeltaTime < BW2PRESS_TIME)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80025c4:	d206      	bcs.n	80025d4 <GetEventButton+0x128>
						{
							button1.byFlagBtn1Released = 0;
 80025c6:	4b0d      	ldr	r3, [pc, #52]	; (80025fc <GetEventButton+0x150>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	70da      	strb	r2, [r3, #3]
							button1.byFlagBtn1Press = 0;
 80025cc:	4b0b      	ldr	r3, [pc, #44]	; (80025fc <GetEventButton+0x150>)
 80025ce:	2200      	movs	r2, #0
 80025d0:	709a      	strb	r2, [r3, #2]
						if(dwDeltaTime < BW2PRESS_TIME)
 80025d2:	e02c      	b.n	800262e <GetEventButton+0x182>
						}else
						{
							button1.buttonEven = checkEventButton(button1.byPressCnt);
 80025d4:	4b09      	ldr	r3, [pc, #36]	; (80025fc <GetEventButton+0x150>)
 80025d6:	785b      	ldrb	r3, [r3, #1]
 80025d8:	4618      	mov	r0, r3
 80025da:	f000 fbbb 	bl	8002d54 <checkEventButton>
 80025de:	4603      	mov	r3, r0
 80025e0:	461a      	mov	r2, r3
 80025e2:	4b06      	ldr	r3, [pc, #24]	; (80025fc <GetEventButton+0x150>)
 80025e4:	701a      	strb	r2, [r3, #0]
							button1.byPressCnt = 0;
 80025e6:	4b05      	ldr	r3, [pc, #20]	; (80025fc <GetEventButton+0x150>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	705a      	strb	r2, [r3, #1]
							button1.byFlagBtn1Press = 0;
 80025ec:	4b03      	ldr	r3, [pc, #12]	; (80025fc <GetEventButton+0x150>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	709a      	strb	r2, [r3, #2]
							button1.byFlagBtn1Released = 0;
 80025f2:	4b02      	ldr	r3, [pc, #8]	; (80025fc <GetEventButton+0x150>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	70da      	strb	r2, [r3, #3]
						if(dwDeltaTime < BW2PRESS_TIME)
 80025f8:	e019      	b.n	800262e <GetEventButton+0x182>
 80025fa:	bf00      	nop
 80025fc:	200000a0 	.word	0x200000a0
 8002600:	40020400 	.word	0x40020400
						}
					}
					else if(dwDeltaTime < BUTTON_NORMAL_PRESS_TIME)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2b3b      	cmp	r3, #59	; 0x3b
 8002608:	d811      	bhi.n	800262e <GetEventButton+0x182>
					{
						button1.buttonEven = checkEventButton(button1.byPressCnt);
 800260a:	4b69      	ldr	r3, [pc, #420]	; (80027b0 <GetEventButton+0x304>)
 800260c:	785b      	ldrb	r3, [r3, #1]
 800260e:	4618      	mov	r0, r3
 8002610:	f000 fba0 	bl	8002d54 <checkEventButton>
 8002614:	4603      	mov	r3, r0
 8002616:	461a      	mov	r2, r3
 8002618:	4b65      	ldr	r3, [pc, #404]	; (80027b0 <GetEventButton+0x304>)
 800261a:	701a      	strb	r2, [r3, #0]
						button1.byPressCnt = 0;
 800261c:	4b64      	ldr	r3, [pc, #400]	; (80027b0 <GetEventButton+0x304>)
 800261e:	2200      	movs	r2, #0
 8002620:	705a      	strb	r2, [r3, #1]
						button1.byFlagBtn1Press = 0;
 8002622:	4b63      	ldr	r3, [pc, #396]	; (80027b0 <GetEventButton+0x304>)
 8002624:	2200      	movs	r2, #0
 8002626:	709a      	strb	r2, [r3, #2]
						button1.byFlagBtn1Released = 0;
 8002628:	4b61      	ldr	r3, [pc, #388]	; (80027b0 <GetEventButton+0x304>)
 800262a:	2200      	movs	r2, #0
 800262c:	70da      	strb	r2, [r3, #3]
					}
				}
			}

			if((button1.byFlagBtn1Hold == 0)&&(button1.byFlagBtn1Press == 0))
 800262e:	4b60      	ldr	r3, [pc, #384]	; (80027b0 <GetEventButton+0x304>)
 8002630:	791b      	ldrb	r3, [r3, #4]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d11a      	bne.n	800266c <GetEventButton+0x1c0>
 8002636:	4b5e      	ldr	r3, [pc, #376]	; (80027b0 <GetEventButton+0x304>)
 8002638:	789b      	ldrb	r3, [r3, #2]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d116      	bne.n	800266c <GetEventButton+0x1c0>
			{
					dwDeltaTime = dwCalculatorTime(button1.dwTimeCurrent, dwTimeNow);
 800263e:	4b5c      	ldr	r3, [pc, #368]	; (80027b0 <GetEventButton+0x304>)
 8002640:	68db      	ldr	r3, [r3, #12]
 8002642:	6839      	ldr	r1, [r7, #0]
 8002644:	4618      	mov	r0, r3
 8002646:	f7ff fe3d 	bl	80022c4 <dwCalculatorTime>
 800264a:	6078      	str	r0, [r7, #4]
					if(dwDeltaTime > BW2PRESS_TIME)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8002652:	d90b      	bls.n	800266c <GetEventButton+0x1c0>
					{
						button1.buttonEven = checkEventButton(button1.byPressCnt);
 8002654:	4b56      	ldr	r3, [pc, #344]	; (80027b0 <GetEventButton+0x304>)
 8002656:	785b      	ldrb	r3, [r3, #1]
 8002658:	4618      	mov	r0, r3
 800265a:	f000 fb7b 	bl	8002d54 <checkEventButton>
 800265e:	4603      	mov	r3, r0
 8002660:	461a      	mov	r2, r3
 8002662:	4b53      	ldr	r3, [pc, #332]	; (80027b0 <GetEventButton+0x304>)
 8002664:	701a      	strb	r2, [r3, #0]
						button1.byPressCnt = 0;
 8002666:	4b52      	ldr	r3, [pc, #328]	; (80027b0 <GetEventButton+0x304>)
 8002668:	2200      	movs	r2, #0
 800266a:	705a      	strb	r2, [r3, #1]
					}

			}

	}
		dwTimeNow = GetMilSecTick();
 800266c:	f002 fde8 	bl	8005240 <GetMilSecTick>
 8002670:	6038      	str	r0, [r7, #0]
		if(button2.buttonEven ==EVENT_OF_BUTTON_NOCLICK)
 8002672:	4b50      	ldr	r3, [pc, #320]	; (80027b4 <GetEventButton+0x308>)
 8002674:	781b      	ldrb	r3, [r3, #0]
 8002676:	2b00      	cmp	r3, #0
 8002678:	f040 80d4 	bne.w	8002824 <GetEventButton+0x378>
		{
			//Khi nut nhan duoc nhan
				if(BTN2_GET == 0)
 800267c:	2104      	movs	r1, #4
 800267e:	484e      	ldr	r0, [pc, #312]	; (80027b8 <GetEventButton+0x30c>)
 8002680:	f7fd ffb5 	bl	80005ee <GPIO_ReadInputDataBit>
 8002684:	4603      	mov	r3, r0
 8002686:	2b00      	cmp	r3, #0
 8002688:	d111      	bne.n	80026ae <GetEventButton+0x202>
				{
					if(button2.byFlagBtn1Press == 0)
 800268a:	4b4a      	ldr	r3, [pc, #296]	; (80027b4 <GetEventButton+0x308>)
 800268c:	789b      	ldrb	r3, [r3, #2]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d10d      	bne.n	80026ae <GetEventButton+0x202>
					{
						button2.dwTimeInit = GetMilSecTick();
 8002692:	f002 fdd5 	bl	8005240 <GetMilSecTick>
 8002696:	4603      	mov	r3, r0
 8002698:	4a46      	ldr	r2, [pc, #280]	; (80027b4 <GetEventButton+0x308>)
 800269a:	6093      	str	r3, [r2, #8]
						button2.byPressCnt++;
 800269c:	4b45      	ldr	r3, [pc, #276]	; (80027b4 <GetEventButton+0x308>)
 800269e:	785b      	ldrb	r3, [r3, #1]
 80026a0:	3301      	adds	r3, #1
 80026a2:	b2da      	uxtb	r2, r3
 80026a4:	4b43      	ldr	r3, [pc, #268]	; (80027b4 <GetEventButton+0x308>)
 80026a6:	705a      	strb	r2, [r3, #1]
						button2.byFlagBtn1Press = 1;
 80026a8:	4b42      	ldr	r3, [pc, #264]	; (80027b4 <GetEventButton+0x308>)
 80026aa:	2201      	movs	r2, #1
 80026ac:	709a      	strb	r2, [r3, #2]
					}

				}
				//Khi nut nhan ko duoc nhan
				if(BTN2_GET!=0)
 80026ae:	2104      	movs	r1, #4
 80026b0:	4841      	ldr	r0, [pc, #260]	; (80027b8 <GetEventButton+0x30c>)
 80026b2:	f7fd ff9c 	bl	80005ee <GPIO_ReadInputDataBit>
 80026b6:	4603      	mov	r3, r0
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d00f      	beq.n	80026dc <GetEventButton+0x230>
				{
					if((button2.byFlagBtn1Released == 0)&&(button2.byFlagBtn1Press == 1))
 80026bc:	4b3d      	ldr	r3, [pc, #244]	; (80027b4 <GetEventButton+0x308>)
 80026be:	78db      	ldrb	r3, [r3, #3]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d10b      	bne.n	80026dc <GetEventButton+0x230>
 80026c4:	4b3b      	ldr	r3, [pc, #236]	; (80027b4 <GetEventButton+0x308>)
 80026c6:	789b      	ldrb	r3, [r3, #2]
 80026c8:	2b01      	cmp	r3, #1
 80026ca:	d107      	bne.n	80026dc <GetEventButton+0x230>
					{
						button2.dwTimeCurrent = GetMilSecTick();
 80026cc:	f002 fdb8 	bl	8005240 <GetMilSecTick>
 80026d0:	4603      	mov	r3, r0
 80026d2:	4a38      	ldr	r2, [pc, #224]	; (80027b4 <GetEventButton+0x308>)
 80026d4:	60d3      	str	r3, [r2, #12]
						button2.byFlagBtn1Released = 1;
 80026d6:	4b37      	ldr	r3, [pc, #220]	; (80027b4 <GetEventButton+0x308>)
 80026d8:	2201      	movs	r2, #1
 80026da:	70da      	strb	r2, [r3, #3]
					}

				}

				//Xu ly khi nhan giu
				if((button2.byFlagBtn1Press == 1 )&&(button2.byFlagBtn1Released == 0))
 80026dc:	4b35      	ldr	r3, [pc, #212]	; (80027b4 <GetEventButton+0x308>)
 80026de:	789b      	ldrb	r3, [r3, #2]
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	d117      	bne.n	8002714 <GetEventButton+0x268>
 80026e4:	4b33      	ldr	r3, [pc, #204]	; (80027b4 <GetEventButton+0x308>)
 80026e6:	78db      	ldrb	r3, [r3, #3]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d113      	bne.n	8002714 <GetEventButton+0x268>
				{
					dwDeltaTime = dwCalculatorTime(button2.dwTimeInit,dwTimeNow);
 80026ec:	4b31      	ldr	r3, [pc, #196]	; (80027b4 <GetEventButton+0x308>)
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	6839      	ldr	r1, [r7, #0]
 80026f2:	4618      	mov	r0, r3
 80026f4:	f7ff fde6 	bl	80022c4 <dwCalculatorTime>
 80026f8:	6078      	str	r0, [r7, #4]
					if(dwDeltaTime>BUTTON_LONG_PRESS_TIME)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002700:	d908      	bls.n	8002714 <GetEventButton+0x268>
					{
						button2.buttonEven = EVENT_OF_BUTTON_HOLD_500MS;
 8002702:	4b2c      	ldr	r3, [pc, #176]	; (80027b4 <GetEventButton+0x308>)
 8002704:	2204      	movs	r2, #4
 8002706:	701a      	strb	r2, [r3, #0]
						button2.byFlagBtn1Hold = 1;
 8002708:	4b2a      	ldr	r3, [pc, #168]	; (80027b4 <GetEventButton+0x308>)
 800270a:	2201      	movs	r2, #1
 800270c:	711a      	strb	r2, [r3, #4]
						button2.byPressCnt = 0;
 800270e:	4b29      	ldr	r3, [pc, #164]	; (80027b4 <GetEventButton+0x308>)
 8002710:	2200      	movs	r2, #0
 8002712:	705a      	strb	r2, [r3, #1]
					}
				}
				//Xu ly khi nhan/nha

				if((button2.byFlagBtn1Press == 1)&&(button2.byFlagBtn1Released == 1))
 8002714:	4b27      	ldr	r3, [pc, #156]	; (80027b4 <GetEventButton+0x308>)
 8002716:	789b      	ldrb	r3, [r3, #2]
 8002718:	2b01      	cmp	r3, #1
 800271a:	d164      	bne.n	80027e6 <GetEventButton+0x33a>
 800271c:	4b25      	ldr	r3, [pc, #148]	; (80027b4 <GetEventButton+0x308>)
 800271e:	78db      	ldrb	r3, [r3, #3]
 8002720:	2b01      	cmp	r3, #1
 8002722:	d160      	bne.n	80027e6 <GetEventButton+0x33a>
				{
					if(button2.byFlagBtn1Hold == 1)
 8002724:	4b23      	ldr	r3, [pc, #140]	; (80027b4 <GetEventButton+0x308>)
 8002726:	791b      	ldrb	r3, [r3, #4]
 8002728:	2b01      	cmp	r3, #1
 800272a:	d10c      	bne.n	8002746 <GetEventButton+0x29a>
					{
						button2.buttonEven = EVENT_OF_BUTTON_NOCLICK;
 800272c:	4b21      	ldr	r3, [pc, #132]	; (80027b4 <GetEventButton+0x308>)
 800272e:	2200      	movs	r2, #0
 8002730:	701a      	strb	r2, [r3, #0]
						button2.byFlagBtn1Press = 0;
 8002732:	4b20      	ldr	r3, [pc, #128]	; (80027b4 <GetEventButton+0x308>)
 8002734:	2200      	movs	r2, #0
 8002736:	709a      	strb	r2, [r3, #2]
						button2.byFlagBtn1Released = 0;
 8002738:	4b1e      	ldr	r3, [pc, #120]	; (80027b4 <GetEventButton+0x308>)
 800273a:	2200      	movs	r2, #0
 800273c:	70da      	strb	r2, [r3, #3]
						button2.byFlagBtn1Hold = 0;
 800273e:	4b1d      	ldr	r3, [pc, #116]	; (80027b4 <GetEventButton+0x308>)
 8002740:	2200      	movs	r2, #0
 8002742:	711a      	strb	r2, [r3, #4]
 8002744:	e04f      	b.n	80027e6 <GetEventButton+0x33a>
					}else
					{
						dwDeltaTime = dwCalculatorTime(button2.dwTimeInit, button2.dwTimeCurrent);
 8002746:	4b1b      	ldr	r3, [pc, #108]	; (80027b4 <GetEventButton+0x308>)
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	4a1a      	ldr	r2, [pc, #104]	; (80027b4 <GetEventButton+0x308>)
 800274c:	68d2      	ldr	r2, [r2, #12]
 800274e:	4611      	mov	r1, r2
 8002750:	4618      	mov	r0, r3
 8002752:	f7ff fdb7 	bl	80022c4 <dwCalculatorTime>
 8002756:	6078      	str	r0, [r7, #4]
						if((dwDeltaTime > BUTTON_NORMAL_PRESS_TIME)&&(dwDeltaTime < BUTTON_LONG_PRESS_TIME))
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2b3c      	cmp	r3, #60	; 0x3c
 800275c:	d92e      	bls.n	80027bc <GetEventButton+0x310>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002764:	d22a      	bcs.n	80027bc <GetEventButton+0x310>
						{
								dwDeltaTime = dwCalculatorTime(button2.dwTimeCurrent, dwTimeNow);
 8002766:	4b13      	ldr	r3, [pc, #76]	; (80027b4 <GetEventButton+0x308>)
 8002768:	68db      	ldr	r3, [r3, #12]
 800276a:	6839      	ldr	r1, [r7, #0]
 800276c:	4618      	mov	r0, r3
 800276e:	f7ff fda9 	bl	80022c4 <dwCalculatorTime>
 8002772:	6078      	str	r0, [r7, #4]
							if(dwDeltaTime < BW2PRESS_TIME)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800277a:	d206      	bcs.n	800278a <GetEventButton+0x2de>
							{
								button2.byFlagBtn1Released = 0;
 800277c:	4b0d      	ldr	r3, [pc, #52]	; (80027b4 <GetEventButton+0x308>)
 800277e:	2200      	movs	r2, #0
 8002780:	70da      	strb	r2, [r3, #3]
								button2.byFlagBtn1Press = 0;
 8002782:	4b0c      	ldr	r3, [pc, #48]	; (80027b4 <GetEventButton+0x308>)
 8002784:	2200      	movs	r2, #0
 8002786:	709a      	strb	r2, [r3, #2]
							if(dwDeltaTime < BW2PRESS_TIME)
 8002788:	e02d      	b.n	80027e6 <GetEventButton+0x33a>
							}else
							{
								button2.buttonEven = checkEventButton(button2.byPressCnt);
 800278a:	4b0a      	ldr	r3, [pc, #40]	; (80027b4 <GetEventButton+0x308>)
 800278c:	785b      	ldrb	r3, [r3, #1]
 800278e:	4618      	mov	r0, r3
 8002790:	f000 fae0 	bl	8002d54 <checkEventButton>
 8002794:	4603      	mov	r3, r0
 8002796:	461a      	mov	r2, r3
 8002798:	4b06      	ldr	r3, [pc, #24]	; (80027b4 <GetEventButton+0x308>)
 800279a:	701a      	strb	r2, [r3, #0]
								button2.byPressCnt = 0;
 800279c:	4b05      	ldr	r3, [pc, #20]	; (80027b4 <GetEventButton+0x308>)
 800279e:	2200      	movs	r2, #0
 80027a0:	705a      	strb	r2, [r3, #1]
								button2.byFlagBtn1Press = 0;
 80027a2:	4b04      	ldr	r3, [pc, #16]	; (80027b4 <GetEventButton+0x308>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	709a      	strb	r2, [r3, #2]
								button2.byFlagBtn1Released = 0;
 80027a8:	4b02      	ldr	r3, [pc, #8]	; (80027b4 <GetEventButton+0x308>)
 80027aa:	2200      	movs	r2, #0
 80027ac:	70da      	strb	r2, [r3, #3]
							if(dwDeltaTime < BW2PRESS_TIME)
 80027ae:	e01a      	b.n	80027e6 <GetEventButton+0x33a>
 80027b0:	200000a0 	.word	0x200000a0
 80027b4:	200000b0 	.word	0x200000b0
 80027b8:	40020400 	.word	0x40020400
							}
						}
						else if(dwDeltaTime < BUTTON_NORMAL_PRESS_TIME)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2b3b      	cmp	r3, #59	; 0x3b
 80027c0:	d811      	bhi.n	80027e6 <GetEventButton+0x33a>
						{
							button2.buttonEven = checkEventButton(button2.byPressCnt);
 80027c2:	4b69      	ldr	r3, [pc, #420]	; (8002968 <GetEventButton+0x4bc>)
 80027c4:	785b      	ldrb	r3, [r3, #1]
 80027c6:	4618      	mov	r0, r3
 80027c8:	f000 fac4 	bl	8002d54 <checkEventButton>
 80027cc:	4603      	mov	r3, r0
 80027ce:	461a      	mov	r2, r3
 80027d0:	4b65      	ldr	r3, [pc, #404]	; (8002968 <GetEventButton+0x4bc>)
 80027d2:	701a      	strb	r2, [r3, #0]
							button2.byPressCnt = 0;
 80027d4:	4b64      	ldr	r3, [pc, #400]	; (8002968 <GetEventButton+0x4bc>)
 80027d6:	2200      	movs	r2, #0
 80027d8:	705a      	strb	r2, [r3, #1]
							button2.byFlagBtn1Press = 0;
 80027da:	4b63      	ldr	r3, [pc, #396]	; (8002968 <GetEventButton+0x4bc>)
 80027dc:	2200      	movs	r2, #0
 80027de:	709a      	strb	r2, [r3, #2]
							button2.byFlagBtn1Released = 0;
 80027e0:	4b61      	ldr	r3, [pc, #388]	; (8002968 <GetEventButton+0x4bc>)
 80027e2:	2200      	movs	r2, #0
 80027e4:	70da      	strb	r2, [r3, #3]
						}
					}
				}

				if((button2.byFlagBtn1Hold == 0)&&(button2.byFlagBtn1Press == 0))
 80027e6:	4b60      	ldr	r3, [pc, #384]	; (8002968 <GetEventButton+0x4bc>)
 80027e8:	791b      	ldrb	r3, [r3, #4]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d11a      	bne.n	8002824 <GetEventButton+0x378>
 80027ee:	4b5e      	ldr	r3, [pc, #376]	; (8002968 <GetEventButton+0x4bc>)
 80027f0:	789b      	ldrb	r3, [r3, #2]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d116      	bne.n	8002824 <GetEventButton+0x378>
				{
					dwDeltaTime = dwCalculatorTime(button2.dwTimeCurrent, dwTimeNow);
 80027f6:	4b5c      	ldr	r3, [pc, #368]	; (8002968 <GetEventButton+0x4bc>)
 80027f8:	68db      	ldr	r3, [r3, #12]
 80027fa:	6839      	ldr	r1, [r7, #0]
 80027fc:	4618      	mov	r0, r3
 80027fe:	f7ff fd61 	bl	80022c4 <dwCalculatorTime>
 8002802:	6078      	str	r0, [r7, #4]
					if(dwDeltaTime > BW2PRESS_TIME)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800280a:	d90b      	bls.n	8002824 <GetEventButton+0x378>
					{
						button2.buttonEven = checkEventButton(button2.byPressCnt);
 800280c:	4b56      	ldr	r3, [pc, #344]	; (8002968 <GetEventButton+0x4bc>)
 800280e:	785b      	ldrb	r3, [r3, #1]
 8002810:	4618      	mov	r0, r3
 8002812:	f000 fa9f 	bl	8002d54 <checkEventButton>
 8002816:	4603      	mov	r3, r0
 8002818:	461a      	mov	r2, r3
 800281a:	4b53      	ldr	r3, [pc, #332]	; (8002968 <GetEventButton+0x4bc>)
 800281c:	701a      	strb	r2, [r3, #0]
						button2.byPressCnt = 0;
 800281e:	4b52      	ldr	r3, [pc, #328]	; (8002968 <GetEventButton+0x4bc>)
 8002820:	2200      	movs	r2, #0
 8002822:	705a      	strb	r2, [r3, #1]
					}
				}

		}
		dwTimeNow = GetMilSecTick();
 8002824:	f002 fd0c 	bl	8005240 <GetMilSecTick>
 8002828:	6038      	str	r0, [r7, #0]
		if(button3.buttonEven ==EVENT_OF_BUTTON_NOCLICK)
 800282a:	4b50      	ldr	r3, [pc, #320]	; (800296c <GetEventButton+0x4c0>)
 800282c:	781b      	ldrb	r3, [r3, #0]
 800282e:	2b00      	cmp	r3, #0
 8002830:	f040 80d4 	bne.w	80029dc <GetEventButton+0x530>
		{
			//Khi nut nhan duoc nhan
				if(BTN3_GET == 0)
 8002834:	2108      	movs	r1, #8
 8002836:	484e      	ldr	r0, [pc, #312]	; (8002970 <GetEventButton+0x4c4>)
 8002838:	f7fd fed9 	bl	80005ee <GPIO_ReadInputDataBit>
 800283c:	4603      	mov	r3, r0
 800283e:	2b00      	cmp	r3, #0
 8002840:	d111      	bne.n	8002866 <GetEventButton+0x3ba>
				{
					if(button3.byFlagBtn1Press == 0)
 8002842:	4b4a      	ldr	r3, [pc, #296]	; (800296c <GetEventButton+0x4c0>)
 8002844:	789b      	ldrb	r3, [r3, #2]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d10d      	bne.n	8002866 <GetEventButton+0x3ba>
					{
						button3.dwTimeInit = GetMilSecTick();
 800284a:	f002 fcf9 	bl	8005240 <GetMilSecTick>
 800284e:	4603      	mov	r3, r0
 8002850:	4a46      	ldr	r2, [pc, #280]	; (800296c <GetEventButton+0x4c0>)
 8002852:	6093      	str	r3, [r2, #8]
						button3.byPressCnt++;
 8002854:	4b45      	ldr	r3, [pc, #276]	; (800296c <GetEventButton+0x4c0>)
 8002856:	785b      	ldrb	r3, [r3, #1]
 8002858:	3301      	adds	r3, #1
 800285a:	b2da      	uxtb	r2, r3
 800285c:	4b43      	ldr	r3, [pc, #268]	; (800296c <GetEventButton+0x4c0>)
 800285e:	705a      	strb	r2, [r3, #1]
						button3.byFlagBtn1Press = 1;
 8002860:	4b42      	ldr	r3, [pc, #264]	; (800296c <GetEventButton+0x4c0>)
 8002862:	2201      	movs	r2, #1
 8002864:	709a      	strb	r2, [r3, #2]
					}

				}
				//Khi nut nhan ko duoc nhan
				if(BTN3_GET!=0)
 8002866:	2108      	movs	r1, #8
 8002868:	4841      	ldr	r0, [pc, #260]	; (8002970 <GetEventButton+0x4c4>)
 800286a:	f7fd fec0 	bl	80005ee <GPIO_ReadInputDataBit>
 800286e:	4603      	mov	r3, r0
 8002870:	2b00      	cmp	r3, #0
 8002872:	d00f      	beq.n	8002894 <GetEventButton+0x3e8>
				{
					if((button3.byFlagBtn1Released == 0)&&(button3.byFlagBtn1Press == 1))
 8002874:	4b3d      	ldr	r3, [pc, #244]	; (800296c <GetEventButton+0x4c0>)
 8002876:	78db      	ldrb	r3, [r3, #3]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d10b      	bne.n	8002894 <GetEventButton+0x3e8>
 800287c:	4b3b      	ldr	r3, [pc, #236]	; (800296c <GetEventButton+0x4c0>)
 800287e:	789b      	ldrb	r3, [r3, #2]
 8002880:	2b01      	cmp	r3, #1
 8002882:	d107      	bne.n	8002894 <GetEventButton+0x3e8>
					{
						button3.dwTimeCurrent = GetMilSecTick();
 8002884:	f002 fcdc 	bl	8005240 <GetMilSecTick>
 8002888:	4603      	mov	r3, r0
 800288a:	4a38      	ldr	r2, [pc, #224]	; (800296c <GetEventButton+0x4c0>)
 800288c:	60d3      	str	r3, [r2, #12]
						button3.byFlagBtn1Released = 1;
 800288e:	4b37      	ldr	r3, [pc, #220]	; (800296c <GetEventButton+0x4c0>)
 8002890:	2201      	movs	r2, #1
 8002892:	70da      	strb	r2, [r3, #3]
					}

				}

				//Xu ly khi nhan giu
				if((button3.byFlagBtn1Press == 1 )&&(button3.byFlagBtn1Released == 0))
 8002894:	4b35      	ldr	r3, [pc, #212]	; (800296c <GetEventButton+0x4c0>)
 8002896:	789b      	ldrb	r3, [r3, #2]
 8002898:	2b01      	cmp	r3, #1
 800289a:	d117      	bne.n	80028cc <GetEventButton+0x420>
 800289c:	4b33      	ldr	r3, [pc, #204]	; (800296c <GetEventButton+0x4c0>)
 800289e:	78db      	ldrb	r3, [r3, #3]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d113      	bne.n	80028cc <GetEventButton+0x420>
				{
					dwDeltaTime = dwCalculatorTime(button3.dwTimeInit,dwTimeNow);
 80028a4:	4b31      	ldr	r3, [pc, #196]	; (800296c <GetEventButton+0x4c0>)
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	6839      	ldr	r1, [r7, #0]
 80028aa:	4618      	mov	r0, r3
 80028ac:	f7ff fd0a 	bl	80022c4 <dwCalculatorTime>
 80028b0:	6078      	str	r0, [r7, #4]
					if(dwDeltaTime>BUTTON_LONG_PRESS_TIME)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80028b8:	d908      	bls.n	80028cc <GetEventButton+0x420>
					{
						button3.buttonEven = EVENT_OF_BUTTON_HOLD_500MS;
 80028ba:	4b2c      	ldr	r3, [pc, #176]	; (800296c <GetEventButton+0x4c0>)
 80028bc:	2204      	movs	r2, #4
 80028be:	701a      	strb	r2, [r3, #0]
						button3.byFlagBtn1Hold = 1;
 80028c0:	4b2a      	ldr	r3, [pc, #168]	; (800296c <GetEventButton+0x4c0>)
 80028c2:	2201      	movs	r2, #1
 80028c4:	711a      	strb	r2, [r3, #4]
						button3.byPressCnt = 0;
 80028c6:	4b29      	ldr	r3, [pc, #164]	; (800296c <GetEventButton+0x4c0>)
 80028c8:	2200      	movs	r2, #0
 80028ca:	705a      	strb	r2, [r3, #1]
					}
				}
				//Xu ly khi nhan/nha

				if((button3.byFlagBtn1Press == 1)&&(button3.byFlagBtn1Released == 1))
 80028cc:	4b27      	ldr	r3, [pc, #156]	; (800296c <GetEventButton+0x4c0>)
 80028ce:	789b      	ldrb	r3, [r3, #2]
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d164      	bne.n	800299e <GetEventButton+0x4f2>
 80028d4:	4b25      	ldr	r3, [pc, #148]	; (800296c <GetEventButton+0x4c0>)
 80028d6:	78db      	ldrb	r3, [r3, #3]
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d160      	bne.n	800299e <GetEventButton+0x4f2>
				{
					if(button3.byFlagBtn1Hold == 1)
 80028dc:	4b23      	ldr	r3, [pc, #140]	; (800296c <GetEventButton+0x4c0>)
 80028de:	791b      	ldrb	r3, [r3, #4]
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	d10c      	bne.n	80028fe <GetEventButton+0x452>
					{
						button3.buttonEven = EVENT_OF_BUTTON_NOCLICK;
 80028e4:	4b21      	ldr	r3, [pc, #132]	; (800296c <GetEventButton+0x4c0>)
 80028e6:	2200      	movs	r2, #0
 80028e8:	701a      	strb	r2, [r3, #0]
						button3.byFlagBtn1Press = 0;
 80028ea:	4b20      	ldr	r3, [pc, #128]	; (800296c <GetEventButton+0x4c0>)
 80028ec:	2200      	movs	r2, #0
 80028ee:	709a      	strb	r2, [r3, #2]
						button3.byFlagBtn1Released = 0;
 80028f0:	4b1e      	ldr	r3, [pc, #120]	; (800296c <GetEventButton+0x4c0>)
 80028f2:	2200      	movs	r2, #0
 80028f4:	70da      	strb	r2, [r3, #3]
						button3.byFlagBtn1Hold = 0;
 80028f6:	4b1d      	ldr	r3, [pc, #116]	; (800296c <GetEventButton+0x4c0>)
 80028f8:	2200      	movs	r2, #0
 80028fa:	711a      	strb	r2, [r3, #4]
 80028fc:	e04f      	b.n	800299e <GetEventButton+0x4f2>
					}else
					{
						dwDeltaTime = dwCalculatorTime(button3.dwTimeInit, button3.dwTimeCurrent);
 80028fe:	4b1b      	ldr	r3, [pc, #108]	; (800296c <GetEventButton+0x4c0>)
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	4a1a      	ldr	r2, [pc, #104]	; (800296c <GetEventButton+0x4c0>)
 8002904:	68d2      	ldr	r2, [r2, #12]
 8002906:	4611      	mov	r1, r2
 8002908:	4618      	mov	r0, r3
 800290a:	f7ff fcdb 	bl	80022c4 <dwCalculatorTime>
 800290e:	6078      	str	r0, [r7, #4]
						if((dwDeltaTime > BUTTON_NORMAL_PRESS_TIME)&&(dwDeltaTime < BUTTON_LONG_PRESS_TIME))
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2b3c      	cmp	r3, #60	; 0x3c
 8002914:	d92e      	bls.n	8002974 <GetEventButton+0x4c8>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800291c:	d22a      	bcs.n	8002974 <GetEventButton+0x4c8>
						{
								dwDeltaTime = dwCalculatorTime(button3.dwTimeCurrent, dwTimeNow);
 800291e:	4b13      	ldr	r3, [pc, #76]	; (800296c <GetEventButton+0x4c0>)
 8002920:	68db      	ldr	r3, [r3, #12]
 8002922:	6839      	ldr	r1, [r7, #0]
 8002924:	4618      	mov	r0, r3
 8002926:	f7ff fccd 	bl	80022c4 <dwCalculatorTime>
 800292a:	6078      	str	r0, [r7, #4]
							if(dwDeltaTime < BW2PRESS_TIME)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8002932:	d206      	bcs.n	8002942 <GetEventButton+0x496>
							{
								button3.byFlagBtn1Released = 0;
 8002934:	4b0d      	ldr	r3, [pc, #52]	; (800296c <GetEventButton+0x4c0>)
 8002936:	2200      	movs	r2, #0
 8002938:	70da      	strb	r2, [r3, #3]
								button3.byFlagBtn1Press = 0;
 800293a:	4b0c      	ldr	r3, [pc, #48]	; (800296c <GetEventButton+0x4c0>)
 800293c:	2200      	movs	r2, #0
 800293e:	709a      	strb	r2, [r3, #2]
							if(dwDeltaTime < BW2PRESS_TIME)
 8002940:	e02d      	b.n	800299e <GetEventButton+0x4f2>
							}else
							{
								button3.buttonEven = checkEventButton(button3.byPressCnt);
 8002942:	4b0a      	ldr	r3, [pc, #40]	; (800296c <GetEventButton+0x4c0>)
 8002944:	785b      	ldrb	r3, [r3, #1]
 8002946:	4618      	mov	r0, r3
 8002948:	f000 fa04 	bl	8002d54 <checkEventButton>
 800294c:	4603      	mov	r3, r0
 800294e:	461a      	mov	r2, r3
 8002950:	4b06      	ldr	r3, [pc, #24]	; (800296c <GetEventButton+0x4c0>)
 8002952:	701a      	strb	r2, [r3, #0]
								button3.byPressCnt = 0;
 8002954:	4b05      	ldr	r3, [pc, #20]	; (800296c <GetEventButton+0x4c0>)
 8002956:	2200      	movs	r2, #0
 8002958:	705a      	strb	r2, [r3, #1]
								button3.byFlagBtn1Press = 0;
 800295a:	4b04      	ldr	r3, [pc, #16]	; (800296c <GetEventButton+0x4c0>)
 800295c:	2200      	movs	r2, #0
 800295e:	709a      	strb	r2, [r3, #2]
								button3.byFlagBtn1Released = 0;
 8002960:	4b02      	ldr	r3, [pc, #8]	; (800296c <GetEventButton+0x4c0>)
 8002962:	2200      	movs	r2, #0
 8002964:	70da      	strb	r2, [r3, #3]
							if(dwDeltaTime < BW2PRESS_TIME)
 8002966:	e01a      	b.n	800299e <GetEventButton+0x4f2>
 8002968:	200000b0 	.word	0x200000b0
 800296c:	200000c0 	.word	0x200000c0
 8002970:	40020800 	.word	0x40020800
							}
						}
						else if(dwDeltaTime < BUTTON_NORMAL_PRESS_TIME)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2b3b      	cmp	r3, #59	; 0x3b
 8002978:	d811      	bhi.n	800299e <GetEventButton+0x4f2>
						{
							button3.buttonEven = checkEventButton(button3.byPressCnt);
 800297a:	4b69      	ldr	r3, [pc, #420]	; (8002b20 <GetEventButton+0x674>)
 800297c:	785b      	ldrb	r3, [r3, #1]
 800297e:	4618      	mov	r0, r3
 8002980:	f000 f9e8 	bl	8002d54 <checkEventButton>
 8002984:	4603      	mov	r3, r0
 8002986:	461a      	mov	r2, r3
 8002988:	4b65      	ldr	r3, [pc, #404]	; (8002b20 <GetEventButton+0x674>)
 800298a:	701a      	strb	r2, [r3, #0]
							button3.byPressCnt = 0;
 800298c:	4b64      	ldr	r3, [pc, #400]	; (8002b20 <GetEventButton+0x674>)
 800298e:	2200      	movs	r2, #0
 8002990:	705a      	strb	r2, [r3, #1]
							button3.byFlagBtn1Press = 0;
 8002992:	4b63      	ldr	r3, [pc, #396]	; (8002b20 <GetEventButton+0x674>)
 8002994:	2200      	movs	r2, #0
 8002996:	709a      	strb	r2, [r3, #2]
							button3.byFlagBtn1Released = 0;
 8002998:	4b61      	ldr	r3, [pc, #388]	; (8002b20 <GetEventButton+0x674>)
 800299a:	2200      	movs	r2, #0
 800299c:	70da      	strb	r2, [r3, #3]
						}
					}
				}

				if((button3.byFlagBtn1Hold == 0)&&(button3.byFlagBtn1Press == 0))
 800299e:	4b60      	ldr	r3, [pc, #384]	; (8002b20 <GetEventButton+0x674>)
 80029a0:	791b      	ldrb	r3, [r3, #4]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d11a      	bne.n	80029dc <GetEventButton+0x530>
 80029a6:	4b5e      	ldr	r3, [pc, #376]	; (8002b20 <GetEventButton+0x674>)
 80029a8:	789b      	ldrb	r3, [r3, #2]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d116      	bne.n	80029dc <GetEventButton+0x530>
				{
					dwDeltaTime = dwCalculatorTime(button3.dwTimeCurrent, dwTimeNow);
 80029ae:	4b5c      	ldr	r3, [pc, #368]	; (8002b20 <GetEventButton+0x674>)
 80029b0:	68db      	ldr	r3, [r3, #12]
 80029b2:	6839      	ldr	r1, [r7, #0]
 80029b4:	4618      	mov	r0, r3
 80029b6:	f7ff fc85 	bl	80022c4 <dwCalculatorTime>
 80029ba:	6078      	str	r0, [r7, #4]
					if(dwDeltaTime > BW2PRESS_TIME)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80029c2:	d90b      	bls.n	80029dc <GetEventButton+0x530>
					{
						button3.buttonEven = checkEventButton(button3.byPressCnt);
 80029c4:	4b56      	ldr	r3, [pc, #344]	; (8002b20 <GetEventButton+0x674>)
 80029c6:	785b      	ldrb	r3, [r3, #1]
 80029c8:	4618      	mov	r0, r3
 80029ca:	f000 f9c3 	bl	8002d54 <checkEventButton>
 80029ce:	4603      	mov	r3, r0
 80029d0:	461a      	mov	r2, r3
 80029d2:	4b53      	ldr	r3, [pc, #332]	; (8002b20 <GetEventButton+0x674>)
 80029d4:	701a      	strb	r2, [r3, #0]
						button3.byPressCnt = 0;
 80029d6:	4b52      	ldr	r3, [pc, #328]	; (8002b20 <GetEventButton+0x674>)
 80029d8:	2200      	movs	r2, #0
 80029da:	705a      	strb	r2, [r3, #1]
					}
				}

		}
		dwTimeNow = GetMilSecTick();
 80029dc:	f002 fc30 	bl	8005240 <GetMilSecTick>
 80029e0:	6038      	str	r0, [r7, #0]
		if(button4.buttonEven ==EVENT_OF_BUTTON_NOCLICK)
 80029e2:	4b50      	ldr	r3, [pc, #320]	; (8002b24 <GetEventButton+0x678>)
 80029e4:	781b      	ldrb	r3, [r3, #0]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	f040 80d4 	bne.w	8002b94 <GetEventButton+0x6e8>
		{
			//Khi nut nhan duoc nhan
				if(BTN4_GET == 0)
 80029ec:	2101      	movs	r1, #1
 80029ee:	484e      	ldr	r0, [pc, #312]	; (8002b28 <GetEventButton+0x67c>)
 80029f0:	f7fd fdfd 	bl	80005ee <GPIO_ReadInputDataBit>
 80029f4:	4603      	mov	r3, r0
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d111      	bne.n	8002a1e <GetEventButton+0x572>
				{
					if(button4.byFlagBtn1Press == 0)
 80029fa:	4b4a      	ldr	r3, [pc, #296]	; (8002b24 <GetEventButton+0x678>)
 80029fc:	789b      	ldrb	r3, [r3, #2]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d10d      	bne.n	8002a1e <GetEventButton+0x572>
					{
						button4.dwTimeInit = GetMilSecTick();
 8002a02:	f002 fc1d 	bl	8005240 <GetMilSecTick>
 8002a06:	4603      	mov	r3, r0
 8002a08:	4a46      	ldr	r2, [pc, #280]	; (8002b24 <GetEventButton+0x678>)
 8002a0a:	6093      	str	r3, [r2, #8]
						button4.byPressCnt++;
 8002a0c:	4b45      	ldr	r3, [pc, #276]	; (8002b24 <GetEventButton+0x678>)
 8002a0e:	785b      	ldrb	r3, [r3, #1]
 8002a10:	3301      	adds	r3, #1
 8002a12:	b2da      	uxtb	r2, r3
 8002a14:	4b43      	ldr	r3, [pc, #268]	; (8002b24 <GetEventButton+0x678>)
 8002a16:	705a      	strb	r2, [r3, #1]
						button4.byFlagBtn1Press = 1;
 8002a18:	4b42      	ldr	r3, [pc, #264]	; (8002b24 <GetEventButton+0x678>)
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	709a      	strb	r2, [r3, #2]
					}

				}
				//Khi nut nhan ko duoc nhan
				if(BTN4_GET!=0)
 8002a1e:	2101      	movs	r1, #1
 8002a20:	4841      	ldr	r0, [pc, #260]	; (8002b28 <GetEventButton+0x67c>)
 8002a22:	f7fd fde4 	bl	80005ee <GPIO_ReadInputDataBit>
 8002a26:	4603      	mov	r3, r0
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d00f      	beq.n	8002a4c <GetEventButton+0x5a0>
				{
					if((button4.byFlagBtn1Released == 0)&&(button4.byFlagBtn1Press == 1))
 8002a2c:	4b3d      	ldr	r3, [pc, #244]	; (8002b24 <GetEventButton+0x678>)
 8002a2e:	78db      	ldrb	r3, [r3, #3]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d10b      	bne.n	8002a4c <GetEventButton+0x5a0>
 8002a34:	4b3b      	ldr	r3, [pc, #236]	; (8002b24 <GetEventButton+0x678>)
 8002a36:	789b      	ldrb	r3, [r3, #2]
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d107      	bne.n	8002a4c <GetEventButton+0x5a0>
					{
						button4.dwTimeCurrent = GetMilSecTick();
 8002a3c:	f002 fc00 	bl	8005240 <GetMilSecTick>
 8002a40:	4603      	mov	r3, r0
 8002a42:	4a38      	ldr	r2, [pc, #224]	; (8002b24 <GetEventButton+0x678>)
 8002a44:	60d3      	str	r3, [r2, #12]
						button4.byFlagBtn1Released = 1;
 8002a46:	4b37      	ldr	r3, [pc, #220]	; (8002b24 <GetEventButton+0x678>)
 8002a48:	2201      	movs	r2, #1
 8002a4a:	70da      	strb	r2, [r3, #3]
					}

				}

				//Xu ly khi nhan giu
				if((button4.byFlagBtn1Press == 1 )&&(button4.byFlagBtn1Released == 0))
 8002a4c:	4b35      	ldr	r3, [pc, #212]	; (8002b24 <GetEventButton+0x678>)
 8002a4e:	789b      	ldrb	r3, [r3, #2]
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	d117      	bne.n	8002a84 <GetEventButton+0x5d8>
 8002a54:	4b33      	ldr	r3, [pc, #204]	; (8002b24 <GetEventButton+0x678>)
 8002a56:	78db      	ldrb	r3, [r3, #3]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d113      	bne.n	8002a84 <GetEventButton+0x5d8>
				{
					dwDeltaTime = dwCalculatorTime(button4.dwTimeInit,dwTimeNow);
 8002a5c:	4b31      	ldr	r3, [pc, #196]	; (8002b24 <GetEventButton+0x678>)
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	6839      	ldr	r1, [r7, #0]
 8002a62:	4618      	mov	r0, r3
 8002a64:	f7ff fc2e 	bl	80022c4 <dwCalculatorTime>
 8002a68:	6078      	str	r0, [r7, #4]
					if(dwDeltaTime>BUTTON_LONG_PRESS_TIME)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002a70:	d908      	bls.n	8002a84 <GetEventButton+0x5d8>
					{
						button4.buttonEven = EVENT_OF_BUTTON_HOLD_500MS;
 8002a72:	4b2c      	ldr	r3, [pc, #176]	; (8002b24 <GetEventButton+0x678>)
 8002a74:	2204      	movs	r2, #4
 8002a76:	701a      	strb	r2, [r3, #0]
						button4.byFlagBtn1Hold = 1;
 8002a78:	4b2a      	ldr	r3, [pc, #168]	; (8002b24 <GetEventButton+0x678>)
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	711a      	strb	r2, [r3, #4]
						button4.byPressCnt = 0;
 8002a7e:	4b29      	ldr	r3, [pc, #164]	; (8002b24 <GetEventButton+0x678>)
 8002a80:	2200      	movs	r2, #0
 8002a82:	705a      	strb	r2, [r3, #1]
					}
				}
				//Xu ly khi nhan/nha

				if((button4.byFlagBtn1Press == 1)&&(button4.byFlagBtn1Released == 1))
 8002a84:	4b27      	ldr	r3, [pc, #156]	; (8002b24 <GetEventButton+0x678>)
 8002a86:	789b      	ldrb	r3, [r3, #2]
 8002a88:	2b01      	cmp	r3, #1
 8002a8a:	d164      	bne.n	8002b56 <GetEventButton+0x6aa>
 8002a8c:	4b25      	ldr	r3, [pc, #148]	; (8002b24 <GetEventButton+0x678>)
 8002a8e:	78db      	ldrb	r3, [r3, #3]
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d160      	bne.n	8002b56 <GetEventButton+0x6aa>
				{
					if(button4.byFlagBtn1Hold == 1)
 8002a94:	4b23      	ldr	r3, [pc, #140]	; (8002b24 <GetEventButton+0x678>)
 8002a96:	791b      	ldrb	r3, [r3, #4]
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d10c      	bne.n	8002ab6 <GetEventButton+0x60a>
					{
						button4.buttonEven = EVENT_OF_BUTTON_NOCLICK;
 8002a9c:	4b21      	ldr	r3, [pc, #132]	; (8002b24 <GetEventButton+0x678>)
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	701a      	strb	r2, [r3, #0]
						button4.byFlagBtn1Press = 0;
 8002aa2:	4b20      	ldr	r3, [pc, #128]	; (8002b24 <GetEventButton+0x678>)
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	709a      	strb	r2, [r3, #2]
						button4.byFlagBtn1Released = 0;
 8002aa8:	4b1e      	ldr	r3, [pc, #120]	; (8002b24 <GetEventButton+0x678>)
 8002aaa:	2200      	movs	r2, #0
 8002aac:	70da      	strb	r2, [r3, #3]
						button4.byFlagBtn1Hold = 0;
 8002aae:	4b1d      	ldr	r3, [pc, #116]	; (8002b24 <GetEventButton+0x678>)
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	711a      	strb	r2, [r3, #4]
 8002ab4:	e04f      	b.n	8002b56 <GetEventButton+0x6aa>
					}else
					{
						dwDeltaTime = dwCalculatorTime(button4.dwTimeInit, button4.dwTimeCurrent);
 8002ab6:	4b1b      	ldr	r3, [pc, #108]	; (8002b24 <GetEventButton+0x678>)
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	4a1a      	ldr	r2, [pc, #104]	; (8002b24 <GetEventButton+0x678>)
 8002abc:	68d2      	ldr	r2, [r2, #12]
 8002abe:	4611      	mov	r1, r2
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f7ff fbff 	bl	80022c4 <dwCalculatorTime>
 8002ac6:	6078      	str	r0, [r7, #4]
						if((dwDeltaTime > BUTTON_NORMAL_PRESS_TIME)&&(dwDeltaTime < BUTTON_LONG_PRESS_TIME))
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2b3c      	cmp	r3, #60	; 0x3c
 8002acc:	d92e      	bls.n	8002b2c <GetEventButton+0x680>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ad4:	d22a      	bcs.n	8002b2c <GetEventButton+0x680>
						{
								dwDeltaTime = dwCalculatorTime(button4.dwTimeCurrent, dwTimeNow);
 8002ad6:	4b13      	ldr	r3, [pc, #76]	; (8002b24 <GetEventButton+0x678>)
 8002ad8:	68db      	ldr	r3, [r3, #12]
 8002ada:	6839      	ldr	r1, [r7, #0]
 8002adc:	4618      	mov	r0, r3
 8002ade:	f7ff fbf1 	bl	80022c4 <dwCalculatorTime>
 8002ae2:	6078      	str	r0, [r7, #4]
							if(dwDeltaTime < BW2PRESS_TIME)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8002aea:	d206      	bcs.n	8002afa <GetEventButton+0x64e>
							{
								button4.byFlagBtn1Released = 0;
 8002aec:	4b0d      	ldr	r3, [pc, #52]	; (8002b24 <GetEventButton+0x678>)
 8002aee:	2200      	movs	r2, #0
 8002af0:	70da      	strb	r2, [r3, #3]
								button4.byFlagBtn1Press = 0;
 8002af2:	4b0c      	ldr	r3, [pc, #48]	; (8002b24 <GetEventButton+0x678>)
 8002af4:	2200      	movs	r2, #0
 8002af6:	709a      	strb	r2, [r3, #2]
							if(dwDeltaTime < BW2PRESS_TIME)
 8002af8:	e02d      	b.n	8002b56 <GetEventButton+0x6aa>
							}else
							{
								button4.buttonEven = checkEventButton(button4.byPressCnt);
 8002afa:	4b0a      	ldr	r3, [pc, #40]	; (8002b24 <GetEventButton+0x678>)
 8002afc:	785b      	ldrb	r3, [r3, #1]
 8002afe:	4618      	mov	r0, r3
 8002b00:	f000 f928 	bl	8002d54 <checkEventButton>
 8002b04:	4603      	mov	r3, r0
 8002b06:	461a      	mov	r2, r3
 8002b08:	4b06      	ldr	r3, [pc, #24]	; (8002b24 <GetEventButton+0x678>)
 8002b0a:	701a      	strb	r2, [r3, #0]
								button4.byPressCnt = 0;
 8002b0c:	4b05      	ldr	r3, [pc, #20]	; (8002b24 <GetEventButton+0x678>)
 8002b0e:	2200      	movs	r2, #0
 8002b10:	705a      	strb	r2, [r3, #1]
								button4.byFlagBtn1Press = 0;
 8002b12:	4b04      	ldr	r3, [pc, #16]	; (8002b24 <GetEventButton+0x678>)
 8002b14:	2200      	movs	r2, #0
 8002b16:	709a      	strb	r2, [r3, #2]
								button4.byFlagBtn1Released = 0;
 8002b18:	4b02      	ldr	r3, [pc, #8]	; (8002b24 <GetEventButton+0x678>)
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	70da      	strb	r2, [r3, #3]
							if(dwDeltaTime < BW2PRESS_TIME)
 8002b1e:	e01a      	b.n	8002b56 <GetEventButton+0x6aa>
 8002b20:	200000c0 	.word	0x200000c0
 8002b24:	200000d0 	.word	0x200000d0
 8002b28:	40020800 	.word	0x40020800
							}
						}
						else if(dwDeltaTime < BUTTON_NORMAL_PRESS_TIME)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2b3b      	cmp	r3, #59	; 0x3b
 8002b30:	d811      	bhi.n	8002b56 <GetEventButton+0x6aa>
						{
							button4.buttonEven = checkEventButton(button4.byPressCnt);
 8002b32:	4b85      	ldr	r3, [pc, #532]	; (8002d48 <GetEventButton+0x89c>)
 8002b34:	785b      	ldrb	r3, [r3, #1]
 8002b36:	4618      	mov	r0, r3
 8002b38:	f000 f90c 	bl	8002d54 <checkEventButton>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	461a      	mov	r2, r3
 8002b40:	4b81      	ldr	r3, [pc, #516]	; (8002d48 <GetEventButton+0x89c>)
 8002b42:	701a      	strb	r2, [r3, #0]
							button4.byPressCnt = 0;
 8002b44:	4b80      	ldr	r3, [pc, #512]	; (8002d48 <GetEventButton+0x89c>)
 8002b46:	2200      	movs	r2, #0
 8002b48:	705a      	strb	r2, [r3, #1]
							button4.byFlagBtn1Press = 0;
 8002b4a:	4b7f      	ldr	r3, [pc, #508]	; (8002d48 <GetEventButton+0x89c>)
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	709a      	strb	r2, [r3, #2]
							button4.byFlagBtn1Released = 0;
 8002b50:	4b7d      	ldr	r3, [pc, #500]	; (8002d48 <GetEventButton+0x89c>)
 8002b52:	2200      	movs	r2, #0
 8002b54:	70da      	strb	r2, [r3, #3]
						}
					}
				}

				if((button4.byFlagBtn1Hold == 0)&&(button4.byFlagBtn1Press == 0))
 8002b56:	4b7c      	ldr	r3, [pc, #496]	; (8002d48 <GetEventButton+0x89c>)
 8002b58:	791b      	ldrb	r3, [r3, #4]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d11a      	bne.n	8002b94 <GetEventButton+0x6e8>
 8002b5e:	4b7a      	ldr	r3, [pc, #488]	; (8002d48 <GetEventButton+0x89c>)
 8002b60:	789b      	ldrb	r3, [r3, #2]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d116      	bne.n	8002b94 <GetEventButton+0x6e8>
				{
					dwDeltaTime = dwCalculatorTime(button4.dwTimeCurrent, dwTimeNow);
 8002b66:	4b78      	ldr	r3, [pc, #480]	; (8002d48 <GetEventButton+0x89c>)
 8002b68:	68db      	ldr	r3, [r3, #12]
 8002b6a:	6839      	ldr	r1, [r7, #0]
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f7ff fba9 	bl	80022c4 <dwCalculatorTime>
 8002b72:	6078      	str	r0, [r7, #4]
					if(dwDeltaTime > BW2PRESS_TIME)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8002b7a:	d90b      	bls.n	8002b94 <GetEventButton+0x6e8>
					{
						button4.buttonEven = checkEventButton(button4.byPressCnt);
 8002b7c:	4b72      	ldr	r3, [pc, #456]	; (8002d48 <GetEventButton+0x89c>)
 8002b7e:	785b      	ldrb	r3, [r3, #1]
 8002b80:	4618      	mov	r0, r3
 8002b82:	f000 f8e7 	bl	8002d54 <checkEventButton>
 8002b86:	4603      	mov	r3, r0
 8002b88:	461a      	mov	r2, r3
 8002b8a:	4b6f      	ldr	r3, [pc, #444]	; (8002d48 <GetEventButton+0x89c>)
 8002b8c:	701a      	strb	r2, [r3, #0]
						button4.byPressCnt = 0;
 8002b8e:	4b6e      	ldr	r3, [pc, #440]	; (8002d48 <GetEventButton+0x89c>)
 8002b90:	2200      	movs	r2, #0
 8002b92:	705a      	strb	r2, [r3, #1]
					}
				}

		}
		dwTimeNow = GetMilSecTick();
 8002b94:	f002 fb54 	bl	8005240 <GetMilSecTick>
 8002b98:	6038      	str	r0, [r7, #0]
		if(button5.buttonEven ==EVENT_OF_BUTTON_NOCLICK)
 8002b9a:	4b6c      	ldr	r3, [pc, #432]	; (8002d4c <GetEventButton+0x8a0>)
 8002b9c:	781b      	ldrb	r3, [r3, #0]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	f040 80ce 	bne.w	8002d40 <GetEventButton+0x894>
		{
			//Khi nut nhan duoc nhan
				if(BTN5_GET == 0)
 8002ba4:	2120      	movs	r1, #32
 8002ba6:	486a      	ldr	r0, [pc, #424]	; (8002d50 <GetEventButton+0x8a4>)
 8002ba8:	f7fd fd21 	bl	80005ee <GPIO_ReadInputDataBit>
 8002bac:	4603      	mov	r3, r0
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d111      	bne.n	8002bd6 <GetEventButton+0x72a>
				{
					if(button5.byFlagBtn1Press == 0)
 8002bb2:	4b66      	ldr	r3, [pc, #408]	; (8002d4c <GetEventButton+0x8a0>)
 8002bb4:	789b      	ldrb	r3, [r3, #2]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d10d      	bne.n	8002bd6 <GetEventButton+0x72a>
					{
						button5.dwTimeInit = GetMilSecTick();
 8002bba:	f002 fb41 	bl	8005240 <GetMilSecTick>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	4a62      	ldr	r2, [pc, #392]	; (8002d4c <GetEventButton+0x8a0>)
 8002bc2:	6093      	str	r3, [r2, #8]
						button5.byPressCnt++;
 8002bc4:	4b61      	ldr	r3, [pc, #388]	; (8002d4c <GetEventButton+0x8a0>)
 8002bc6:	785b      	ldrb	r3, [r3, #1]
 8002bc8:	3301      	adds	r3, #1
 8002bca:	b2da      	uxtb	r2, r3
 8002bcc:	4b5f      	ldr	r3, [pc, #380]	; (8002d4c <GetEventButton+0x8a0>)
 8002bce:	705a      	strb	r2, [r3, #1]
						button5.byFlagBtn1Press = 1;
 8002bd0:	4b5e      	ldr	r3, [pc, #376]	; (8002d4c <GetEventButton+0x8a0>)
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	709a      	strb	r2, [r3, #2]
					}

				}
				//Khi nut nhan ko duoc nhan
				if(BTN5_GET!=0)
 8002bd6:	2120      	movs	r1, #32
 8002bd8:	485d      	ldr	r0, [pc, #372]	; (8002d50 <GetEventButton+0x8a4>)
 8002bda:	f7fd fd08 	bl	80005ee <GPIO_ReadInputDataBit>
 8002bde:	4603      	mov	r3, r0
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d00f      	beq.n	8002c04 <GetEventButton+0x758>
				{
					if((button5.byFlagBtn1Released == 0)&&(button5.byFlagBtn1Press == 1))
 8002be4:	4b59      	ldr	r3, [pc, #356]	; (8002d4c <GetEventButton+0x8a0>)
 8002be6:	78db      	ldrb	r3, [r3, #3]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d10b      	bne.n	8002c04 <GetEventButton+0x758>
 8002bec:	4b57      	ldr	r3, [pc, #348]	; (8002d4c <GetEventButton+0x8a0>)
 8002bee:	789b      	ldrb	r3, [r3, #2]
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	d107      	bne.n	8002c04 <GetEventButton+0x758>
					{
						button5.dwTimeCurrent = GetMilSecTick();
 8002bf4:	f002 fb24 	bl	8005240 <GetMilSecTick>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	4a54      	ldr	r2, [pc, #336]	; (8002d4c <GetEventButton+0x8a0>)
 8002bfc:	60d3      	str	r3, [r2, #12]
						button5.byFlagBtn1Released = 1;
 8002bfe:	4b53      	ldr	r3, [pc, #332]	; (8002d4c <GetEventButton+0x8a0>)
 8002c00:	2201      	movs	r2, #1
 8002c02:	70da      	strb	r2, [r3, #3]
					}

				}

				//Xu ly khi nhan giu
				if((button5.byFlagBtn1Press == 1 )&&(button5.byFlagBtn1Released == 0))
 8002c04:	4b51      	ldr	r3, [pc, #324]	; (8002d4c <GetEventButton+0x8a0>)
 8002c06:	789b      	ldrb	r3, [r3, #2]
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d117      	bne.n	8002c3c <GetEventButton+0x790>
 8002c0c:	4b4f      	ldr	r3, [pc, #316]	; (8002d4c <GetEventButton+0x8a0>)
 8002c0e:	78db      	ldrb	r3, [r3, #3]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d113      	bne.n	8002c3c <GetEventButton+0x790>
				{
					dwDeltaTime = dwCalculatorTime(button5.dwTimeInit,dwTimeNow);
 8002c14:	4b4d      	ldr	r3, [pc, #308]	; (8002d4c <GetEventButton+0x8a0>)
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	6839      	ldr	r1, [r7, #0]
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f7ff fb52 	bl	80022c4 <dwCalculatorTime>
 8002c20:	6078      	str	r0, [r7, #4]
					if(dwDeltaTime>BUTTON_LONG_PRESS_TIME)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002c28:	d908      	bls.n	8002c3c <GetEventButton+0x790>
					{
						button5.buttonEven = EVENT_OF_BUTTON_HOLD_500MS;
 8002c2a:	4b48      	ldr	r3, [pc, #288]	; (8002d4c <GetEventButton+0x8a0>)
 8002c2c:	2204      	movs	r2, #4
 8002c2e:	701a      	strb	r2, [r3, #0]
						button5.byFlagBtn1Hold = 1;
 8002c30:	4b46      	ldr	r3, [pc, #280]	; (8002d4c <GetEventButton+0x8a0>)
 8002c32:	2201      	movs	r2, #1
 8002c34:	711a      	strb	r2, [r3, #4]
						button5.byPressCnt = 0;
 8002c36:	4b45      	ldr	r3, [pc, #276]	; (8002d4c <GetEventButton+0x8a0>)
 8002c38:	2200      	movs	r2, #0
 8002c3a:	705a      	strb	r2, [r3, #1]
					}
				}
				//Xu ly khi nhan/nha

				if((button5.byFlagBtn1Press == 1)&&(button5.byFlagBtn1Released == 1))
 8002c3c:	4b43      	ldr	r3, [pc, #268]	; (8002d4c <GetEventButton+0x8a0>)
 8002c3e:	789b      	ldrb	r3, [r3, #2]
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d15e      	bne.n	8002d02 <GetEventButton+0x856>
 8002c44:	4b41      	ldr	r3, [pc, #260]	; (8002d4c <GetEventButton+0x8a0>)
 8002c46:	78db      	ldrb	r3, [r3, #3]
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d15a      	bne.n	8002d02 <GetEventButton+0x856>
				{
					if(button5.byFlagBtn1Hold == 1)
 8002c4c:	4b3f      	ldr	r3, [pc, #252]	; (8002d4c <GetEventButton+0x8a0>)
 8002c4e:	791b      	ldrb	r3, [r3, #4]
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d10c      	bne.n	8002c6e <GetEventButton+0x7c2>
					{
						button5.buttonEven = EVENT_OF_BUTTON_NOCLICK;
 8002c54:	4b3d      	ldr	r3, [pc, #244]	; (8002d4c <GetEventButton+0x8a0>)
 8002c56:	2200      	movs	r2, #0
 8002c58:	701a      	strb	r2, [r3, #0]
						button5.byFlagBtn1Press = 0;
 8002c5a:	4b3c      	ldr	r3, [pc, #240]	; (8002d4c <GetEventButton+0x8a0>)
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	709a      	strb	r2, [r3, #2]
						button5.byFlagBtn1Released = 0;
 8002c60:	4b3a      	ldr	r3, [pc, #232]	; (8002d4c <GetEventButton+0x8a0>)
 8002c62:	2200      	movs	r2, #0
 8002c64:	70da      	strb	r2, [r3, #3]
						button5.byFlagBtn1Hold = 0;
 8002c66:	4b39      	ldr	r3, [pc, #228]	; (8002d4c <GetEventButton+0x8a0>)
 8002c68:	2200      	movs	r2, #0
 8002c6a:	711a      	strb	r2, [r3, #4]
 8002c6c:	e049      	b.n	8002d02 <GetEventButton+0x856>
					}else
					{
						dwDeltaTime = dwCalculatorTime(button5.dwTimeInit, button5.dwTimeCurrent);
 8002c6e:	4b37      	ldr	r3, [pc, #220]	; (8002d4c <GetEventButton+0x8a0>)
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	4a36      	ldr	r2, [pc, #216]	; (8002d4c <GetEventButton+0x8a0>)
 8002c74:	68d2      	ldr	r2, [r2, #12]
 8002c76:	4611      	mov	r1, r2
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f7ff fb23 	bl	80022c4 <dwCalculatorTime>
 8002c7e:	6078      	str	r0, [r7, #4]
						if((dwDeltaTime > BUTTON_NORMAL_PRESS_TIME)&&(dwDeltaTime < BUTTON_LONG_PRESS_TIME))
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2b3c      	cmp	r3, #60	; 0x3c
 8002c84:	d928      	bls.n	8002cd8 <GetEventButton+0x82c>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002c8c:	d224      	bcs.n	8002cd8 <GetEventButton+0x82c>
						{
								dwDeltaTime = dwCalculatorTime(button5.dwTimeCurrent, dwTimeNow);
 8002c8e:	4b2f      	ldr	r3, [pc, #188]	; (8002d4c <GetEventButton+0x8a0>)
 8002c90:	68db      	ldr	r3, [r3, #12]
 8002c92:	6839      	ldr	r1, [r7, #0]
 8002c94:	4618      	mov	r0, r3
 8002c96:	f7ff fb15 	bl	80022c4 <dwCalculatorTime>
 8002c9a:	6078      	str	r0, [r7, #4]
							if(dwDeltaTime < BW2PRESS_TIME)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8002ca2:	d206      	bcs.n	8002cb2 <GetEventButton+0x806>
							{
								button5.byFlagBtn1Released = 0;
 8002ca4:	4b29      	ldr	r3, [pc, #164]	; (8002d4c <GetEventButton+0x8a0>)
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	70da      	strb	r2, [r3, #3]
								button5.byFlagBtn1Press = 0;
 8002caa:	4b28      	ldr	r3, [pc, #160]	; (8002d4c <GetEventButton+0x8a0>)
 8002cac:	2200      	movs	r2, #0
 8002cae:	709a      	strb	r2, [r3, #2]
							if(dwDeltaTime < BW2PRESS_TIME)
 8002cb0:	e027      	b.n	8002d02 <GetEventButton+0x856>
							}else
							{
								button5.buttonEven = checkEventButton(button5.byPressCnt);
 8002cb2:	4b26      	ldr	r3, [pc, #152]	; (8002d4c <GetEventButton+0x8a0>)
 8002cb4:	785b      	ldrb	r3, [r3, #1]
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f000 f84c 	bl	8002d54 <checkEventButton>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	461a      	mov	r2, r3
 8002cc0:	4b22      	ldr	r3, [pc, #136]	; (8002d4c <GetEventButton+0x8a0>)
 8002cc2:	701a      	strb	r2, [r3, #0]
								button5.byPressCnt = 0;
 8002cc4:	4b21      	ldr	r3, [pc, #132]	; (8002d4c <GetEventButton+0x8a0>)
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	705a      	strb	r2, [r3, #1]
								button5.byFlagBtn1Press = 0;
 8002cca:	4b20      	ldr	r3, [pc, #128]	; (8002d4c <GetEventButton+0x8a0>)
 8002ccc:	2200      	movs	r2, #0
 8002cce:	709a      	strb	r2, [r3, #2]
								button5.byFlagBtn1Released = 0;
 8002cd0:	4b1e      	ldr	r3, [pc, #120]	; (8002d4c <GetEventButton+0x8a0>)
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	70da      	strb	r2, [r3, #3]
							if(dwDeltaTime < BW2PRESS_TIME)
 8002cd6:	e014      	b.n	8002d02 <GetEventButton+0x856>
							}
						}
						else if(dwDeltaTime < BUTTON_NORMAL_PRESS_TIME)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2b3b      	cmp	r3, #59	; 0x3b
 8002cdc:	d811      	bhi.n	8002d02 <GetEventButton+0x856>
						{
							button5.buttonEven = checkEventButton(button5.byPressCnt);
 8002cde:	4b1b      	ldr	r3, [pc, #108]	; (8002d4c <GetEventButton+0x8a0>)
 8002ce0:	785b      	ldrb	r3, [r3, #1]
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f000 f836 	bl	8002d54 <checkEventButton>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	461a      	mov	r2, r3
 8002cec:	4b17      	ldr	r3, [pc, #92]	; (8002d4c <GetEventButton+0x8a0>)
 8002cee:	701a      	strb	r2, [r3, #0]
							button5.byPressCnt = 0;
 8002cf0:	4b16      	ldr	r3, [pc, #88]	; (8002d4c <GetEventButton+0x8a0>)
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	705a      	strb	r2, [r3, #1]
							button5.byFlagBtn1Press = 0;
 8002cf6:	4b15      	ldr	r3, [pc, #84]	; (8002d4c <GetEventButton+0x8a0>)
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	709a      	strb	r2, [r3, #2]
							button5.byFlagBtn1Released = 0;
 8002cfc:	4b13      	ldr	r3, [pc, #76]	; (8002d4c <GetEventButton+0x8a0>)
 8002cfe:	2200      	movs	r2, #0
 8002d00:	70da      	strb	r2, [r3, #3]
						}
					}
				}

				if((button5.byFlagBtn1Hold == 0)&&(button5.byFlagBtn1Press == 0))
 8002d02:	4b12      	ldr	r3, [pc, #72]	; (8002d4c <GetEventButton+0x8a0>)
 8002d04:	791b      	ldrb	r3, [r3, #4]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d11a      	bne.n	8002d40 <GetEventButton+0x894>
 8002d0a:	4b10      	ldr	r3, [pc, #64]	; (8002d4c <GetEventButton+0x8a0>)
 8002d0c:	789b      	ldrb	r3, [r3, #2]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d116      	bne.n	8002d40 <GetEventButton+0x894>
				{
					dwDeltaTime = dwCalculatorTime(button5.dwTimeCurrent, dwTimeNow);
 8002d12:	4b0e      	ldr	r3, [pc, #56]	; (8002d4c <GetEventButton+0x8a0>)
 8002d14:	68db      	ldr	r3, [r3, #12]
 8002d16:	6839      	ldr	r1, [r7, #0]
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f7ff fad3 	bl	80022c4 <dwCalculatorTime>
 8002d1e:	6078      	str	r0, [r7, #4]
					if(dwDeltaTime > BW2PRESS_TIME)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8002d26:	d90b      	bls.n	8002d40 <GetEventButton+0x894>
					{
						button5.buttonEven = checkEventButton(button5.byPressCnt);
 8002d28:	4b08      	ldr	r3, [pc, #32]	; (8002d4c <GetEventButton+0x8a0>)
 8002d2a:	785b      	ldrb	r3, [r3, #1]
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f000 f811 	bl	8002d54 <checkEventButton>
 8002d32:	4603      	mov	r3, r0
 8002d34:	461a      	mov	r2, r3
 8002d36:	4b05      	ldr	r3, [pc, #20]	; (8002d4c <GetEventButton+0x8a0>)
 8002d38:	701a      	strb	r2, [r3, #0]
						button5.byPressCnt = 0;
 8002d3a:	4b04      	ldr	r3, [pc, #16]	; (8002d4c <GetEventButton+0x8a0>)
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	705a      	strb	r2, [r3, #1]
					}
				}

		}

}
 8002d40:	bf00      	nop
 8002d42:	3708      	adds	r7, #8
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}
 8002d48:	200000d0 	.word	0x200000d0
 8002d4c:	200000e0 	.word	0x200000e0
 8002d50:	40020000 	.word	0x40020000

08002d54 <checkEventButton>:

static EventButton_e checkEventButton(u8 pressCnt)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b085      	sub	sp, #20
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	71fb      	strb	r3, [r7, #7]
	EventButton_e event;
	switch(pressCnt)
 8002d5e:	79fb      	ldrb	r3, [r7, #7]
 8002d60:	2b03      	cmp	r3, #3
 8002d62:	d00c      	beq.n	8002d7e <checkEventButton+0x2a>
 8002d64:	2b03      	cmp	r3, #3
 8002d66:	dc0d      	bgt.n	8002d84 <checkEventButton+0x30>
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d002      	beq.n	8002d72 <checkEventButton+0x1e>
 8002d6c:	2b02      	cmp	r3, #2
 8002d6e:	d003      	beq.n	8002d78 <checkEventButton+0x24>
 8002d70:	e008      	b.n	8002d84 <checkEventButton+0x30>
	{
	case 1:
		event = EVENT_OF_BUTTON_PRESS_1_TIMES;
 8002d72:	2301      	movs	r3, #1
 8002d74:	73fb      	strb	r3, [r7, #15]
		break;
 8002d76:	e008      	b.n	8002d8a <checkEventButton+0x36>
	case 2:
		event = EVENT_OF_BUTTON_PRESS_2_TIMES;
 8002d78:	2302      	movs	r3, #2
 8002d7a:	73fb      	strb	r3, [r7, #15]
		break;
 8002d7c:	e005      	b.n	8002d8a <checkEventButton+0x36>
	case 3:
		event = EVENT_OF_BUTTON_PRESS_3_TIMES;
 8002d7e:	2303      	movs	r3, #3
 8002d80:	73fb      	strb	r3, [r7, #15]
		break;
 8002d82:	e002      	b.n	8002d8a <checkEventButton+0x36>
	default:
		event = EVENT_OF_BUTTON_NOCLICK;
 8002d84:	2300      	movs	r3, #0
 8002d86:	73fb      	strb	r3, [r7, #15]
		break;
 8002d88:	bf00      	nop
	}
	return event;
 8002d8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	3714      	adds	r7, #20
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr

08002d98 <getModeTest>:

/******************************************************************************/
/*                            EXPORTED FUNCTIONS                              */
/******************************************************************************/
TestSwMode_e getModeTest(void)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b082      	sub	sp, #8
 8002d9c:	af00      	add	r7, sp, #0
	TestSwMode_e modeTemp;
	uint8_t byChooseRow = 0;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	71bb      	strb	r3, [r7, #6]
	while(byChooseRow == 0)
 8002da2:	e007      	b.n	8002db4 <getModeTest+0x1c>
	{
		byChooseRow = getChooseRows(3, 20, pMenuMain, 16);
 8002da4:	2310      	movs	r3, #16
 8002da6:	4a14      	ldr	r2, [pc, #80]	; (8002df8 <getModeTest+0x60>)
 8002da8:	2114      	movs	r1, #20
 8002daa:	2003      	movs	r0, #3
 8002dac:	f000 f826 	bl	8002dfc <getChooseRows>
 8002db0:	4603      	mov	r3, r0
 8002db2:	71bb      	strb	r3, [r7, #6]
	while(byChooseRow == 0)
 8002db4:	79bb      	ldrb	r3, [r7, #6]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d0f4      	beq.n	8002da4 <getModeTest+0xc>
	}

	//lcdPrintText(pMenuMain[byChooseRow], 0, 15, ucg_font_10x20_mr);
	switch(byChooseRow)
 8002dba:	79bb      	ldrb	r3, [r7, #6]
 8002dbc:	2b03      	cmp	r3, #3
 8002dbe:	d010      	beq.n	8002de2 <getModeTest+0x4a>
 8002dc0:	2b03      	cmp	r3, #3
 8002dc2:	dc13      	bgt.n	8002dec <getModeTest+0x54>
 8002dc4:	2b01      	cmp	r3, #1
 8002dc6:	d002      	beq.n	8002dce <getModeTest+0x36>
 8002dc8:	2b02      	cmp	r3, #2
 8002dca:	d005      	beq.n	8002dd8 <getModeTest+0x40>
	case 3:
		byChooseRow = 0;
		modeTemp = BLE_MODE;
		break;
	default:
		break;
 8002dcc:	e00e      	b.n	8002dec <getModeTest+0x54>
		byChooseRow = 0;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	71bb      	strb	r3, [r7, #6]
		modeTemp = DUAL_MODE;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	71fb      	strb	r3, [r7, #7]
		break;
 8002dd6:	e00a      	b.n	8002dee <getModeTest+0x56>
		byChooseRow = 0;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	71bb      	strb	r3, [r7, #6]
		modeTemp = ZIGBEE_MODE;
 8002ddc:	2302      	movs	r3, #2
 8002dde:	71fb      	strb	r3, [r7, #7]
		break;
 8002de0:	e005      	b.n	8002dee <getModeTest+0x56>
		byChooseRow = 0;
 8002de2:	2300      	movs	r3, #0
 8002de4:	71bb      	strb	r3, [r7, #6]
		modeTemp = BLE_MODE;
 8002de6:	2303      	movs	r3, #3
 8002de8:	71fb      	strb	r3, [r7, #7]
		break;
 8002dea:	e000      	b.n	8002dee <getModeTest+0x56>
		break;
 8002dec:	bf00      	nop
	}
	return modeTemp;
 8002dee:	79fb      	ldrb	r3, [r7, #7]

}
 8002df0:	4618      	mov	r0, r3
 8002df2:	3708      	adds	r7, #8
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}
 8002df8:	20000024 	.word	0x20000024

08002dfc <getChooseRows>:
uint8_t getChooseRows(uint8_t byNumOfRows,\
				uint8_t bySizeOfRow,\
				char pStrInterface[][20],\
				uint8_t bySize)
{
 8002dfc:	b590      	push	{r4, r7, lr}
 8002dfe:	b089      	sub	sp, #36	; 0x24
 8002e00:	af04      	add	r7, sp, #16
 8002e02:	603a      	str	r2, [r7, #0]
 8002e04:	461a      	mov	r2, r3
 8002e06:	4603      	mov	r3, r0
 8002e08:	71fb      	strb	r3, [r7, #7]
 8002e0a:	460b      	mov	r3, r1
 8002e0c:	71bb      	strb	r3, [r7, #6]
 8002e0e:	4613      	mov	r3, r2
 8002e10:	717b      	strb	r3, [r7, #5]
	ValueKey_e key = NOKEY ;
 8002e12:	2300      	movs	r3, #0
 8002e14:	73fb      	strb	r3, [r7, #15]
	uint8_t byRow = 0;
 8002e16:	2300      	movs	r3, #0
 8002e18:	73bb      	strb	r3, [r7, #14]
	static uint8_t byRowTemp = 0;
	static uint8_t byFlag = 0;
	static u16 cursorOfOptionBox[10];
	cursorOfOptionBox[0] = 30;
 8002e1a:	4ba4      	ldr	r3, [pc, #656]	; (80030ac <getChooseRows+0x2b0>)
 8002e1c:	221e      	movs	r2, #30
 8002e1e:	801a      	strh	r2, [r3, #0]
	if(byFlag == 0)
 8002e20:	4ba3      	ldr	r3, [pc, #652]	; (80030b0 <getChooseRows+0x2b4>)
 8002e22:	781b      	ldrb	r3, [r3, #0]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d153      	bne.n	8002ed0 <getChooseRows+0xd4>
	{
		LCD_Clear(WHITE);
 8002e28:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002e2c:	f7fe fdd8 	bl	80019e0 <LCD_Clear>
		//Print Titel
		LCD_ShowTitle(bySizeOfRow, WHITE, BLUE, (u8*)pStrInterface[0], 16, 1);
 8002e30:	79bb      	ldrb	r3, [r7, #6]
 8002e32:	b298      	uxth	r0, r3
 8002e34:	2301      	movs	r3, #1
 8002e36:	9301      	str	r3, [sp, #4]
 8002e38:	2310      	movs	r3, #16
 8002e3a:	9300      	str	r3, [sp, #0]
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	221f      	movs	r2, #31
 8002e40:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002e44:	f7fe f868 	bl	8000f18 <LCD_ShowTitle>

		for(uint8_t i = 1;i<byNumOfRows+1;i++)
 8002e48:	2301      	movs	r3, #1
 8002e4a:	737b      	strb	r3, [r7, #13]
 8002e4c:	e020      	b.n	8002e90 <getChooseRows+0x94>
		{
			//print interface
			cursorOfOptionBox[i] = LCD_ShowOption(20, cursorOfOptionBox[i-1], BLACK, CYAN, (u8*)pStrInterface[i], 16, 1);
 8002e4e:	7b7b      	ldrb	r3, [r7, #13]
 8002e50:	3b01      	subs	r3, #1
 8002e52:	4a96      	ldr	r2, [pc, #600]	; (80030ac <getChooseRows+0x2b0>)
 8002e54:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8002e58:	7b7a      	ldrb	r2, [r7, #13]
 8002e5a:	4613      	mov	r3, r2
 8002e5c:	009b      	lsls	r3, r3, #2
 8002e5e:	4413      	add	r3, r2
 8002e60:	009b      	lsls	r3, r3, #2
 8002e62:	461a      	mov	r2, r3
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	4413      	add	r3, r2
 8002e68:	7b7c      	ldrb	r4, [r7, #13]
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	9202      	str	r2, [sp, #8]
 8002e6e:	2210      	movs	r2, #16
 8002e70:	9201      	str	r2, [sp, #4]
 8002e72:	9300      	str	r3, [sp, #0]
 8002e74:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8002e78:	2200      	movs	r2, #0
 8002e7a:	2014      	movs	r0, #20
 8002e7c:	f7fe f879 	bl	8000f72 <LCD_ShowOption>
 8002e80:	4603      	mov	r3, r0
 8002e82:	461a      	mov	r2, r3
 8002e84:	4b89      	ldr	r3, [pc, #548]	; (80030ac <getChooseRows+0x2b0>)
 8002e86:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
		for(uint8_t i = 1;i<byNumOfRows+1;i++)
 8002e8a:	7b7b      	ldrb	r3, [r7, #13]
 8002e8c:	3301      	adds	r3, #1
 8002e8e:	737b      	strb	r3, [r7, #13]
 8002e90:	79fa      	ldrb	r2, [r7, #7]
 8002e92:	7b7b      	ldrb	r3, [r7, #13]
 8002e94:	429a      	cmp	r2, r3
 8002e96:	d2da      	bcs.n	8002e4e <getChooseRows+0x52>
		}
		LCD_DrawRectangle(10,cursorOfOptionBox[byRowTemp],230,cursorOfOptionBox[byRowTemp]+bySizeOfRow);
 8002e98:	4b86      	ldr	r3, [pc, #536]	; (80030b4 <getChooseRows+0x2b8>)
 8002e9a:	781b      	ldrb	r3, [r3, #0]
 8002e9c:	461a      	mov	r2, r3
 8002e9e:	4b83      	ldr	r3, [pc, #524]	; (80030ac <getChooseRows+0x2b0>)
 8002ea0:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 8002ea4:	4b83      	ldr	r3, [pc, #524]	; (80030b4 <getChooseRows+0x2b8>)
 8002ea6:	781b      	ldrb	r3, [r3, #0]
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	4b80      	ldr	r3, [pc, #512]	; (80030ac <getChooseRows+0x2b0>)
 8002eac:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8002eb0:	79bb      	ldrb	r3, [r7, #6]
 8002eb2:	b29b      	uxth	r3, r3
 8002eb4:	4413      	add	r3, r2
 8002eb6:	b29b      	uxth	r3, r3
 8002eb8:	22e6      	movs	r2, #230	; 0xe6
 8002eba:	200a      	movs	r0, #10
 8002ebc:	f7fd fffe 	bl	8000ebc <LCD_DrawRectangle>
		byFlag = 1;
 8002ec0:	4b7b      	ldr	r3, [pc, #492]	; (80030b0 <getChooseRows+0x2b4>)
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	701a      	strb	r2, [r3, #0]
	}



	while(key == NOKEY)
 8002ec6:	e003      	b.n	8002ed0 <getChooseRows+0xd4>
	{
		key = processEventButton();
 8002ec8:	f7ff fa14 	bl	80022f4 <processEventButton>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	73fb      	strb	r3, [r7, #15]
	while(key == NOKEY)
 8002ed0:	7bfb      	ldrb	r3, [r7, #15]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d0f8      	beq.n	8002ec8 <getChooseRows+0xcc>
	}
	switch(key)
 8002ed6:	7bfb      	ldrb	r3, [r7, #15]
 8002ed8:	2b03      	cmp	r3, #3
 8002eda:	d057      	beq.n	8002f8c <getChooseRows+0x190>
 8002edc:	2b03      	cmp	r3, #3
 8002ede:	f300 80df 	bgt.w	80030a0 <getChooseRows+0x2a4>
 8002ee2:	2b01      	cmp	r3, #1
 8002ee4:	f000 80a6 	beq.w	8003034 <getChooseRows+0x238>
 8002ee8:	2b02      	cmp	r3, #2
 8002eea:	f040 80d9 	bne.w	80030a0 <getChooseRows+0x2a4>
	{
	case UP:
		byRowTemp--;
 8002eee:	4b71      	ldr	r3, [pc, #452]	; (80030b4 <getChooseRows+0x2b8>)
 8002ef0:	781b      	ldrb	r3, [r3, #0]
 8002ef2:	3b01      	subs	r3, #1
 8002ef4:	b2da      	uxtb	r2, r3
 8002ef6:	4b6f      	ldr	r3, [pc, #444]	; (80030b4 <getChooseRows+0x2b8>)
 8002ef8:	701a      	strb	r2, [r3, #0]
		if(byRowTemp == 255)
 8002efa:	4b6e      	ldr	r3, [pc, #440]	; (80030b4 <getChooseRows+0x2b8>)
 8002efc:	781b      	ldrb	r3, [r3, #0]
 8002efe:	2bff      	cmp	r3, #255	; 0xff
 8002f00:	d115      	bne.n	8002f2e <getChooseRows+0x132>
		{
			byRowTemp = byNumOfRows-1;
 8002f02:	79fb      	ldrb	r3, [r7, #7]
 8002f04:	3b01      	subs	r3, #1
 8002f06:	b2da      	uxtb	r2, r3
 8002f08:	4b6a      	ldr	r3, [pc, #424]	; (80030b4 <getChooseRows+0x2b8>)
 8002f0a:	701a      	strb	r2, [r3, #0]
			LCD_SetColorPoint(CYAN);
 8002f0c:	f647 70ff 	movw	r0, #32767	; 0x7fff
 8002f10:	f7fe fd3c 	bl	800198c <LCD_SetColorPoint>
			LCD_DrawRectangle(10,cursorOfOptionBox[0],230,cursorOfOptionBox[0]+bySizeOfRow);
 8002f14:	4b65      	ldr	r3, [pc, #404]	; (80030ac <getChooseRows+0x2b0>)
 8002f16:	8819      	ldrh	r1, [r3, #0]
 8002f18:	4b64      	ldr	r3, [pc, #400]	; (80030ac <getChooseRows+0x2b0>)
 8002f1a:	881a      	ldrh	r2, [r3, #0]
 8002f1c:	79bb      	ldrb	r3, [r7, #6]
 8002f1e:	b29b      	uxth	r3, r3
 8002f20:	4413      	add	r3, r2
 8002f22:	b29b      	uxth	r3, r3
 8002f24:	22e6      	movs	r2, #230	; 0xe6
 8002f26:	200a      	movs	r0, #10
 8002f28:	f7fd ffc8 	bl	8000ebc <LCD_DrawRectangle>
 8002f2c:	e017      	b.n	8002f5e <getChooseRows+0x162>
		}else
		{
			LCD_SetColorPoint(CYAN);
 8002f2e:	f647 70ff 	movw	r0, #32767	; 0x7fff
 8002f32:	f7fe fd2b 	bl	800198c <LCD_SetColorPoint>
			LCD_DrawRectangle(10,cursorOfOptionBox[byRowTemp+1],230,cursorOfOptionBox[byRowTemp+1]+bySizeOfRow);
 8002f36:	4b5f      	ldr	r3, [pc, #380]	; (80030b4 <getChooseRows+0x2b8>)
 8002f38:	781b      	ldrb	r3, [r3, #0]
 8002f3a:	3301      	adds	r3, #1
 8002f3c:	4a5b      	ldr	r2, [pc, #364]	; (80030ac <getChooseRows+0x2b0>)
 8002f3e:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8002f42:	4b5c      	ldr	r3, [pc, #368]	; (80030b4 <getChooseRows+0x2b8>)
 8002f44:	781b      	ldrb	r3, [r3, #0]
 8002f46:	3301      	adds	r3, #1
 8002f48:	4a58      	ldr	r2, [pc, #352]	; (80030ac <getChooseRows+0x2b0>)
 8002f4a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002f4e:	79bb      	ldrb	r3, [r7, #6]
 8002f50:	b29b      	uxth	r3, r3
 8002f52:	4413      	add	r3, r2
 8002f54:	b29b      	uxth	r3, r3
 8002f56:	22e6      	movs	r2, #230	; 0xe6
 8002f58:	200a      	movs	r0, #10
 8002f5a:	f7fd ffaf 	bl	8000ebc <LCD_DrawRectangle>
		}
		LCD_DrawRectangle(10,cursorOfOptionBox[byRowTemp],230,cursorOfOptionBox[byRowTemp]+bySizeOfRow);
 8002f5e:	4b55      	ldr	r3, [pc, #340]	; (80030b4 <getChooseRows+0x2b8>)
 8002f60:	781b      	ldrb	r3, [r3, #0]
 8002f62:	461a      	mov	r2, r3
 8002f64:	4b51      	ldr	r3, [pc, #324]	; (80030ac <getChooseRows+0x2b0>)
 8002f66:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 8002f6a:	4b52      	ldr	r3, [pc, #328]	; (80030b4 <getChooseRows+0x2b8>)
 8002f6c:	781b      	ldrb	r3, [r3, #0]
 8002f6e:	461a      	mov	r2, r3
 8002f70:	4b4e      	ldr	r3, [pc, #312]	; (80030ac <getChooseRows+0x2b0>)
 8002f72:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8002f76:	79bb      	ldrb	r3, [r7, #6]
 8002f78:	b29b      	uxth	r3, r3
 8002f7a:	4413      	add	r3, r2
 8002f7c:	b29b      	uxth	r3, r3
 8002f7e:	22e6      	movs	r2, #230	; 0xe6
 8002f80:	200a      	movs	r0, #10
 8002f82:	f7fd ff9b 	bl	8000ebc <LCD_DrawRectangle>
		key = NOKEY;
 8002f86:	2300      	movs	r3, #0
 8002f88:	73fb      	strb	r3, [r7, #15]
		break;
 8002f8a:	e08a      	b.n	80030a2 <getChooseRows+0x2a6>
	case DOWN:
		byRowTemp++;
 8002f8c:	4b49      	ldr	r3, [pc, #292]	; (80030b4 <getChooseRows+0x2b8>)
 8002f8e:	781b      	ldrb	r3, [r3, #0]
 8002f90:	3301      	adds	r3, #1
 8002f92:	b2da      	uxtb	r2, r3
 8002f94:	4b47      	ldr	r3, [pc, #284]	; (80030b4 <getChooseRows+0x2b8>)
 8002f96:	701a      	strb	r2, [r3, #0]
		if(byRowTemp == byNumOfRows)
 8002f98:	4b46      	ldr	r3, [pc, #280]	; (80030b4 <getChooseRows+0x2b8>)
 8002f9a:	781b      	ldrb	r3, [r3, #0]
 8002f9c:	79fa      	ldrb	r2, [r7, #7]
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	d119      	bne.n	8002fd6 <getChooseRows+0x1da>
		{
			byRowTemp = 0;
 8002fa2:	4b44      	ldr	r3, [pc, #272]	; (80030b4 <getChooseRows+0x2b8>)
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	701a      	strb	r2, [r3, #0]
			LCD_SetColorPoint(CYAN);
 8002fa8:	f647 70ff 	movw	r0, #32767	; 0x7fff
 8002fac:	f7fe fcee 	bl	800198c <LCD_SetColorPoint>
			LCD_DrawRectangle(10,cursorOfOptionBox[byNumOfRows-1],230,cursorOfOptionBox[byNumOfRows-1]+bySizeOfRow);
 8002fb0:	79fb      	ldrb	r3, [r7, #7]
 8002fb2:	3b01      	subs	r3, #1
 8002fb4:	4a3d      	ldr	r2, [pc, #244]	; (80030ac <getChooseRows+0x2b0>)
 8002fb6:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8002fba:	79fb      	ldrb	r3, [r7, #7]
 8002fbc:	3b01      	subs	r3, #1
 8002fbe:	4a3b      	ldr	r2, [pc, #236]	; (80030ac <getChooseRows+0x2b0>)
 8002fc0:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002fc4:	79bb      	ldrb	r3, [r7, #6]
 8002fc6:	b29b      	uxth	r3, r3
 8002fc8:	4413      	add	r3, r2
 8002fca:	b29b      	uxth	r3, r3
 8002fcc:	22e6      	movs	r2, #230	; 0xe6
 8002fce:	200a      	movs	r0, #10
 8002fd0:	f7fd ff74 	bl	8000ebc <LCD_DrawRectangle>
 8002fd4:	e017      	b.n	8003006 <getChooseRows+0x20a>
		}else
		{
			LCD_SetColorPoint(CYAN);
 8002fd6:	f647 70ff 	movw	r0, #32767	; 0x7fff
 8002fda:	f7fe fcd7 	bl	800198c <LCD_SetColorPoint>
			LCD_DrawRectangle(10,cursorOfOptionBox[byRowTemp-1],230,cursorOfOptionBox[byRowTemp-1]+bySizeOfRow);
 8002fde:	4b35      	ldr	r3, [pc, #212]	; (80030b4 <getChooseRows+0x2b8>)
 8002fe0:	781b      	ldrb	r3, [r3, #0]
 8002fe2:	3b01      	subs	r3, #1
 8002fe4:	4a31      	ldr	r2, [pc, #196]	; (80030ac <getChooseRows+0x2b0>)
 8002fe6:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8002fea:	4b32      	ldr	r3, [pc, #200]	; (80030b4 <getChooseRows+0x2b8>)
 8002fec:	781b      	ldrb	r3, [r3, #0]
 8002fee:	3b01      	subs	r3, #1
 8002ff0:	4a2e      	ldr	r2, [pc, #184]	; (80030ac <getChooseRows+0x2b0>)
 8002ff2:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002ff6:	79bb      	ldrb	r3, [r7, #6]
 8002ff8:	b29b      	uxth	r3, r3
 8002ffa:	4413      	add	r3, r2
 8002ffc:	b29b      	uxth	r3, r3
 8002ffe:	22e6      	movs	r2, #230	; 0xe6
 8003000:	200a      	movs	r0, #10
 8003002:	f7fd ff5b 	bl	8000ebc <LCD_DrawRectangle>
		}
		LCD_DrawRectangle(10,cursorOfOptionBox[byRowTemp],230,cursorOfOptionBox[byRowTemp]+bySizeOfRow);
 8003006:	4b2b      	ldr	r3, [pc, #172]	; (80030b4 <getChooseRows+0x2b8>)
 8003008:	781b      	ldrb	r3, [r3, #0]
 800300a:	461a      	mov	r2, r3
 800300c:	4b27      	ldr	r3, [pc, #156]	; (80030ac <getChooseRows+0x2b0>)
 800300e:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 8003012:	4b28      	ldr	r3, [pc, #160]	; (80030b4 <getChooseRows+0x2b8>)
 8003014:	781b      	ldrb	r3, [r3, #0]
 8003016:	461a      	mov	r2, r3
 8003018:	4b24      	ldr	r3, [pc, #144]	; (80030ac <getChooseRows+0x2b0>)
 800301a:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800301e:	79bb      	ldrb	r3, [r7, #6]
 8003020:	b29b      	uxth	r3, r3
 8003022:	4413      	add	r3, r2
 8003024:	b29b      	uxth	r3, r3
 8003026:	22e6      	movs	r2, #230	; 0xe6
 8003028:	200a      	movs	r0, #10
 800302a:	f7fd ff47 	bl	8000ebc <LCD_DrawRectangle>
		key = NOKEY;
 800302e:	2300      	movs	r3, #0
 8003030:	73fb      	strb	r3, [r7, #15]
		break;
 8003032:	e036      	b.n	80030a2 <getChooseRows+0x2a6>
	case SELECT:
		//lcdClear();
		LCD_Fill(10, cursorOfOptionBox[byRowTemp], 230, cursorOfOptionBox[byRowTemp], RED);
 8003034:	4b1f      	ldr	r3, [pc, #124]	; (80030b4 <getChooseRows+0x2b8>)
 8003036:	781b      	ldrb	r3, [r3, #0]
 8003038:	461a      	mov	r2, r3
 800303a:	4b1c      	ldr	r3, [pc, #112]	; (80030ac <getChooseRows+0x2b0>)
 800303c:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 8003040:	4b1c      	ldr	r3, [pc, #112]	; (80030b4 <getChooseRows+0x2b8>)
 8003042:	781b      	ldrb	r3, [r3, #0]
 8003044:	461a      	mov	r2, r3
 8003046:	4b19      	ldr	r3, [pc, #100]	; (80030ac <getChooseRows+0x2b0>)
 8003048:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800304c:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8003050:	9200      	str	r2, [sp, #0]
 8003052:	22e6      	movs	r2, #230	; 0xe6
 8003054:	200a      	movs	r0, #10
 8003056:	f7fd fe61 	bl	8000d1c <LCD_Fill>
		LCD_Clear(WHITE);
 800305a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800305e:	f7fe fcbf 	bl	80019e0 <LCD_Clear>
		//Print Titel
		LCD_ShowTitle(bySizeOfRow, WHITE, BLUE, (u8*)pStrInterface[byRowTemp+1], 16, 1);
 8003062:	79bb      	ldrb	r3, [r7, #6]
 8003064:	b298      	uxth	r0, r3
 8003066:	4b13      	ldr	r3, [pc, #76]	; (80030b4 <getChooseRows+0x2b8>)
 8003068:	781b      	ldrb	r3, [r3, #0]
 800306a:	1c5a      	adds	r2, r3, #1
 800306c:	4613      	mov	r3, r2
 800306e:	009b      	lsls	r3, r3, #2
 8003070:	4413      	add	r3, r2
 8003072:	009b      	lsls	r3, r3, #2
 8003074:	461a      	mov	r2, r3
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	4413      	add	r3, r2
 800307a:	2201      	movs	r2, #1
 800307c:	9201      	str	r2, [sp, #4]
 800307e:	2210      	movs	r2, #16
 8003080:	9200      	str	r2, [sp, #0]
 8003082:	221f      	movs	r2, #31
 8003084:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003088:	f7fd ff46 	bl	8000f18 <LCD_ShowTitle>
		key = NOKEY;
 800308c:	2300      	movs	r3, #0
 800308e:	73fb      	strb	r3, [r7, #15]
		byFlag = 0;
 8003090:	4b07      	ldr	r3, [pc, #28]	; (80030b0 <getChooseRows+0x2b4>)
 8003092:	2200      	movs	r2, #0
 8003094:	701a      	strb	r2, [r3, #0]
		byRow = byRowTemp+1;
 8003096:	4b07      	ldr	r3, [pc, #28]	; (80030b4 <getChooseRows+0x2b8>)
 8003098:	781b      	ldrb	r3, [r3, #0]
 800309a:	3301      	adds	r3, #1
 800309c:	73bb      	strb	r3, [r7, #14]
		break;
 800309e:	e000      	b.n	80030a2 <getChooseRows+0x2a6>
	default:
		break;
 80030a0:	bf00      	nop
	}
	return byRow;
 80030a2:	7bbb      	ldrb	r3, [r7, #14]
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	3714      	adds	r7, #20
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd90      	pop	{r4, r7, pc}
 80030ac:	200000f0 	.word	0x200000f0
 80030b0:	20000104 	.word	0x20000104
 80030b4:	20000105 	.word	0x20000105

080030b8 <max>:
#error Unsupported LOCK_VERSION (add it...)

#endif


static int max(int a, int b) {
 80030b8:	b480      	push	{r7}
 80030ba:	b083      	sub	sp, #12
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
 80030c0:	6039      	str	r1, [r7, #0]
    if (a > b) { return a; }
 80030c2:	687a      	ldr	r2, [r7, #4]
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	429a      	cmp	r2, r3
 80030c8:	dd01      	ble.n	80030ce <max+0x16>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	e000      	b.n	80030d0 <max+0x18>
    return b;
 80030ce:	683b      	ldr	r3, [r7, #0]
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	370c      	adds	r7, #12
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr

080030dc <getAlphanumeric>:
*/


//#pragma mark - Mode testing and conversion

static int8_t getAlphanumeric(char c) {
 80030dc:	b480      	push	{r7}
 80030de:	b083      	sub	sp, #12
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	4603      	mov	r3, r0
 80030e4:	71fb      	strb	r3, [r7, #7]
    
    if (c >= '0' && c <= '9') { return (c - '0'); }
 80030e6:	79fb      	ldrb	r3, [r7, #7]
 80030e8:	2b2f      	cmp	r3, #47	; 0x2f
 80030ea:	d907      	bls.n	80030fc <getAlphanumeric+0x20>
 80030ec:	79fb      	ldrb	r3, [r7, #7]
 80030ee:	2b39      	cmp	r3, #57	; 0x39
 80030f0:	d804      	bhi.n	80030fc <getAlphanumeric+0x20>
 80030f2:	79fb      	ldrb	r3, [r7, #7]
 80030f4:	3b30      	subs	r3, #48	; 0x30
 80030f6:	b2db      	uxtb	r3, r3
 80030f8:	b25b      	sxtb	r3, r3
 80030fa:	e05b      	b.n	80031b4 <getAlphanumeric+0xd8>
    if (c >= 'A' && c <= 'Z') { return (c - 'A' + 10); }
 80030fc:	79fb      	ldrb	r3, [r7, #7]
 80030fe:	2b40      	cmp	r3, #64	; 0x40
 8003100:	d907      	bls.n	8003112 <getAlphanumeric+0x36>
 8003102:	79fb      	ldrb	r3, [r7, #7]
 8003104:	2b5a      	cmp	r3, #90	; 0x5a
 8003106:	d804      	bhi.n	8003112 <getAlphanumeric+0x36>
 8003108:	79fb      	ldrb	r3, [r7, #7]
 800310a:	3b37      	subs	r3, #55	; 0x37
 800310c:	b2db      	uxtb	r3, r3
 800310e:	b25b      	sxtb	r3, r3
 8003110:	e050      	b.n	80031b4 <getAlphanumeric+0xd8>
    
    switch (c) {
 8003112:	79fb      	ldrb	r3, [r7, #7]
 8003114:	3b20      	subs	r3, #32
 8003116:	2b1a      	cmp	r3, #26
 8003118:	d84a      	bhi.n	80031b0 <getAlphanumeric+0xd4>
 800311a:	a201      	add	r2, pc, #4	; (adr r2, 8003120 <getAlphanumeric+0x44>)
 800311c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003120:	0800318d 	.word	0x0800318d
 8003124:	080031b1 	.word	0x080031b1
 8003128:	080031b1 	.word	0x080031b1
 800312c:	080031b1 	.word	0x080031b1
 8003130:	08003191 	.word	0x08003191
 8003134:	08003195 	.word	0x08003195
 8003138:	080031b1 	.word	0x080031b1
 800313c:	080031b1 	.word	0x080031b1
 8003140:	080031b1 	.word	0x080031b1
 8003144:	080031b1 	.word	0x080031b1
 8003148:	08003199 	.word	0x08003199
 800314c:	0800319d 	.word	0x0800319d
 8003150:	080031b1 	.word	0x080031b1
 8003154:	080031a1 	.word	0x080031a1
 8003158:	080031a5 	.word	0x080031a5
 800315c:	080031a9 	.word	0x080031a9
 8003160:	080031b1 	.word	0x080031b1
 8003164:	080031b1 	.word	0x080031b1
 8003168:	080031b1 	.word	0x080031b1
 800316c:	080031b1 	.word	0x080031b1
 8003170:	080031b1 	.word	0x080031b1
 8003174:	080031b1 	.word	0x080031b1
 8003178:	080031b1 	.word	0x080031b1
 800317c:	080031b1 	.word	0x080031b1
 8003180:	080031b1 	.word	0x080031b1
 8003184:	080031b1 	.word	0x080031b1
 8003188:	080031ad 	.word	0x080031ad
        case ' ': return 36;
 800318c:	2324      	movs	r3, #36	; 0x24
 800318e:	e011      	b.n	80031b4 <getAlphanumeric+0xd8>
        case '$': return 37;
 8003190:	2325      	movs	r3, #37	; 0x25
 8003192:	e00f      	b.n	80031b4 <getAlphanumeric+0xd8>
        case '%': return 38;
 8003194:	2326      	movs	r3, #38	; 0x26
 8003196:	e00d      	b.n	80031b4 <getAlphanumeric+0xd8>
        case '*': return 39;
 8003198:	2327      	movs	r3, #39	; 0x27
 800319a:	e00b      	b.n	80031b4 <getAlphanumeric+0xd8>
        case '+': return 40;
 800319c:	2328      	movs	r3, #40	; 0x28
 800319e:	e009      	b.n	80031b4 <getAlphanumeric+0xd8>
        case '-': return 41;
 80031a0:	2329      	movs	r3, #41	; 0x29
 80031a2:	e007      	b.n	80031b4 <getAlphanumeric+0xd8>
        case '.': return 42;
 80031a4:	232a      	movs	r3, #42	; 0x2a
 80031a6:	e005      	b.n	80031b4 <getAlphanumeric+0xd8>
        case '/': return 43;
 80031a8:	232b      	movs	r3, #43	; 0x2b
 80031aa:	e003      	b.n	80031b4 <getAlphanumeric+0xd8>
        case ':': return 44;
 80031ac:	232c      	movs	r3, #44	; 0x2c
 80031ae:	e001      	b.n	80031b4 <getAlphanumeric+0xd8>
    }
    
    return -1;
 80031b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	370c      	adds	r7, #12
 80031b8:	46bd      	mov	sp, r7
 80031ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031be:	4770      	bx	lr

080031c0 <isAlphanumeric>:

static bool isAlphanumeric(const char *text, uint16_t length) {
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b082      	sub	sp, #8
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
 80031c8:	460b      	mov	r3, r1
 80031ca:	807b      	strh	r3, [r7, #2]
    while (length != 0) {
 80031cc:	e00f      	b.n	80031ee <isAlphanumeric+0x2e>
        if (getAlphanumeric(text[--length]) == -1) { return false; }
 80031ce:	887b      	ldrh	r3, [r7, #2]
 80031d0:	3b01      	subs	r3, #1
 80031d2:	807b      	strh	r3, [r7, #2]
 80031d4:	887b      	ldrh	r3, [r7, #2]
 80031d6:	687a      	ldr	r2, [r7, #4]
 80031d8:	4413      	add	r3, r2
 80031da:	781b      	ldrb	r3, [r3, #0]
 80031dc:	4618      	mov	r0, r3
 80031de:	f7ff ff7d 	bl	80030dc <getAlphanumeric>
 80031e2:	4603      	mov	r3, r0
 80031e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031e8:	d101      	bne.n	80031ee <isAlphanumeric+0x2e>
 80031ea:	2300      	movs	r3, #0
 80031ec:	e003      	b.n	80031f6 <isAlphanumeric+0x36>
    while (length != 0) {
 80031ee:	887b      	ldrh	r3, [r7, #2]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d1ec      	bne.n	80031ce <isAlphanumeric+0xe>
    }
    return true;
 80031f4:	2301      	movs	r3, #1
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	3708      	adds	r7, #8
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}

080031fe <isNumeric>:


static bool isNumeric(const char *text, uint16_t length) {
 80031fe:	b480      	push	{r7}
 8003200:	b085      	sub	sp, #20
 8003202:	af00      	add	r7, sp, #0
 8003204:	6078      	str	r0, [r7, #4]
 8003206:	460b      	mov	r3, r1
 8003208:	807b      	strh	r3, [r7, #2]
    while (length != 0) {
 800320a:	e00f      	b.n	800322c <isNumeric+0x2e>
        char c = text[--length];
 800320c:	887b      	ldrh	r3, [r7, #2]
 800320e:	3b01      	subs	r3, #1
 8003210:	807b      	strh	r3, [r7, #2]
 8003212:	887b      	ldrh	r3, [r7, #2]
 8003214:	687a      	ldr	r2, [r7, #4]
 8003216:	4413      	add	r3, r2
 8003218:	781b      	ldrb	r3, [r3, #0]
 800321a:	73fb      	strb	r3, [r7, #15]
        if (c < '0' || c > '9') { return false; }
 800321c:	7bfb      	ldrb	r3, [r7, #15]
 800321e:	2b2f      	cmp	r3, #47	; 0x2f
 8003220:	d902      	bls.n	8003228 <isNumeric+0x2a>
 8003222:	7bfb      	ldrb	r3, [r7, #15]
 8003224:	2b39      	cmp	r3, #57	; 0x39
 8003226:	d901      	bls.n	800322c <isNumeric+0x2e>
 8003228:	2300      	movs	r3, #0
 800322a:	e003      	b.n	8003234 <isNumeric+0x36>
    while (length != 0) {
 800322c:	887b      	ldrh	r3, [r7, #2]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d1ec      	bne.n	800320c <isNumeric+0xe>
    }
    return true;
 8003232:	2301      	movs	r3, #1
}
 8003234:	4618      	mov	r0, r3
 8003236:	3714      	adds	r7, #20
 8003238:	46bd      	mov	sp, r7
 800323a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323e:	4770      	bx	lr

08003240 <getModeBits>:
// We store the following tightly packed (less 8) in modeInfo
//               <=9  <=26  <= 40
// NUMERIC      ( 10,   12,    14);
// ALPHANUMERIC (  9,   11,    13);
// BYTE         (  8,   16,    16);
static char getModeBits(uint8_t version, uint8_t mode) {
 8003240:	b480      	push	{r7}
 8003242:	b085      	sub	sp, #20
 8003244:	af00      	add	r7, sp, #0
 8003246:	4603      	mov	r3, r0
 8003248:	460a      	mov	r2, r1
 800324a:	71fb      	strb	r3, [r7, #7]
 800324c:	4613      	mov	r3, r2
 800324e:	71bb      	strb	r3, [r7, #6]
    // Note: We use 15 instead of 16; since 15 doesn't exist and we cannot store 16 (8 + 8) in 3 bits
    // hex(int("".join(reversed([('00' + bin(x - 8)[2:])[-3:] for x in [10, 9, 8, 12, 11, 15, 14, 13, 15]])), 2))
    unsigned int modeInfo = 0x7bbb80a;
 8003250:	4b13      	ldr	r3, [pc, #76]	; (80032a0 <getModeBits+0x60>)
 8003252:	60fb      	str	r3, [r7, #12]
    
#if LOCK_VERSION == 0 || LOCK_VERSION > 9
    if (version > 9) { modeInfo >>= 9; }
 8003254:	79fb      	ldrb	r3, [r7, #7]
 8003256:	2b09      	cmp	r3, #9
 8003258:	d902      	bls.n	8003260 <getModeBits+0x20>
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	0a5b      	lsrs	r3, r3, #9
 800325e:	60fb      	str	r3, [r7, #12]
#endif
    
#if LOCK_VERSION == 0 || LOCK_VERSION > 26
    if (version > 26) { modeInfo >>= 9; }
 8003260:	79fb      	ldrb	r3, [r7, #7]
 8003262:	2b1a      	cmp	r3, #26
 8003264:	d902      	bls.n	800326c <getModeBits+0x2c>
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	0a5b      	lsrs	r3, r3, #9
 800326a:	60fb      	str	r3, [r7, #12]
#endif
    
    char result = 8 + ((modeInfo >> (3 * mode)) & 0x07);
 800326c:	79ba      	ldrb	r2, [r7, #6]
 800326e:	4613      	mov	r3, r2
 8003270:	005b      	lsls	r3, r3, #1
 8003272:	4413      	add	r3, r2
 8003274:	68fa      	ldr	r2, [r7, #12]
 8003276:	fa22 f303 	lsr.w	r3, r2, r3
 800327a:	b2db      	uxtb	r3, r3
 800327c:	f003 0307 	and.w	r3, r3, #7
 8003280:	b2db      	uxtb	r3, r3
 8003282:	3308      	adds	r3, #8
 8003284:	72fb      	strb	r3, [r7, #11]
    if (result == 15) { result = 16; }
 8003286:	7afb      	ldrb	r3, [r7, #11]
 8003288:	2b0f      	cmp	r3, #15
 800328a:	d101      	bne.n	8003290 <getModeBits+0x50>
 800328c:	2310      	movs	r3, #16
 800328e:	72fb      	strb	r3, [r7, #11]
    
    return result;
 8003290:	7afb      	ldrb	r3, [r7, #11]
}
 8003292:	4618      	mov	r0, r3
 8003294:	3714      	adds	r7, #20
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr
 800329e:	bf00      	nop
 80032a0:	07bbb80a 	.word	0x07bbb80a

080032a4 <bb_getGridSizeBytes>:
    }
    printf("\n");
}
*/

static uint16_t bb_getGridSizeBytes(uint8_t size) {
 80032a4:	b480      	push	{r7}
 80032a6:	b083      	sub	sp, #12
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	4603      	mov	r3, r0
 80032ac:	71fb      	strb	r3, [r7, #7]
    return (((size * size) + 7) / 8);
 80032ae:	79fb      	ldrb	r3, [r7, #7]
 80032b0:	79fa      	ldrb	r2, [r7, #7]
 80032b2:	fb02 f303 	mul.w	r3, r2, r3
 80032b6:	3307      	adds	r3, #7
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	da00      	bge.n	80032be <bb_getGridSizeBytes+0x1a>
 80032bc:	3307      	adds	r3, #7
 80032be:	10db      	asrs	r3, r3, #3
 80032c0:	b29b      	uxth	r3, r3
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	370c      	adds	r7, #12
 80032c6:	46bd      	mov	sp, r7
 80032c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032cc:	4770      	bx	lr

080032ce <bb_getBufferSizeBytes>:

static uint16_t bb_getBufferSizeBytes(uint32_t bits) {
 80032ce:	b480      	push	{r7}
 80032d0:	b083      	sub	sp, #12
 80032d2:	af00      	add	r7, sp, #0
 80032d4:	6078      	str	r0, [r7, #4]
    return ((bits + 7) / 8);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	3307      	adds	r3, #7
 80032da:	08db      	lsrs	r3, r3, #3
 80032dc:	b29b      	uxth	r3, r3
}
 80032de:	4618      	mov	r0, r3
 80032e0:	370c      	adds	r7, #12
 80032e2:	46bd      	mov	sp, r7
 80032e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e8:	4770      	bx	lr

080032ea <bb_initBuffer>:

static void bb_initBuffer(BitBucket *bitBuffer, uint8_t *data, int32_t capacityBytes) {
 80032ea:	b580      	push	{r7, lr}
 80032ec:	b084      	sub	sp, #16
 80032ee:	af00      	add	r7, sp, #0
 80032f0:	60f8      	str	r0, [r7, #12]
 80032f2:	60b9      	str	r1, [r7, #8]
 80032f4:	607a      	str	r2, [r7, #4]
    bitBuffer->bitOffsetOrWidth = 0;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	2200      	movs	r2, #0
 80032fa:	601a      	str	r2, [r3, #0]
    bitBuffer->capacityBytes = capacityBytes;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	b29a      	uxth	r2, r3
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	809a      	strh	r2, [r3, #4]
    bitBuffer->data = data;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	68ba      	ldr	r2, [r7, #8]
 8003308:	609a      	str	r2, [r3, #8]
    
    memset(data, 0, bitBuffer->capacityBytes);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	889b      	ldrh	r3, [r3, #4]
 800330e:	461a      	mov	r2, r3
 8003310:	2100      	movs	r1, #0
 8003312:	68b8      	ldr	r0, [r7, #8]
 8003314:	f003 faec 	bl	80068f0 <memset>
}
 8003318:	bf00      	nop
 800331a:	3710      	adds	r7, #16
 800331c:	46bd      	mov	sp, r7
 800331e:	bd80      	pop	{r7, pc}

08003320 <bb_initGrid>:

static void bb_initGrid(BitBucket *bitGrid, uint8_t *data, uint8_t size) {
 8003320:	b580      	push	{r7, lr}
 8003322:	b084      	sub	sp, #16
 8003324:	af00      	add	r7, sp, #0
 8003326:	60f8      	str	r0, [r7, #12]
 8003328:	60b9      	str	r1, [r7, #8]
 800332a:	4613      	mov	r3, r2
 800332c:	71fb      	strb	r3, [r7, #7]
    bitGrid->bitOffsetOrWidth = size;
 800332e:	79fa      	ldrb	r2, [r7, #7]
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	601a      	str	r2, [r3, #0]
    bitGrid->capacityBytes = bb_getGridSizeBytes(size);
 8003334:	79fb      	ldrb	r3, [r7, #7]
 8003336:	4618      	mov	r0, r3
 8003338:	f7ff ffb4 	bl	80032a4 <bb_getGridSizeBytes>
 800333c:	4603      	mov	r3, r0
 800333e:	461a      	mov	r2, r3
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	809a      	strh	r2, [r3, #4]
    bitGrid->data = data;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	68ba      	ldr	r2, [r7, #8]
 8003348:	609a      	str	r2, [r3, #8]

    memset(data, 0, bitGrid->capacityBytes);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	889b      	ldrh	r3, [r3, #4]
 800334e:	461a      	mov	r2, r3
 8003350:	2100      	movs	r1, #0
 8003352:	68b8      	ldr	r0, [r7, #8]
 8003354:	f003 facc 	bl	80068f0 <memset>
}
 8003358:	bf00      	nop
 800335a:	3710      	adds	r7, #16
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}

08003360 <bb_appendBits>:

static void bb_appendBits(BitBucket *bitBuffer, uint32_t val, uint8_t length) {
 8003360:	b480      	push	{r7}
 8003362:	b087      	sub	sp, #28
 8003364:	af00      	add	r7, sp, #0
 8003366:	60f8      	str	r0, [r7, #12]
 8003368:	60b9      	str	r1, [r7, #8]
 800336a:	4613      	mov	r3, r2
 800336c:	71fb      	strb	r3, [r7, #7]
    uint32_t offset = bitBuffer->bitOffsetOrWidth;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	617b      	str	r3, [r7, #20]
    for (int8_t i = length - 1; i >= 0; i--, offset++) {
 8003374:	79fb      	ldrb	r3, [r7, #7]
 8003376:	3b01      	subs	r3, #1
 8003378:	b2db      	uxtb	r3, r3
 800337a:	74fb      	strb	r3, [r7, #19]
 800337c:	e024      	b.n	80033c8 <bb_appendBits+0x68>
        bitBuffer->data[offset >> 3] |= ((val >> i) & 1) << (7 - (offset & 7));
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	689a      	ldr	r2, [r3, #8]
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	08db      	lsrs	r3, r3, #3
 8003386:	4413      	add	r3, r2
 8003388:	7819      	ldrb	r1, [r3, #0]
 800338a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800338e:	68ba      	ldr	r2, [r7, #8]
 8003390:	fa22 f303 	lsr.w	r3, r2, r3
 8003394:	f003 0201 	and.w	r2, r3, #1
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	43db      	mvns	r3, r3
 800339c:	f003 0307 	and.w	r3, r3, #7
 80033a0:	fa02 f303 	lsl.w	r3, r2, r3
 80033a4:	b2da      	uxtb	r2, r3
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	6898      	ldr	r0, [r3, #8]
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	08db      	lsrs	r3, r3, #3
 80033ae:	4403      	add	r3, r0
 80033b0:	430a      	orrs	r2, r1
 80033b2:	b2d2      	uxtb	r2, r2
 80033b4:	701a      	strb	r2, [r3, #0]
    for (int8_t i = length - 1; i >= 0; i--, offset++) {
 80033b6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80033ba:	b2db      	uxtb	r3, r3
 80033bc:	3b01      	subs	r3, #1
 80033be:	b2db      	uxtb	r3, r3
 80033c0:	74fb      	strb	r3, [r7, #19]
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	3301      	adds	r3, #1
 80033c6:	617b      	str	r3, [r7, #20]
 80033c8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	dad6      	bge.n	800337e <bb_appendBits+0x1e>
    }
    bitBuffer->bitOffsetOrWidth = offset;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	697a      	ldr	r2, [r7, #20]
 80033d4:	601a      	str	r2, [r3, #0]
}
 80033d6:	bf00      	nop
 80033d8:	371c      	adds	r7, #28
 80033da:	46bd      	mov	sp, r7
 80033dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e0:	4770      	bx	lr

080033e2 <bb_setBit>:
    for (int8_t i = length - 1; i >= 0; i--, offset++) {
        bitBuffer->data[offset >> 3] |= ((val >> i) & 1) << (7 - (offset & 7));
    }
}
*/
static void bb_setBit(BitBucket *bitGrid, uint8_t x, uint8_t y, bool on) {
 80033e2:	b480      	push	{r7}
 80033e4:	b085      	sub	sp, #20
 80033e6:	af00      	add	r7, sp, #0
 80033e8:	6078      	str	r0, [r7, #4]
 80033ea:	4608      	mov	r0, r1
 80033ec:	4611      	mov	r1, r2
 80033ee:	461a      	mov	r2, r3
 80033f0:	4603      	mov	r3, r0
 80033f2:	70fb      	strb	r3, [r7, #3]
 80033f4:	460b      	mov	r3, r1
 80033f6:	70bb      	strb	r3, [r7, #2]
 80033f8:	4613      	mov	r3, r2
 80033fa:	707b      	strb	r3, [r7, #1]
    uint32_t offset = y * bitGrid->bitOffsetOrWidth + x;
 80033fc:	78bb      	ldrb	r3, [r7, #2]
 80033fe:	687a      	ldr	r2, [r7, #4]
 8003400:	6812      	ldr	r2, [r2, #0]
 8003402:	fb03 f202 	mul.w	r2, r3, r2
 8003406:	78fb      	ldrb	r3, [r7, #3]
 8003408:	4413      	add	r3, r2
 800340a:	60fb      	str	r3, [r7, #12]
    uint8_t mask = 1 << (7 - (offset & 0x07));
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	43db      	mvns	r3, r3
 8003410:	f003 0307 	and.w	r3, r3, #7
 8003414:	2201      	movs	r2, #1
 8003416:	fa02 f303 	lsl.w	r3, r2, r3
 800341a:	72fb      	strb	r3, [r7, #11]
    if (on) {
 800341c:	787b      	ldrb	r3, [r7, #1]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d00f      	beq.n	8003442 <bb_setBit+0x60>
        bitGrid->data[offset >> 3] |= mask;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	689a      	ldr	r2, [r3, #8]
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	08db      	lsrs	r3, r3, #3
 800342a:	4413      	add	r3, r2
 800342c:	7819      	ldrb	r1, [r3, #0]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	689a      	ldr	r2, [r3, #8]
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	08db      	lsrs	r3, r3, #3
 8003436:	4413      	add	r3, r2
 8003438:	7afa      	ldrb	r2, [r7, #11]
 800343a:	430a      	orrs	r2, r1
 800343c:	b2d2      	uxtb	r2, r2
 800343e:	701a      	strb	r2, [r3, #0]
    } else {
        bitGrid->data[offset >> 3] &= ~mask;
    }
}
 8003440:	e013      	b.n	800346a <bb_setBit+0x88>
        bitGrid->data[offset >> 3] &= ~mask;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	689a      	ldr	r2, [r3, #8]
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	08db      	lsrs	r3, r3, #3
 800344a:	4413      	add	r3, r2
 800344c:	781b      	ldrb	r3, [r3, #0]
 800344e:	b25a      	sxtb	r2, r3
 8003450:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8003454:	43db      	mvns	r3, r3
 8003456:	b25b      	sxtb	r3, r3
 8003458:	4013      	ands	r3, r2
 800345a:	b259      	sxtb	r1, r3
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	689a      	ldr	r2, [r3, #8]
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	08db      	lsrs	r3, r3, #3
 8003464:	4413      	add	r3, r2
 8003466:	b2ca      	uxtb	r2, r1
 8003468:	701a      	strb	r2, [r3, #0]
}
 800346a:	bf00      	nop
 800346c:	3714      	adds	r7, #20
 800346e:	46bd      	mov	sp, r7
 8003470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003474:	4770      	bx	lr

08003476 <bb_invertBit>:

static void bb_invertBit(BitBucket *bitGrid, uint8_t x, uint8_t y, bool invert) {
 8003476:	b480      	push	{r7}
 8003478:	b085      	sub	sp, #20
 800347a:	af00      	add	r7, sp, #0
 800347c:	6078      	str	r0, [r7, #4]
 800347e:	4608      	mov	r0, r1
 8003480:	4611      	mov	r1, r2
 8003482:	461a      	mov	r2, r3
 8003484:	4603      	mov	r3, r0
 8003486:	70fb      	strb	r3, [r7, #3]
 8003488:	460b      	mov	r3, r1
 800348a:	70bb      	strb	r3, [r7, #2]
 800348c:	4613      	mov	r3, r2
 800348e:	707b      	strb	r3, [r7, #1]
    uint32_t offset = y * bitGrid->bitOffsetOrWidth + x;
 8003490:	78bb      	ldrb	r3, [r7, #2]
 8003492:	687a      	ldr	r2, [r7, #4]
 8003494:	6812      	ldr	r2, [r2, #0]
 8003496:	fb03 f202 	mul.w	r2, r3, r2
 800349a:	78fb      	ldrb	r3, [r7, #3]
 800349c:	4413      	add	r3, r2
 800349e:	60fb      	str	r3, [r7, #12]
    uint8_t mask = 1 << (7 - (offset & 0x07));
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	43db      	mvns	r3, r3
 80034a4:	f003 0307 	and.w	r3, r3, #7
 80034a8:	2201      	movs	r2, #1
 80034aa:	fa02 f303 	lsl.w	r3, r2, r3
 80034ae:	72fb      	strb	r3, [r7, #11]
    bool on = ((bitGrid->data[offset >> 3] & (1 << (7 - (offset & 0x07)))) != 0);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	689a      	ldr	r2, [r3, #8]
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	08db      	lsrs	r3, r3, #3
 80034b8:	4413      	add	r3, r2
 80034ba:	781b      	ldrb	r3, [r3, #0]
 80034bc:	461a      	mov	r2, r3
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	43db      	mvns	r3, r3
 80034c2:	f003 0307 	and.w	r3, r3, #7
 80034c6:	fa42 f303 	asr.w	r3, r2, r3
 80034ca:	f003 0301 	and.w	r3, r3, #1
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	bf14      	ite	ne
 80034d2:	2301      	movne	r3, #1
 80034d4:	2300      	moveq	r3, #0
 80034d6:	b2db      	uxtb	r3, r3
 80034d8:	72bb      	strb	r3, [r7, #10]
    if (on ^ invert) {
 80034da:	7aba      	ldrb	r2, [r7, #10]
 80034dc:	787b      	ldrb	r3, [r7, #1]
 80034de:	429a      	cmp	r2, r3
 80034e0:	d00f      	beq.n	8003502 <bb_invertBit+0x8c>
        bitGrid->data[offset >> 3] |= mask;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	689a      	ldr	r2, [r3, #8]
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	08db      	lsrs	r3, r3, #3
 80034ea:	4413      	add	r3, r2
 80034ec:	7819      	ldrb	r1, [r3, #0]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	689a      	ldr	r2, [r3, #8]
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	08db      	lsrs	r3, r3, #3
 80034f6:	4413      	add	r3, r2
 80034f8:	7afa      	ldrb	r2, [r7, #11]
 80034fa:	430a      	orrs	r2, r1
 80034fc:	b2d2      	uxtb	r2, r2
 80034fe:	701a      	strb	r2, [r3, #0]
    } else {
        bitGrid->data[offset >> 3] &= ~mask;
    }
}
 8003500:	e013      	b.n	800352a <bb_invertBit+0xb4>
        bitGrid->data[offset >> 3] &= ~mask;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	689a      	ldr	r2, [r3, #8]
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	08db      	lsrs	r3, r3, #3
 800350a:	4413      	add	r3, r2
 800350c:	781b      	ldrb	r3, [r3, #0]
 800350e:	b25a      	sxtb	r2, r3
 8003510:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8003514:	43db      	mvns	r3, r3
 8003516:	b25b      	sxtb	r3, r3
 8003518:	4013      	ands	r3, r2
 800351a:	b259      	sxtb	r1, r3
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	689a      	ldr	r2, [r3, #8]
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	08db      	lsrs	r3, r3, #3
 8003524:	4413      	add	r3, r2
 8003526:	b2ca      	uxtb	r2, r1
 8003528:	701a      	strb	r2, [r3, #0]
}
 800352a:	bf00      	nop
 800352c:	3714      	adds	r7, #20
 800352e:	46bd      	mov	sp, r7
 8003530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003534:	4770      	bx	lr

08003536 <bb_getBit>:

static bool bb_getBit(BitBucket *bitGrid, uint8_t x, uint8_t y) {
 8003536:	b480      	push	{r7}
 8003538:	b085      	sub	sp, #20
 800353a:	af00      	add	r7, sp, #0
 800353c:	6078      	str	r0, [r7, #4]
 800353e:	460b      	mov	r3, r1
 8003540:	70fb      	strb	r3, [r7, #3]
 8003542:	4613      	mov	r3, r2
 8003544:	70bb      	strb	r3, [r7, #2]
    uint32_t offset = y * bitGrid->bitOffsetOrWidth + x;
 8003546:	78bb      	ldrb	r3, [r7, #2]
 8003548:	687a      	ldr	r2, [r7, #4]
 800354a:	6812      	ldr	r2, [r2, #0]
 800354c:	fb03 f202 	mul.w	r2, r3, r2
 8003550:	78fb      	ldrb	r3, [r7, #3]
 8003552:	4413      	add	r3, r2
 8003554:	60fb      	str	r3, [r7, #12]
    return (bitGrid->data[offset >> 3] & (1 << (7 - (offset & 0x07)))) != 0;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	689a      	ldr	r2, [r3, #8]
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	08db      	lsrs	r3, r3, #3
 800355e:	4413      	add	r3, r2
 8003560:	781b      	ldrb	r3, [r3, #0]
 8003562:	461a      	mov	r2, r3
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	43db      	mvns	r3, r3
 8003568:	f003 0307 	and.w	r3, r3, #7
 800356c:	fa42 f303 	asr.w	r3, r2, r3
 8003570:	f003 0301 	and.w	r3, r3, #1
 8003574:	2b00      	cmp	r3, #0
 8003576:	bf14      	ite	ne
 8003578:	2301      	movne	r3, #1
 800357a:	2300      	moveq	r3, #0
 800357c:	b2db      	uxtb	r3, r3
}
 800357e:	4618      	mov	r0, r3
 8003580:	3714      	adds	r7, #20
 8003582:	46bd      	mov	sp, r7
 8003584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003588:	4770      	bx	lr
	...

0800358c <applyMask>:

// XORs the data modules in this QR Code with the given mask pattern. Due to XOR's mathematical
// properties, calling applyMask(m) twice with the same value is equivalent to no change at all.
// This means it is possible to apply a mask, undo it, and try another mask. Note that a final
// well-formed QR Code symbol needs exactly one mask applied (not zero, not two, etc.).
static void applyMask(BitBucket *modules, BitBucket *isFunction, uint8_t mask) {
 800358c:	b580      	push	{r7, lr}
 800358e:	b086      	sub	sp, #24
 8003590:	af00      	add	r7, sp, #0
 8003592:	60f8      	str	r0, [r7, #12]
 8003594:	60b9      	str	r1, [r7, #8]
 8003596:	4613      	mov	r3, r2
 8003598:	71fb      	strb	r3, [r7, #7]
    uint8_t size = modules->bitOffsetOrWidth;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	753b      	strb	r3, [r7, #20]
    
    for (uint8_t y = 0; y < size; y++) {
 80035a0:	2300      	movs	r3, #0
 80035a2:	75fb      	strb	r3, [r7, #23]
 80035a4:	e0de      	b.n	8003764 <applyMask+0x1d8>
        for (uint8_t x = 0; x < size; x++) {
 80035a6:	2300      	movs	r3, #0
 80035a8:	75bb      	strb	r3, [r7, #22]
 80035aa:	e0d3      	b.n	8003754 <applyMask+0x1c8>
            if (bb_getBit(isFunction, x, y)) { continue; }
 80035ac:	7dfa      	ldrb	r2, [r7, #23]
 80035ae:	7dbb      	ldrb	r3, [r7, #22]
 80035b0:	4619      	mov	r1, r3
 80035b2:	68b8      	ldr	r0, [r7, #8]
 80035b4:	f7ff ffbf 	bl	8003536 <bb_getBit>
 80035b8:	4603      	mov	r3, r0
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	f040 80c6 	bne.w	800374c <applyMask+0x1c0>
            
            bool invert = 0;
 80035c0:	2300      	movs	r3, #0
 80035c2:	757b      	strb	r3, [r7, #21]
            switch (mask) {
 80035c4:	79fb      	ldrb	r3, [r7, #7]
 80035c6:	2b07      	cmp	r3, #7
 80035c8:	f200 80b9 	bhi.w	800373e <applyMask+0x1b2>
 80035cc:	a201      	add	r2, pc, #4	; (adr r2, 80035d4 <applyMask+0x48>)
 80035ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035d2:	bf00      	nop
 80035d4:	080035f5 	.word	0x080035f5
 80035d8:	0800360f 	.word	0x0800360f
 80035dc:	08003625 	.word	0x08003625
 80035e0:	08003647 	.word	0x08003647
 80035e4:	0800366d 	.word	0x0800366d
 80035e8:	08003695 	.word	0x08003695
 80035ec:	080036cb 	.word	0x080036cb
 80035f0:	08003705 	.word	0x08003705
                case 0:  invert = (x + y) % 2 == 0;                    break;
 80035f4:	7dba      	ldrb	r2, [r7, #22]
 80035f6:	7dfb      	ldrb	r3, [r7, #23]
 80035f8:	4413      	add	r3, r2
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	f003 0301 	and.w	r3, r3, #1
 8003600:	2b00      	cmp	r3, #0
 8003602:	bf0c      	ite	eq
 8003604:	2301      	moveq	r3, #1
 8003606:	2300      	movne	r3, #0
 8003608:	b2db      	uxtb	r3, r3
 800360a:	757b      	strb	r3, [r7, #21]
 800360c:	e097      	b.n	800373e <applyMask+0x1b2>
                case 1:  invert = y % 2 == 0;                          break;
 800360e:	7dfb      	ldrb	r3, [r7, #23]
 8003610:	f003 0301 	and.w	r3, r3, #1
 8003614:	b2db      	uxtb	r3, r3
 8003616:	2b00      	cmp	r3, #0
 8003618:	bf0c      	ite	eq
 800361a:	2301      	moveq	r3, #1
 800361c:	2300      	movne	r3, #0
 800361e:	b2db      	uxtb	r3, r3
 8003620:	757b      	strb	r3, [r7, #21]
 8003622:	e08c      	b.n	800373e <applyMask+0x1b2>
                case 2:  invert = x % 3 == 0;                          break;
 8003624:	7dba      	ldrb	r2, [r7, #22]
 8003626:	4b54      	ldr	r3, [pc, #336]	; (8003778 <applyMask+0x1ec>)
 8003628:	fba3 1302 	umull	r1, r3, r3, r2
 800362c:	0859      	lsrs	r1, r3, #1
 800362e:	460b      	mov	r3, r1
 8003630:	005b      	lsls	r3, r3, #1
 8003632:	440b      	add	r3, r1
 8003634:	1ad3      	subs	r3, r2, r3
 8003636:	b2db      	uxtb	r3, r3
 8003638:	2b00      	cmp	r3, #0
 800363a:	bf0c      	ite	eq
 800363c:	2301      	moveq	r3, #1
 800363e:	2300      	movne	r3, #0
 8003640:	b2db      	uxtb	r3, r3
 8003642:	757b      	strb	r3, [r7, #21]
 8003644:	e07b      	b.n	800373e <applyMask+0x1b2>
                case 3:  invert = (x + y) % 3 == 0;                    break;
 8003646:	7dba      	ldrb	r2, [r7, #22]
 8003648:	7dfb      	ldrb	r3, [r7, #23]
 800364a:	18d1      	adds	r1, r2, r3
 800364c:	4b4b      	ldr	r3, [pc, #300]	; (800377c <applyMask+0x1f0>)
 800364e:	fb83 3201 	smull	r3, r2, r3, r1
 8003652:	17cb      	asrs	r3, r1, #31
 8003654:	1ad2      	subs	r2, r2, r3
 8003656:	4613      	mov	r3, r2
 8003658:	005b      	lsls	r3, r3, #1
 800365a:	4413      	add	r3, r2
 800365c:	1aca      	subs	r2, r1, r3
 800365e:	2a00      	cmp	r2, #0
 8003660:	bf0c      	ite	eq
 8003662:	2301      	moveq	r3, #1
 8003664:	2300      	movne	r3, #0
 8003666:	b2db      	uxtb	r3, r3
 8003668:	757b      	strb	r3, [r7, #21]
 800366a:	e068      	b.n	800373e <applyMask+0x1b2>
                case 4:  invert = (x / 3 + y / 2) % 2 == 0;            break;
 800366c:	7dbb      	ldrb	r3, [r7, #22]
 800366e:	4a42      	ldr	r2, [pc, #264]	; (8003778 <applyMask+0x1ec>)
 8003670:	fba2 2303 	umull	r2, r3, r2, r3
 8003674:	085b      	lsrs	r3, r3, #1
 8003676:	b2da      	uxtb	r2, r3
 8003678:	7dfb      	ldrb	r3, [r7, #23]
 800367a:	085b      	lsrs	r3, r3, #1
 800367c:	b2db      	uxtb	r3, r3
 800367e:	4413      	add	r3, r2
 8003680:	b2db      	uxtb	r3, r3
 8003682:	f003 0301 	and.w	r3, r3, #1
 8003686:	2b00      	cmp	r3, #0
 8003688:	bf0c      	ite	eq
 800368a:	2301      	moveq	r3, #1
 800368c:	2300      	movne	r3, #0
 800368e:	b2db      	uxtb	r3, r3
 8003690:	757b      	strb	r3, [r7, #21]
 8003692:	e054      	b.n	800373e <applyMask+0x1b2>
                case 5:  invert = x * y % 2 + x * y % 3 == 0;          break;
 8003694:	7dbb      	ldrb	r3, [r7, #22]
 8003696:	7dfa      	ldrb	r2, [r7, #23]
 8003698:	fb02 f303 	mul.w	r3, r2, r3
 800369c:	f003 0001 	and.w	r0, r3, #1
 80036a0:	7dbb      	ldrb	r3, [r7, #22]
 80036a2:	7dfa      	ldrb	r2, [r7, #23]
 80036a4:	fb02 f103 	mul.w	r1, r2, r3
 80036a8:	4b34      	ldr	r3, [pc, #208]	; (800377c <applyMask+0x1f0>)
 80036aa:	fb83 3201 	smull	r3, r2, r3, r1
 80036ae:	17cb      	asrs	r3, r1, #31
 80036b0:	1ad2      	subs	r2, r2, r3
 80036b2:	4613      	mov	r3, r2
 80036b4:	005b      	lsls	r3, r3, #1
 80036b6:	4413      	add	r3, r2
 80036b8:	1aca      	subs	r2, r1, r3
 80036ba:	1883      	adds	r3, r0, r2
 80036bc:	2b00      	cmp	r3, #0
 80036be:	bf0c      	ite	eq
 80036c0:	2301      	moveq	r3, #1
 80036c2:	2300      	movne	r3, #0
 80036c4:	b2db      	uxtb	r3, r3
 80036c6:	757b      	strb	r3, [r7, #21]
 80036c8:	e039      	b.n	800373e <applyMask+0x1b2>
                case 6:  invert = (x * y % 2 + x * y % 3) % 2 == 0;    break;
 80036ca:	7dbb      	ldrb	r3, [r7, #22]
 80036cc:	7dfa      	ldrb	r2, [r7, #23]
 80036ce:	fb02 f303 	mul.w	r3, r2, r3
 80036d2:	f003 0001 	and.w	r0, r3, #1
 80036d6:	7dbb      	ldrb	r3, [r7, #22]
 80036d8:	7dfa      	ldrb	r2, [r7, #23]
 80036da:	fb02 f103 	mul.w	r1, r2, r3
 80036de:	4b27      	ldr	r3, [pc, #156]	; (800377c <applyMask+0x1f0>)
 80036e0:	fb83 3201 	smull	r3, r2, r3, r1
 80036e4:	17cb      	asrs	r3, r1, #31
 80036e6:	1ad2      	subs	r2, r2, r3
 80036e8:	4613      	mov	r3, r2
 80036ea:	005b      	lsls	r3, r3, #1
 80036ec:	4413      	add	r3, r2
 80036ee:	1aca      	subs	r2, r1, r3
 80036f0:	1883      	adds	r3, r0, r2
 80036f2:	f003 0301 	and.w	r3, r3, #1
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	bf0c      	ite	eq
 80036fa:	2301      	moveq	r3, #1
 80036fc:	2300      	movne	r3, #0
 80036fe:	b2db      	uxtb	r3, r3
 8003700:	757b      	strb	r3, [r7, #21]
 8003702:	e01c      	b.n	800373e <applyMask+0x1b2>
                case 7:  invert = ((x + y) % 2 + x * y % 3) % 2 == 0;  break;
 8003704:	7dba      	ldrb	r2, [r7, #22]
 8003706:	7dfb      	ldrb	r3, [r7, #23]
 8003708:	4413      	add	r3, r2
 800370a:	b2db      	uxtb	r3, r3
 800370c:	f003 0001 	and.w	r0, r3, #1
 8003710:	7dbb      	ldrb	r3, [r7, #22]
 8003712:	7dfa      	ldrb	r2, [r7, #23]
 8003714:	fb02 f103 	mul.w	r1, r2, r3
 8003718:	4b18      	ldr	r3, [pc, #96]	; (800377c <applyMask+0x1f0>)
 800371a:	fb83 3201 	smull	r3, r2, r3, r1
 800371e:	17cb      	asrs	r3, r1, #31
 8003720:	1ad2      	subs	r2, r2, r3
 8003722:	4613      	mov	r3, r2
 8003724:	005b      	lsls	r3, r3, #1
 8003726:	4413      	add	r3, r2
 8003728:	1aca      	subs	r2, r1, r3
 800372a:	1883      	adds	r3, r0, r2
 800372c:	f003 0301 	and.w	r3, r3, #1
 8003730:	2b00      	cmp	r3, #0
 8003732:	bf0c      	ite	eq
 8003734:	2301      	moveq	r3, #1
 8003736:	2300      	movne	r3, #0
 8003738:	b2db      	uxtb	r3, r3
 800373a:	757b      	strb	r3, [r7, #21]
 800373c:	bf00      	nop
            }
            bb_invertBit(modules, x, y, invert);
 800373e:	7d7b      	ldrb	r3, [r7, #21]
 8003740:	7dfa      	ldrb	r2, [r7, #23]
 8003742:	7db9      	ldrb	r1, [r7, #22]
 8003744:	68f8      	ldr	r0, [r7, #12]
 8003746:	f7ff fe96 	bl	8003476 <bb_invertBit>
 800374a:	e000      	b.n	800374e <applyMask+0x1c2>
            if (bb_getBit(isFunction, x, y)) { continue; }
 800374c:	bf00      	nop
        for (uint8_t x = 0; x < size; x++) {
 800374e:	7dbb      	ldrb	r3, [r7, #22]
 8003750:	3301      	adds	r3, #1
 8003752:	75bb      	strb	r3, [r7, #22]
 8003754:	7dba      	ldrb	r2, [r7, #22]
 8003756:	7d3b      	ldrb	r3, [r7, #20]
 8003758:	429a      	cmp	r2, r3
 800375a:	f4ff af27 	bcc.w	80035ac <applyMask+0x20>
    for (uint8_t y = 0; y < size; y++) {
 800375e:	7dfb      	ldrb	r3, [r7, #23]
 8003760:	3301      	adds	r3, #1
 8003762:	75fb      	strb	r3, [r7, #23]
 8003764:	7dfa      	ldrb	r2, [r7, #23]
 8003766:	7d3b      	ldrb	r3, [r7, #20]
 8003768:	429a      	cmp	r2, r3
 800376a:	f4ff af1c 	bcc.w	80035a6 <applyMask+0x1a>
        }
    }
}
 800376e:	bf00      	nop
 8003770:	bf00      	nop
 8003772:	3718      	adds	r7, #24
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}
 8003778:	aaaaaaab 	.word	0xaaaaaaab
 800377c:	55555556 	.word	0x55555556

08003780 <setFunctionModule>:

static void setFunctionModule(BitBucket *modules, BitBucket *isFunction, uint8_t x, uint8_t y, bool on) {
 8003780:	b580      	push	{r7, lr}
 8003782:	b084      	sub	sp, #16
 8003784:	af00      	add	r7, sp, #0
 8003786:	60f8      	str	r0, [r7, #12]
 8003788:	60b9      	str	r1, [r7, #8]
 800378a:	4611      	mov	r1, r2
 800378c:	461a      	mov	r2, r3
 800378e:	460b      	mov	r3, r1
 8003790:	71fb      	strb	r3, [r7, #7]
 8003792:	4613      	mov	r3, r2
 8003794:	71bb      	strb	r3, [r7, #6]
    bb_setBit(modules, x, y, on);
 8003796:	7e3b      	ldrb	r3, [r7, #24]
 8003798:	79ba      	ldrb	r2, [r7, #6]
 800379a:	79f9      	ldrb	r1, [r7, #7]
 800379c:	68f8      	ldr	r0, [r7, #12]
 800379e:	f7ff fe20 	bl	80033e2 <bb_setBit>
    bb_setBit(isFunction, x, y, true);
 80037a2:	2301      	movs	r3, #1
 80037a4:	79ba      	ldrb	r2, [r7, #6]
 80037a6:	79f9      	ldrb	r1, [r7, #7]
 80037a8:	68b8      	ldr	r0, [r7, #8]
 80037aa:	f7ff fe1a 	bl	80033e2 <bb_setBit>
}
 80037ae:	bf00      	nop
 80037b0:	3710      	adds	r7, #16
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}

080037b6 <drawFinderPattern>:

// Draws a 9*9 finder pattern including the border separator, with the center module at (x, y).
static void drawFinderPattern(BitBucket *modules, BitBucket *isFunction, uint8_t x, uint8_t y) {
 80037b6:	b580      	push	{r7, lr}
 80037b8:	b088      	sub	sp, #32
 80037ba:	af02      	add	r7, sp, #8
 80037bc:	60f8      	str	r0, [r7, #12]
 80037be:	60b9      	str	r1, [r7, #8]
 80037c0:	4611      	mov	r1, r2
 80037c2:	461a      	mov	r2, r3
 80037c4:	460b      	mov	r3, r1
 80037c6:	71fb      	strb	r3, [r7, #7]
 80037c8:	4613      	mov	r3, r2
 80037ca:	71bb      	strb	r3, [r7, #6]
    uint8_t size = modules->bitOffsetOrWidth;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	757b      	strb	r3, [r7, #21]

    for (int8_t i = -4; i <= 4; i++) {
 80037d2:	23fc      	movs	r3, #252	; 0xfc
 80037d4:	75fb      	strb	r3, [r7, #23]
 80037d6:	e059      	b.n	800388c <drawFinderPattern+0xd6>
        for (int8_t j = -4; j <= 4; j++) {
 80037d8:	23fc      	movs	r3, #252	; 0xfc
 80037da:	75bb      	strb	r3, [r7, #22]
 80037dc:	e04c      	b.n	8003878 <drawFinderPattern+0xc2>
            uint8_t dist = max(abs(i), abs(j));  // Chebyshev/infinity norm
 80037de:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	bfb8      	it	lt
 80037e6:	425b      	neglt	r3, r3
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	461a      	mov	r2, r3
 80037ec:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	bfb8      	it	lt
 80037f4:	425b      	neglt	r3, r3
 80037f6:	b2db      	uxtb	r3, r3
 80037f8:	4619      	mov	r1, r3
 80037fa:	4610      	mov	r0, r2
 80037fc:	f7ff fc5c 	bl	80030b8 <max>
 8003800:	4603      	mov	r3, r0
 8003802:	753b      	strb	r3, [r7, #20]
            int16_t xx = x + j, yy = y + i;
 8003804:	79fb      	ldrb	r3, [r7, #7]
 8003806:	b21a      	sxth	r2, r3
 8003808:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800380c:	b21b      	sxth	r3, r3
 800380e:	4413      	add	r3, r2
 8003810:	827b      	strh	r3, [r7, #18]
 8003812:	79bb      	ldrb	r3, [r7, #6]
 8003814:	b21a      	sxth	r2, r3
 8003816:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800381a:	b21b      	sxth	r3, r3
 800381c:	4413      	add	r3, r2
 800381e:	823b      	strh	r3, [r7, #16]
            if (0 <= xx && xx < size && 0 <= yy && yy < size) {
 8003820:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003824:	2b00      	cmp	r3, #0
 8003826:	db21      	blt.n	800386c <drawFinderPattern+0xb6>
 8003828:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800382c:	7d7b      	ldrb	r3, [r7, #21]
 800382e:	429a      	cmp	r2, r3
 8003830:	da1c      	bge.n	800386c <drawFinderPattern+0xb6>
 8003832:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003836:	2b00      	cmp	r3, #0
 8003838:	db18      	blt.n	800386c <drawFinderPattern+0xb6>
 800383a:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800383e:	7d7b      	ldrb	r3, [r7, #21]
 8003840:	429a      	cmp	r2, r3
 8003842:	da13      	bge.n	800386c <drawFinderPattern+0xb6>
                setFunctionModule(modules, isFunction, xx, yy, dist != 2 && dist != 4);
 8003844:	8a7b      	ldrh	r3, [r7, #18]
 8003846:	b2da      	uxtb	r2, r3
 8003848:	8a3b      	ldrh	r3, [r7, #16]
 800384a:	b2d9      	uxtb	r1, r3
 800384c:	7d3b      	ldrb	r3, [r7, #20]
 800384e:	2b02      	cmp	r3, #2
 8003850:	d004      	beq.n	800385c <drawFinderPattern+0xa6>
 8003852:	7d3b      	ldrb	r3, [r7, #20]
 8003854:	2b04      	cmp	r3, #4
 8003856:	d001      	beq.n	800385c <drawFinderPattern+0xa6>
 8003858:	2301      	movs	r3, #1
 800385a:	e000      	b.n	800385e <drawFinderPattern+0xa8>
 800385c:	2300      	movs	r3, #0
 800385e:	b2db      	uxtb	r3, r3
 8003860:	9300      	str	r3, [sp, #0]
 8003862:	460b      	mov	r3, r1
 8003864:	68b9      	ldr	r1, [r7, #8]
 8003866:	68f8      	ldr	r0, [r7, #12]
 8003868:	f7ff ff8a 	bl	8003780 <setFunctionModule>
        for (int8_t j = -4; j <= 4; j++) {
 800386c:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003870:	b2db      	uxtb	r3, r3
 8003872:	3301      	adds	r3, #1
 8003874:	b2db      	uxtb	r3, r3
 8003876:	75bb      	strb	r3, [r7, #22]
 8003878:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800387c:	2b04      	cmp	r3, #4
 800387e:	ddae      	ble.n	80037de <drawFinderPattern+0x28>
    for (int8_t i = -4; i <= 4; i++) {
 8003880:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003884:	b2db      	uxtb	r3, r3
 8003886:	3301      	adds	r3, #1
 8003888:	b2db      	uxtb	r3, r3
 800388a:	75fb      	strb	r3, [r7, #23]
 800388c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003890:	2b04      	cmp	r3, #4
 8003892:	dda1      	ble.n	80037d8 <drawFinderPattern+0x22>
            }
        }
    }
}
 8003894:	bf00      	nop
 8003896:	bf00      	nop
 8003898:	3718      	adds	r7, #24
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}

0800389e <drawAlignmentPattern>:

// Draws a 5*5 alignment pattern, with the center module at (x, y).
static void drawAlignmentPattern(BitBucket *modules, BitBucket *isFunction, uint8_t x, uint8_t y) {
 800389e:	b5b0      	push	{r4, r5, r7, lr}
 80038a0:	b088      	sub	sp, #32
 80038a2:	af02      	add	r7, sp, #8
 80038a4:	60f8      	str	r0, [r7, #12]
 80038a6:	60b9      	str	r1, [r7, #8]
 80038a8:	4611      	mov	r1, r2
 80038aa:	461a      	mov	r2, r3
 80038ac:	460b      	mov	r3, r1
 80038ae:	71fb      	strb	r3, [r7, #7]
 80038b0:	4613      	mov	r3, r2
 80038b2:	71bb      	strb	r3, [r7, #6]
    for (int8_t i = -2; i <= 2; i++) {
 80038b4:	23fe      	movs	r3, #254	; 0xfe
 80038b6:	75fb      	strb	r3, [r7, #23]
 80038b8:	e038      	b.n	800392c <drawAlignmentPattern+0x8e>
        for (int8_t j = -2; j <= 2; j++) {
 80038ba:	23fe      	movs	r3, #254	; 0xfe
 80038bc:	75bb      	strb	r3, [r7, #22]
 80038be:	e02b      	b.n	8003918 <drawAlignmentPattern+0x7a>
            setFunctionModule(modules, isFunction, x + j, y + i, max(abs(i), abs(j)) != 1);
 80038c0:	7dba      	ldrb	r2, [r7, #22]
 80038c2:	79fb      	ldrb	r3, [r7, #7]
 80038c4:	4413      	add	r3, r2
 80038c6:	b2dc      	uxtb	r4, r3
 80038c8:	7dfa      	ldrb	r2, [r7, #23]
 80038ca:	79bb      	ldrb	r3, [r7, #6]
 80038cc:	4413      	add	r3, r2
 80038ce:	b2dd      	uxtb	r5, r3
 80038d0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	bfb8      	it	lt
 80038d8:	425b      	neglt	r3, r3
 80038da:	b2db      	uxtb	r3, r3
 80038dc:	461a      	mov	r2, r3
 80038de:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	bfb8      	it	lt
 80038e6:	425b      	neglt	r3, r3
 80038e8:	b2db      	uxtb	r3, r3
 80038ea:	4619      	mov	r1, r3
 80038ec:	4610      	mov	r0, r2
 80038ee:	f7ff fbe3 	bl	80030b8 <max>
 80038f2:	4603      	mov	r3, r0
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	bf14      	ite	ne
 80038f8:	2301      	movne	r3, #1
 80038fa:	2300      	moveq	r3, #0
 80038fc:	b2db      	uxtb	r3, r3
 80038fe:	9300      	str	r3, [sp, #0]
 8003900:	462b      	mov	r3, r5
 8003902:	4622      	mov	r2, r4
 8003904:	68b9      	ldr	r1, [r7, #8]
 8003906:	68f8      	ldr	r0, [r7, #12]
 8003908:	f7ff ff3a 	bl	8003780 <setFunctionModule>
        for (int8_t j = -2; j <= 2; j++) {
 800390c:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003910:	b2db      	uxtb	r3, r3
 8003912:	3301      	adds	r3, #1
 8003914:	b2db      	uxtb	r3, r3
 8003916:	75bb      	strb	r3, [r7, #22]
 8003918:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800391c:	2b02      	cmp	r3, #2
 800391e:	ddcf      	ble.n	80038c0 <drawAlignmentPattern+0x22>
    for (int8_t i = -2; i <= 2; i++) {
 8003920:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003924:	b2db      	uxtb	r3, r3
 8003926:	3301      	adds	r3, #1
 8003928:	b2db      	uxtb	r3, r3
 800392a:	75fb      	strb	r3, [r7, #23]
 800392c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003930:	2b02      	cmp	r3, #2
 8003932:	ddc2      	ble.n	80038ba <drawAlignmentPattern+0x1c>
        }
    }
}
 8003934:	bf00      	nop
 8003936:	bf00      	nop
 8003938:	3718      	adds	r7, #24
 800393a:	46bd      	mov	sp, r7
 800393c:	bdb0      	pop	{r4, r5, r7, pc}

0800393e <drawFormatBits>:

// Draws two copies of the format bits (with its own error correction code)
// based on the given mask and this object's error correction level field.
static void drawFormatBits(BitBucket *modules, BitBucket *isFunction, uint8_t ecc, uint8_t mask) {
 800393e:	b580      	push	{r7, lr}
 8003940:	b08c      	sub	sp, #48	; 0x30
 8003942:	af02      	add	r7, sp, #8
 8003944:	60f8      	str	r0, [r7, #12]
 8003946:	60b9      	str	r1, [r7, #8]
 8003948:	4611      	mov	r1, r2
 800394a:	461a      	mov	r2, r3
 800394c:	460b      	mov	r3, r1
 800394e:	71fb      	strb	r3, [r7, #7]
 8003950:	4613      	mov	r3, r2
 8003952:	71bb      	strb	r3, [r7, #6]
    
    uint8_t size = modules->bitOffsetOrWidth;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	76fb      	strb	r3, [r7, #27]

    // Calculate error correction code and pack bits
    uint32_t data = ecc << 3 | mask;  // errCorrLvl is uint2, mask is uint3
 800395a:	79fb      	ldrb	r3, [r7, #7]
 800395c:	00da      	lsls	r2, r3, #3
 800395e:	79bb      	ldrb	r3, [r7, #6]
 8003960:	4313      	orrs	r3, r2
 8003962:	617b      	str	r3, [r7, #20]
    uint32_t rem = data;
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	627b      	str	r3, [r7, #36]	; 0x24
    for (int i = 0; i < 10; i++) {
 8003968:	2300      	movs	r3, #0
 800396a:	623b      	str	r3, [r7, #32]
 800396c:	e00c      	b.n	8003988 <drawFormatBits+0x4a>
        rem = (rem << 1) ^ ((rem >> 9) * 0x537);
 800396e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003970:	005a      	lsls	r2, r3, #1
 8003972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003974:	0a5b      	lsrs	r3, r3, #9
 8003976:	f240 5137 	movw	r1, #1335	; 0x537
 800397a:	fb01 f303 	mul.w	r3, r1, r3
 800397e:	4053      	eors	r3, r2
 8003980:	627b      	str	r3, [r7, #36]	; 0x24
    for (int i = 0; i < 10; i++) {
 8003982:	6a3b      	ldr	r3, [r7, #32]
 8003984:	3301      	adds	r3, #1
 8003986:	623b      	str	r3, [r7, #32]
 8003988:	6a3b      	ldr	r3, [r7, #32]
 800398a:	2b09      	cmp	r3, #9
 800398c:	ddef      	ble.n	800396e <drawFormatBits+0x30>
    }
    
    data = data << 10 | rem;
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	029b      	lsls	r3, r3, #10
 8003992:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003994:	4313      	orrs	r3, r2
 8003996:	617b      	str	r3, [r7, #20]
    data ^= 0x5412;  // uint15
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	f483 43a8 	eor.w	r3, r3, #21504	; 0x5400
 800399e:	f083 0312 	eor.w	r3, r3, #18
 80039a2:	617b      	str	r3, [r7, #20]
    
    // Draw first copy
    for (uint8_t i = 0; i <= 5; i++) {
 80039a4:	2300      	movs	r3, #0
 80039a6:	77fb      	strb	r3, [r7, #31]
 80039a8:	e015      	b.n	80039d6 <drawFormatBits+0x98>
        setFunctionModule(modules, isFunction, 8, i, ((data >> i) & 1) != 0);
 80039aa:	7ffb      	ldrb	r3, [r7, #31]
 80039ac:	697a      	ldr	r2, [r7, #20]
 80039ae:	fa22 f303 	lsr.w	r3, r2, r3
 80039b2:	f003 0301 	and.w	r3, r3, #1
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	bf14      	ite	ne
 80039ba:	2301      	movne	r3, #1
 80039bc:	2300      	moveq	r3, #0
 80039be:	b2db      	uxtb	r3, r3
 80039c0:	461a      	mov	r2, r3
 80039c2:	7ffb      	ldrb	r3, [r7, #31]
 80039c4:	9200      	str	r2, [sp, #0]
 80039c6:	2208      	movs	r2, #8
 80039c8:	68b9      	ldr	r1, [r7, #8]
 80039ca:	68f8      	ldr	r0, [r7, #12]
 80039cc:	f7ff fed8 	bl	8003780 <setFunctionModule>
    for (uint8_t i = 0; i <= 5; i++) {
 80039d0:	7ffb      	ldrb	r3, [r7, #31]
 80039d2:	3301      	adds	r3, #1
 80039d4:	77fb      	strb	r3, [r7, #31]
 80039d6:	7ffb      	ldrb	r3, [r7, #31]
 80039d8:	2b05      	cmp	r3, #5
 80039da:	d9e6      	bls.n	80039aa <drawFormatBits+0x6c>
    }
    
    setFunctionModule(modules, isFunction, 8, 7, ((data >> 6) & 1) != 0);
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	099b      	lsrs	r3, r3, #6
 80039e0:	f003 0301 	and.w	r3, r3, #1
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	bf14      	ite	ne
 80039e8:	2301      	movne	r3, #1
 80039ea:	2300      	moveq	r3, #0
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	9300      	str	r3, [sp, #0]
 80039f0:	2307      	movs	r3, #7
 80039f2:	2208      	movs	r2, #8
 80039f4:	68b9      	ldr	r1, [r7, #8]
 80039f6:	68f8      	ldr	r0, [r7, #12]
 80039f8:	f7ff fec2 	bl	8003780 <setFunctionModule>
    setFunctionModule(modules, isFunction, 8, 8, ((data >> 7) & 1) != 0);
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	09db      	lsrs	r3, r3, #7
 8003a00:	f003 0301 	and.w	r3, r3, #1
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	bf14      	ite	ne
 8003a08:	2301      	movne	r3, #1
 8003a0a:	2300      	moveq	r3, #0
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	9300      	str	r3, [sp, #0]
 8003a10:	2308      	movs	r3, #8
 8003a12:	2208      	movs	r2, #8
 8003a14:	68b9      	ldr	r1, [r7, #8]
 8003a16:	68f8      	ldr	r0, [r7, #12]
 8003a18:	f7ff feb2 	bl	8003780 <setFunctionModule>
    setFunctionModule(modules, isFunction, 7, 8, ((data >> 8) & 1) != 0);
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	0a1b      	lsrs	r3, r3, #8
 8003a20:	f003 0301 	and.w	r3, r3, #1
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	bf14      	ite	ne
 8003a28:	2301      	movne	r3, #1
 8003a2a:	2300      	moveq	r3, #0
 8003a2c:	b2db      	uxtb	r3, r3
 8003a2e:	9300      	str	r3, [sp, #0]
 8003a30:	2308      	movs	r3, #8
 8003a32:	2207      	movs	r2, #7
 8003a34:	68b9      	ldr	r1, [r7, #8]
 8003a36:	68f8      	ldr	r0, [r7, #12]
 8003a38:	f7ff fea2 	bl	8003780 <setFunctionModule>
    
    for (int8_t i = 9; i < 15; i++) {
 8003a3c:	2309      	movs	r3, #9
 8003a3e:	77bb      	strb	r3, [r7, #30]
 8003a40:	e01c      	b.n	8003a7c <drawFormatBits+0x13e>
        setFunctionModule(modules, isFunction, 14 - i, 8, ((data >> i) & 1) != 0);
 8003a42:	7fbb      	ldrb	r3, [r7, #30]
 8003a44:	f1c3 030e 	rsb	r3, r3, #14
 8003a48:	b2d9      	uxtb	r1, r3
 8003a4a:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8003a4e:	697a      	ldr	r2, [r7, #20]
 8003a50:	fa22 f303 	lsr.w	r3, r2, r3
 8003a54:	f003 0301 	and.w	r3, r3, #1
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	bf14      	ite	ne
 8003a5c:	2301      	movne	r3, #1
 8003a5e:	2300      	moveq	r3, #0
 8003a60:	b2db      	uxtb	r3, r3
 8003a62:	9300      	str	r3, [sp, #0]
 8003a64:	2308      	movs	r3, #8
 8003a66:	460a      	mov	r2, r1
 8003a68:	68b9      	ldr	r1, [r7, #8]
 8003a6a:	68f8      	ldr	r0, [r7, #12]
 8003a6c:	f7ff fe88 	bl	8003780 <setFunctionModule>
    for (int8_t i = 9; i < 15; i++) {
 8003a70:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8003a74:	b2db      	uxtb	r3, r3
 8003a76:	3301      	adds	r3, #1
 8003a78:	b2db      	uxtb	r3, r3
 8003a7a:	77bb      	strb	r3, [r7, #30]
 8003a7c:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8003a80:	2b0e      	cmp	r3, #14
 8003a82:	ddde      	ble.n	8003a42 <drawFormatBits+0x104>
    }
    
    // Draw second copy
    for (int8_t i = 0; i <= 7; i++) {
 8003a84:	2300      	movs	r3, #0
 8003a86:	777b      	strb	r3, [r7, #29]
 8003a88:	e01e      	b.n	8003ac8 <drawFormatBits+0x18a>
        setFunctionModule(modules, isFunction, size - 1 - i, 8, ((data >> i) & 1) != 0);
 8003a8a:	7f7b      	ldrb	r3, [r7, #29]
 8003a8c:	7efa      	ldrb	r2, [r7, #27]
 8003a8e:	1ad3      	subs	r3, r2, r3
 8003a90:	b2db      	uxtb	r3, r3
 8003a92:	3b01      	subs	r3, #1
 8003a94:	b2d9      	uxtb	r1, r3
 8003a96:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8003a9a:	697a      	ldr	r2, [r7, #20]
 8003a9c:	fa22 f303 	lsr.w	r3, r2, r3
 8003aa0:	f003 0301 	and.w	r3, r3, #1
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	bf14      	ite	ne
 8003aa8:	2301      	movne	r3, #1
 8003aaa:	2300      	moveq	r3, #0
 8003aac:	b2db      	uxtb	r3, r3
 8003aae:	9300      	str	r3, [sp, #0]
 8003ab0:	2308      	movs	r3, #8
 8003ab2:	460a      	mov	r2, r1
 8003ab4:	68b9      	ldr	r1, [r7, #8]
 8003ab6:	68f8      	ldr	r0, [r7, #12]
 8003ab8:	f7ff fe62 	bl	8003780 <setFunctionModule>
    for (int8_t i = 0; i <= 7; i++) {
 8003abc:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	3301      	adds	r3, #1
 8003ac4:	b2db      	uxtb	r3, r3
 8003ac6:	777b      	strb	r3, [r7, #29]
 8003ac8:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8003acc:	2b07      	cmp	r3, #7
 8003ace:	dddc      	ble.n	8003a8a <drawFormatBits+0x14c>
    }
    
    for (int8_t i = 8; i < 15; i++) {
 8003ad0:	2308      	movs	r3, #8
 8003ad2:	773b      	strb	r3, [r7, #28]
 8003ad4:	e01e      	b.n	8003b14 <drawFormatBits+0x1d6>
        setFunctionModule(modules, isFunction, 8, size - 15 + i, ((data >> i) & 1) != 0);
 8003ad6:	7f3a      	ldrb	r2, [r7, #28]
 8003ad8:	7efb      	ldrb	r3, [r7, #27]
 8003ada:	4413      	add	r3, r2
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	3b0f      	subs	r3, #15
 8003ae0:	b2d9      	uxtb	r1, r3
 8003ae2:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8003ae6:	697a      	ldr	r2, [r7, #20]
 8003ae8:	fa22 f303 	lsr.w	r3, r2, r3
 8003aec:	f003 0301 	and.w	r3, r3, #1
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	bf14      	ite	ne
 8003af4:	2301      	movne	r3, #1
 8003af6:	2300      	moveq	r3, #0
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	9300      	str	r3, [sp, #0]
 8003afc:	460b      	mov	r3, r1
 8003afe:	2208      	movs	r2, #8
 8003b00:	68b9      	ldr	r1, [r7, #8]
 8003b02:	68f8      	ldr	r0, [r7, #12]
 8003b04:	f7ff fe3c 	bl	8003780 <setFunctionModule>
    for (int8_t i = 8; i < 15; i++) {
 8003b08:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	3301      	adds	r3, #1
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	773b      	strb	r3, [r7, #28]
 8003b14:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8003b18:	2b0e      	cmp	r3, #14
 8003b1a:	dddc      	ble.n	8003ad6 <drawFormatBits+0x198>
    }
    
    setFunctionModule(modules, isFunction, 8, size - 8, true);
 8003b1c:	7efb      	ldrb	r3, [r7, #27]
 8003b1e:	3b08      	subs	r3, #8
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	2201      	movs	r2, #1
 8003b24:	9200      	str	r2, [sp, #0]
 8003b26:	2208      	movs	r2, #8
 8003b28:	68b9      	ldr	r1, [r7, #8]
 8003b2a:	68f8      	ldr	r0, [r7, #12]
 8003b2c:	f7ff fe28 	bl	8003780 <setFunctionModule>
}
 8003b30:	bf00      	nop
 8003b32:	3728      	adds	r7, #40	; 0x28
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}

08003b38 <drawVersion>:


// Draws two copies of the version bits (with its own error correction code),
// based on this object's version field (which only has an effect for 7 <= version <= 40).
static void drawVersion(BitBucket *modules, BitBucket *isFunction, uint8_t version) {
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b08a      	sub	sp, #40	; 0x28
 8003b3c:	af02      	add	r7, sp, #8
 8003b3e:	60f8      	str	r0, [r7, #12]
 8003b40:	60b9      	str	r1, [r7, #8]
 8003b42:	4613      	mov	r3, r2
 8003b44:	71fb      	strb	r3, [r7, #7]
    
    int8_t size = modules->bitOffsetOrWidth;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	767b      	strb	r3, [r7, #25]

#if LOCK_VERSION != 0 && LOCK_VERSION < 7
    return;
    
#else
    if (version < 7) { return; }
 8003b4c:	79fb      	ldrb	r3, [r7, #7]
 8003b4e:	2b06      	cmp	r3, #6
 8003b50:	d957      	bls.n	8003c02 <drawVersion+0xca>
    
    // Calculate error correction code and pack bits
    uint32_t rem = version;  // version is uint6, in the range [7, 40]
 8003b52:	79fb      	ldrb	r3, [r7, #7]
 8003b54:	61fb      	str	r3, [r7, #28]
    for (uint8_t i = 0; i < 12; i++) {
 8003b56:	2300      	movs	r3, #0
 8003b58:	76fb      	strb	r3, [r7, #27]
 8003b5a:	e00c      	b.n	8003b76 <drawVersion+0x3e>
        rem = (rem << 1) ^ ((rem >> 11) * 0x1F25);
 8003b5c:	69fb      	ldr	r3, [r7, #28]
 8003b5e:	005a      	lsls	r2, r3, #1
 8003b60:	69fb      	ldr	r3, [r7, #28]
 8003b62:	0adb      	lsrs	r3, r3, #11
 8003b64:	f641 7125 	movw	r1, #7973	; 0x1f25
 8003b68:	fb01 f303 	mul.w	r3, r1, r3
 8003b6c:	4053      	eors	r3, r2
 8003b6e:	61fb      	str	r3, [r7, #28]
    for (uint8_t i = 0; i < 12; i++) {
 8003b70:	7efb      	ldrb	r3, [r7, #27]
 8003b72:	3301      	adds	r3, #1
 8003b74:	76fb      	strb	r3, [r7, #27]
 8003b76:	7efb      	ldrb	r3, [r7, #27]
 8003b78:	2b0b      	cmp	r3, #11
 8003b7a:	d9ef      	bls.n	8003b5c <drawVersion+0x24>
    }
    
    uint32_t data = version << 12 | rem;  // uint18
 8003b7c:	79fb      	ldrb	r3, [r7, #7]
 8003b7e:	031b      	lsls	r3, r3, #12
 8003b80:	461a      	mov	r2, r3
 8003b82:	69fb      	ldr	r3, [r7, #28]
 8003b84:	4313      	orrs	r3, r2
 8003b86:	617b      	str	r3, [r7, #20]
    
    // Draw two copies
    for (uint8_t i = 0; i < 18; i++) {
 8003b88:	2300      	movs	r3, #0
 8003b8a:	76bb      	strb	r3, [r7, #26]
 8003b8c:	e035      	b.n	8003bfa <drawVersion+0xc2>
        bool bit = ((data >> i) & 1) != 0;
 8003b8e:	7ebb      	ldrb	r3, [r7, #26]
 8003b90:	697a      	ldr	r2, [r7, #20]
 8003b92:	fa22 f303 	lsr.w	r3, r2, r3
 8003b96:	f003 0301 	and.w	r3, r3, #1
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	bf14      	ite	ne
 8003b9e:	2301      	movne	r3, #1
 8003ba0:	2300      	moveq	r3, #0
 8003ba2:	b2db      	uxtb	r3, r3
 8003ba4:	74fb      	strb	r3, [r7, #19]
        uint8_t a = size - 11 + i % 3, b = i / 3;
 8003ba6:	7eba      	ldrb	r2, [r7, #26]
 8003ba8:	4b18      	ldr	r3, [pc, #96]	; (8003c0c <drawVersion+0xd4>)
 8003baa:	fba3 1302 	umull	r1, r3, r3, r2
 8003bae:	0859      	lsrs	r1, r3, #1
 8003bb0:	460b      	mov	r3, r1
 8003bb2:	005b      	lsls	r3, r3, #1
 8003bb4:	440b      	add	r3, r1
 8003bb6:	1ad3      	subs	r3, r2, r3
 8003bb8:	b2da      	uxtb	r2, r3
 8003bba:	7e7b      	ldrb	r3, [r7, #25]
 8003bbc:	4413      	add	r3, r2
 8003bbe:	b2db      	uxtb	r3, r3
 8003bc0:	3b0b      	subs	r3, #11
 8003bc2:	74bb      	strb	r3, [r7, #18]
 8003bc4:	7ebb      	ldrb	r3, [r7, #26]
 8003bc6:	4a11      	ldr	r2, [pc, #68]	; (8003c0c <drawVersion+0xd4>)
 8003bc8:	fba2 2303 	umull	r2, r3, r2, r3
 8003bcc:	085b      	lsrs	r3, r3, #1
 8003bce:	747b      	strb	r3, [r7, #17]
        setFunctionModule(modules, isFunction, a, b, bit);
 8003bd0:	7c79      	ldrb	r1, [r7, #17]
 8003bd2:	7cba      	ldrb	r2, [r7, #18]
 8003bd4:	7cfb      	ldrb	r3, [r7, #19]
 8003bd6:	9300      	str	r3, [sp, #0]
 8003bd8:	460b      	mov	r3, r1
 8003bda:	68b9      	ldr	r1, [r7, #8]
 8003bdc:	68f8      	ldr	r0, [r7, #12]
 8003bde:	f7ff fdcf 	bl	8003780 <setFunctionModule>
        setFunctionModule(modules, isFunction, b, a, bit);
 8003be2:	7cb9      	ldrb	r1, [r7, #18]
 8003be4:	7c7a      	ldrb	r2, [r7, #17]
 8003be6:	7cfb      	ldrb	r3, [r7, #19]
 8003be8:	9300      	str	r3, [sp, #0]
 8003bea:	460b      	mov	r3, r1
 8003bec:	68b9      	ldr	r1, [r7, #8]
 8003bee:	68f8      	ldr	r0, [r7, #12]
 8003bf0:	f7ff fdc6 	bl	8003780 <setFunctionModule>
    for (uint8_t i = 0; i < 18; i++) {
 8003bf4:	7ebb      	ldrb	r3, [r7, #26]
 8003bf6:	3301      	adds	r3, #1
 8003bf8:	76bb      	strb	r3, [r7, #26]
 8003bfa:	7ebb      	ldrb	r3, [r7, #26]
 8003bfc:	2b11      	cmp	r3, #17
 8003bfe:	d9c6      	bls.n	8003b8e <drawVersion+0x56>
 8003c00:	e000      	b.n	8003c04 <drawVersion+0xcc>
    if (version < 7) { return; }
 8003c02:	bf00      	nop
    }
    
#endif
}
 8003c04:	3720      	adds	r7, #32
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}
 8003c0a:	bf00      	nop
 8003c0c:	aaaaaaab 	.word	0xaaaaaaab

08003c10 <drawFunctionPatterns>:

static void drawFunctionPatterns(BitBucket *modules, BitBucket *isFunction, uint8_t version, uint8_t ecc) {
 8003c10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003c14:	b08d      	sub	sp, #52	; 0x34
 8003c16:	af02      	add	r7, sp, #8
 8003c18:	60f8      	str	r0, [r7, #12]
 8003c1a:	60b9      	str	r1, [r7, #8]
 8003c1c:	4611      	mov	r1, r2
 8003c1e:	461a      	mov	r2, r3
 8003c20:	460b      	mov	r3, r1
 8003c22:	71fb      	strb	r3, [r7, #7]
 8003c24:	4613      	mov	r3, r2
 8003c26:	71bb      	strb	r3, [r7, #6]
    
    uint8_t size = modules->bitOffsetOrWidth;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f887 3020 	strb.w	r3, [r7, #32]

    // Draw the horizontal and vertical timing patterns
    for (uint8_t i = 0; i < size; i++) {
 8003c30:	2300      	movs	r3, #0
 8003c32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c36:	e029      	b.n	8003c8c <drawFunctionPatterns+0x7c>
        setFunctionModule(modules, isFunction, 6, i, i % 2 == 0);
 8003c38:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003c3c:	f003 0301 	and.w	r3, r3, #1
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	bf0c      	ite	eq
 8003c46:	2301      	moveq	r3, #1
 8003c48:	2300      	movne	r3, #0
 8003c4a:	b2db      	uxtb	r3, r3
 8003c4c:	461a      	mov	r2, r3
 8003c4e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003c52:	9200      	str	r2, [sp, #0]
 8003c54:	2206      	movs	r2, #6
 8003c56:	68b9      	ldr	r1, [r7, #8]
 8003c58:	68f8      	ldr	r0, [r7, #12]
 8003c5a:	f7ff fd91 	bl	8003780 <setFunctionModule>
        setFunctionModule(modules, isFunction, i, 6, i % 2 == 0);
 8003c5e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003c62:	f003 0301 	and.w	r3, r3, #1
 8003c66:	b2db      	uxtb	r3, r3
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	bf0c      	ite	eq
 8003c6c:	2301      	moveq	r3, #1
 8003c6e:	2300      	movne	r3, #0
 8003c70:	b2db      	uxtb	r3, r3
 8003c72:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8003c76:	9300      	str	r3, [sp, #0]
 8003c78:	2306      	movs	r3, #6
 8003c7a:	68b9      	ldr	r1, [r7, #8]
 8003c7c:	68f8      	ldr	r0, [r7, #12]
 8003c7e:	f7ff fd7f 	bl	8003780 <setFunctionModule>
    for (uint8_t i = 0; i < size; i++) {
 8003c82:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003c86:	3301      	adds	r3, #1
 8003c88:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c8c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8003c90:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003c94:	429a      	cmp	r2, r3
 8003c96:	d3cf      	bcc.n	8003c38 <drawFunctionPatterns+0x28>
    }
    
    // Draw 3 finder patterns (all corners except bottom right; overwrites some timing modules)
    drawFinderPattern(modules, isFunction, 3, 3);
 8003c98:	2303      	movs	r3, #3
 8003c9a:	2203      	movs	r2, #3
 8003c9c:	68b9      	ldr	r1, [r7, #8]
 8003c9e:	68f8      	ldr	r0, [r7, #12]
 8003ca0:	f7ff fd89 	bl	80037b6 <drawFinderPattern>
    drawFinderPattern(modules, isFunction, size - 4, 3);
 8003ca4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003ca8:	3b04      	subs	r3, #4
 8003caa:	b2da      	uxtb	r2, r3
 8003cac:	2303      	movs	r3, #3
 8003cae:	68b9      	ldr	r1, [r7, #8]
 8003cb0:	68f8      	ldr	r0, [r7, #12]
 8003cb2:	f7ff fd80 	bl	80037b6 <drawFinderPattern>
    drawFinderPattern(modules, isFunction, 3, size - 4);
 8003cb6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003cba:	3b04      	subs	r3, #4
 8003cbc:	b2db      	uxtb	r3, r3
 8003cbe:	2203      	movs	r2, #3
 8003cc0:	68b9      	ldr	r1, [r7, #8]
 8003cc2:	68f8      	ldr	r0, [r7, #12]
 8003cc4:	f7ff fd77 	bl	80037b6 <drawFinderPattern>
    
#if LOCK_VERSION == 0 || LOCK_VERSION > 1

    if (version > 1) {
 8003cc8:	79fb      	ldrb	r3, [r7, #7]
 8003cca:	2b01      	cmp	r3, #1
 8003ccc:	f240 80c2 	bls.w	8003e54 <drawFunctionPatterns+0x244>
 8003cd0:	466b      	mov	r3, sp
 8003cd2:	461e      	mov	r6, r3

        // Draw the numerous alignment patterns
        
        uint8_t alignCount = version / 7 + 2;
 8003cd4:	79fa      	ldrb	r2, [r7, #7]
 8003cd6:	4b68      	ldr	r3, [pc, #416]	; (8003e78 <drawFunctionPatterns+0x268>)
 8003cd8:	fba3 1302 	umull	r1, r3, r3, r2
 8003cdc:	1ad2      	subs	r2, r2, r3
 8003cde:	0852      	lsrs	r2, r2, #1
 8003ce0:	4413      	add	r3, r2
 8003ce2:	089b      	lsrs	r3, r3, #2
 8003ce4:	b2db      	uxtb	r3, r3
 8003ce6:	3302      	adds	r3, #2
 8003ce8:	77fb      	strb	r3, [r7, #31]
        uint8_t step;
        if (version != 32) {
 8003cea:	79fb      	ldrb	r3, [r7, #7]
 8003cec:	2b20      	cmp	r3, #32
 8003cee:	d00f      	beq.n	8003d10 <drawFunctionPatterns+0x100>
            step = (version * 4 + alignCount * 2 + 1) / (2 * alignCount - 2) * 2;  // ceil((size - 13) / (2*numAlign - 2)) * 2
 8003cf0:	79fb      	ldrb	r3, [r7, #7]
 8003cf2:	005a      	lsls	r2, r3, #1
 8003cf4:	7ffb      	ldrb	r3, [r7, #31]
 8003cf6:	4413      	add	r3, r2
 8003cf8:	005b      	lsls	r3, r3, #1
 8003cfa:	1c5a      	adds	r2, r3, #1
 8003cfc:	7ffb      	ldrb	r3, [r7, #31]
 8003cfe:	3b01      	subs	r3, #1
 8003d00:	005b      	lsls	r3, r3, #1
 8003d02:	fb92 f3f3 	sdiv	r3, r2, r3
 8003d06:	b2db      	uxtb	r3, r3
 8003d08:	005b      	lsls	r3, r3, #1
 8003d0a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8003d0e:	e002      	b.n	8003d16 <drawFunctionPatterns+0x106>
        } else { // C-C-C-Combo breaker!
            step = 26;
 8003d10:	231a      	movs	r3, #26
 8003d12:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        }
        
        uint8_t alignPositionIndex = alignCount - 1;
 8003d16:	7ffb      	ldrb	r3, [r7, #31]
 8003d18:	3b01      	subs	r3, #1
 8003d1a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        uint8_t alignPosition[alignCount];
 8003d1e:	7ff9      	ldrb	r1, [r7, #31]
 8003d20:	460b      	mov	r3, r1
 8003d22:	3b01      	subs	r3, #1
 8003d24:	61bb      	str	r3, [r7, #24]
 8003d26:	b2cb      	uxtb	r3, r1
 8003d28:	2200      	movs	r2, #0
 8003d2a:	4698      	mov	r8, r3
 8003d2c:	4691      	mov	r9, r2
 8003d2e:	f04f 0200 	mov.w	r2, #0
 8003d32:	f04f 0300 	mov.w	r3, #0
 8003d36:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003d3a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003d3e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003d42:	b2cb      	uxtb	r3, r1
 8003d44:	2200      	movs	r2, #0
 8003d46:	461c      	mov	r4, r3
 8003d48:	4615      	mov	r5, r2
 8003d4a:	f04f 0200 	mov.w	r2, #0
 8003d4e:	f04f 0300 	mov.w	r3, #0
 8003d52:	00eb      	lsls	r3, r5, #3
 8003d54:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d58:	00e2      	lsls	r2, r4, #3
 8003d5a:	460b      	mov	r3, r1
 8003d5c:	3307      	adds	r3, #7
 8003d5e:	08db      	lsrs	r3, r3, #3
 8003d60:	00db      	lsls	r3, r3, #3
 8003d62:	ebad 0d03 	sub.w	sp, sp, r3
 8003d66:	ab02      	add	r3, sp, #8
 8003d68:	3300      	adds	r3, #0
 8003d6a:	617b      	str	r3, [r7, #20]
        
        alignPosition[0] = 6;
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	2206      	movs	r2, #6
 8003d70:	701a      	strb	r2, [r3, #0]
        
        uint8_t size = version * 4 + 17;
 8003d72:	79fb      	ldrb	r3, [r7, #7]
 8003d74:	009b      	lsls	r3, r3, #2
 8003d76:	b2db      	uxtb	r3, r3
 8003d78:	3311      	adds	r3, #17
 8003d7a:	74fb      	strb	r3, [r7, #19]
        for (uint8_t i = 0, pos = size - 7; i < alignCount - 1; i++, pos -= step) {
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8003d82:	7cfb      	ldrb	r3, [r7, #19]
 8003d84:	3b07      	subs	r3, #7
 8003d86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003d8a:	e015      	b.n	8003db8 <drawFunctionPatterns+0x1a8>
            alignPosition[alignPositionIndex--] = pos;
 8003d8c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003d90:	1e5a      	subs	r2, r3, #1
 8003d92:	f887 2025 	strb.w	r2, [r7, #37]	; 0x25
 8003d96:	4619      	mov	r1, r3
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003d9e:	545a      	strb	r2, [r3, r1]
        for (uint8_t i = 0, pos = size - 7; i < alignCount - 1; i++, pos -= step) {
 8003da0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003da4:	3301      	adds	r3, #1
 8003da6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8003daa:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003dae:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003db2:	1ad3      	subs	r3, r2, r3
 8003db4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003db8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8003dbc:	7ffb      	ldrb	r3, [r7, #31]
 8003dbe:	3b01      	subs	r3, #1
 8003dc0:	429a      	cmp	r2, r3
 8003dc2:	dbe3      	blt.n	8003d8c <drawFunctionPatterns+0x17c>
        }
        
        for (uint8_t i = 0; i < alignCount; i++) {
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003dca:	e03d      	b.n	8003e48 <drawFunctionPatterns+0x238>
            for (uint8_t j = 0; j < alignCount; j++) {
 8003dcc:	2300      	movs	r3, #0
 8003dce:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8003dd2:	e02f      	b.n	8003e34 <drawFunctionPatterns+0x224>
                if ((i == 0 && j == 0) || (i == 0 && j == alignCount - 1) || (i == alignCount - 1 && j == 0)) {
 8003dd4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d103      	bne.n	8003de4 <drawFunctionPatterns+0x1d4>
 8003ddc:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d021      	beq.n	8003e28 <drawFunctionPatterns+0x218>
 8003de4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d105      	bne.n	8003df8 <drawFunctionPatterns+0x1e8>
 8003dec:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8003df0:	7ffb      	ldrb	r3, [r7, #31]
 8003df2:	3b01      	subs	r3, #1
 8003df4:	429a      	cmp	r2, r3
 8003df6:	d017      	beq.n	8003e28 <drawFunctionPatterns+0x218>
 8003df8:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8003dfc:	7ffb      	ldrb	r3, [r7, #31]
 8003dfe:	3b01      	subs	r3, #1
 8003e00:	429a      	cmp	r2, r3
 8003e02:	d103      	bne.n	8003e0c <drawFunctionPatterns+0x1fc>
 8003e04:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d00d      	beq.n	8003e28 <drawFunctionPatterns+0x218>
                    continue;  // Skip the three finder corners
                } else {
                    drawAlignmentPattern(modules, isFunction, alignPosition[i], alignPosition[j]);
 8003e0c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8003e10:	697a      	ldr	r2, [r7, #20]
 8003e12:	5cd1      	ldrb	r1, [r2, r3]
 8003e14:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8003e18:	697a      	ldr	r2, [r7, #20]
 8003e1a:	5cd3      	ldrb	r3, [r2, r3]
 8003e1c:	460a      	mov	r2, r1
 8003e1e:	68b9      	ldr	r1, [r7, #8]
 8003e20:	68f8      	ldr	r0, [r7, #12]
 8003e22:	f7ff fd3c 	bl	800389e <drawAlignmentPattern>
 8003e26:	e000      	b.n	8003e2a <drawFunctionPatterns+0x21a>
                    continue;  // Skip the three finder corners
 8003e28:	bf00      	nop
            for (uint8_t j = 0; j < alignCount; j++) {
 8003e2a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8003e2e:	3301      	adds	r3, #1
 8003e30:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8003e34:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8003e38:	7ffb      	ldrb	r3, [r7, #31]
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	d3ca      	bcc.n	8003dd4 <drawFunctionPatterns+0x1c4>
        for (uint8_t i = 0; i < alignCount; i++) {
 8003e3e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8003e42:	3301      	adds	r3, #1
 8003e44:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003e48:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8003e4c:	7ffb      	ldrb	r3, [r7, #31]
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	d3bc      	bcc.n	8003dcc <drawFunctionPatterns+0x1bc>
 8003e52:	46b5      	mov	sp, r6
    }
    
#endif
    
    // Draw configuration data
    drawFormatBits(modules, isFunction, ecc, 0);  // Dummy mask value; overwritten later in the constructor
 8003e54:	79ba      	ldrb	r2, [r7, #6]
 8003e56:	2300      	movs	r3, #0
 8003e58:	68b9      	ldr	r1, [r7, #8]
 8003e5a:	68f8      	ldr	r0, [r7, #12]
 8003e5c:	f7ff fd6f 	bl	800393e <drawFormatBits>
    drawVersion(modules, isFunction, version);
 8003e60:	79fb      	ldrb	r3, [r7, #7]
 8003e62:	461a      	mov	r2, r3
 8003e64:	68b9      	ldr	r1, [r7, #8]
 8003e66:	68f8      	ldr	r0, [r7, #12]
 8003e68:	f7ff fe66 	bl	8003b38 <drawVersion>
}
 8003e6c:	bf00      	nop
 8003e6e:	372c      	adds	r7, #44	; 0x2c
 8003e70:	46bd      	mov	sp, r7
 8003e72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003e76:	bf00      	nop
 8003e78:	24924925 	.word	0x24924925

08003e7c <drawCodewords>:


// Draws the given sequence of 8-bit codewords (data and error correction) onto the entire
// data area of this QR Code symbol. Function modules need to be marked off before this is called.
static void drawCodewords(BitBucket *modules, BitBucket *isFunction, BitBucket *codewords) {
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b08a      	sub	sp, #40	; 0x28
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	60f8      	str	r0, [r7, #12]
 8003e84:	60b9      	str	r1, [r7, #8]
 8003e86:	607a      	str	r2, [r7, #4]
    
    uint32_t bitLength = codewords->bitOffsetOrWidth;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	61bb      	str	r3, [r7, #24]
    uint8_t *data = codewords->data;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	689b      	ldr	r3, [r3, #8]
 8003e92:	617b      	str	r3, [r7, #20]
    
    uint8_t size = modules->bitOffsetOrWidth;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	74fb      	strb	r3, [r7, #19]
    
    // Bit index into the data
    uint32_t i = 0;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	627b      	str	r3, [r7, #36]	; 0x24
    
    // Do the funny zigzag scan
    for (int16_t right = size - 1; right >= 1; right -= 2) {  // Index of right column in each column pair
 8003e9e:	7cfb      	ldrb	r3, [r7, #19]
 8003ea0:	b29b      	uxth	r3, r3
 8003ea2:	3b01      	subs	r3, #1
 8003ea4:	b29b      	uxth	r3, r3
 8003ea6:	847b      	strh	r3, [r7, #34]	; 0x22
 8003ea8:	e06f      	b.n	8003f8a <drawCodewords+0x10e>
        if (right == 6) { right = 5; }
 8003eaa:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8003eae:	2b06      	cmp	r3, #6
 8003eb0:	d101      	bne.n	8003eb6 <drawCodewords+0x3a>
 8003eb2:	2305      	movs	r3, #5
 8003eb4:	847b      	strh	r3, [r7, #34]	; 0x22
        
        for (uint8_t vert = 0; vert < size; vert++) {  // Vertical counter
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8003ebc:	e05c      	b.n	8003f78 <drawCodewords+0xfc>
            for (int j = 0; j < 2; j++) {
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	61fb      	str	r3, [r7, #28]
 8003ec2:	e051      	b.n	8003f68 <drawCodewords+0xec>
                uint8_t x = right - j;  // Actual x coordinate
 8003ec4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003ec6:	b2da      	uxtb	r2, r3
 8003ec8:	69fb      	ldr	r3, [r7, #28]
 8003eca:	b2db      	uxtb	r3, r3
 8003ecc:	1ad3      	subs	r3, r2, r3
 8003ece:	74bb      	strb	r3, [r7, #18]
                bool upwards = ((right & 2) == 0) ^ (x < 6);
 8003ed0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003ed2:	f003 0302 	and.w	r3, r3, #2
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	bf0c      	ite	eq
 8003eda:	2301      	moveq	r3, #1
 8003edc:	2300      	movne	r3, #0
 8003ede:	b2db      	uxtb	r3, r3
 8003ee0:	b25a      	sxtb	r2, r3
 8003ee2:	7cbb      	ldrb	r3, [r7, #18]
 8003ee4:	2b05      	cmp	r3, #5
 8003ee6:	bf94      	ite	ls
 8003ee8:	2301      	movls	r3, #1
 8003eea:	2300      	movhi	r3, #0
 8003eec:	b2db      	uxtb	r3, r3
 8003eee:	b25b      	sxtb	r3, r3
 8003ef0:	4053      	eors	r3, r2
 8003ef2:	b25b      	sxtb	r3, r3
 8003ef4:	747b      	strb	r3, [r7, #17]
                uint8_t y = upwards ? size - 1 - vert : vert;  // Actual y coordinate
 8003ef6:	7c7b      	ldrb	r3, [r7, #17]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d007      	beq.n	8003f0c <drawCodewords+0x90>
 8003efc:	7cfa      	ldrb	r2, [r7, #19]
 8003efe:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8003f02:	1ad3      	subs	r3, r2, r3
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	3b01      	subs	r3, #1
 8003f08:	b2db      	uxtb	r3, r3
 8003f0a:	e001      	b.n	8003f10 <drawCodewords+0x94>
 8003f0c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8003f10:	743b      	strb	r3, [r7, #16]
                if (!bb_getBit(isFunction, x, y) && i < bitLength) {
 8003f12:	7c3a      	ldrb	r2, [r7, #16]
 8003f14:	7cbb      	ldrb	r3, [r7, #18]
 8003f16:	4619      	mov	r1, r3
 8003f18:	68b8      	ldr	r0, [r7, #8]
 8003f1a:	f7ff fb0c 	bl	8003536 <bb_getBit>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d11e      	bne.n	8003f62 <drawCodewords+0xe6>
 8003f24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f26:	69bb      	ldr	r3, [r7, #24]
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	d21a      	bcs.n	8003f62 <drawCodewords+0xe6>
                    bb_setBit(modules, x, y, ((data[i >> 3] >> (7 - (i & 7))) & 1) != 0);
 8003f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f2e:	08db      	lsrs	r3, r3, #3
 8003f30:	697a      	ldr	r2, [r7, #20]
 8003f32:	4413      	add	r3, r2
 8003f34:	781b      	ldrb	r3, [r3, #0]
 8003f36:	461a      	mov	r2, r3
 8003f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f3a:	43db      	mvns	r3, r3
 8003f3c:	f003 0307 	and.w	r3, r3, #7
 8003f40:	fa42 f303 	asr.w	r3, r2, r3
 8003f44:	f003 0301 	and.w	r3, r3, #1
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	bf14      	ite	ne
 8003f4c:	2301      	movne	r3, #1
 8003f4e:	2300      	moveq	r3, #0
 8003f50:	b2db      	uxtb	r3, r3
 8003f52:	7c3a      	ldrb	r2, [r7, #16]
 8003f54:	7cb9      	ldrb	r1, [r7, #18]
 8003f56:	68f8      	ldr	r0, [r7, #12]
 8003f58:	f7ff fa43 	bl	80033e2 <bb_setBit>
                    i++;
 8003f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f5e:	3301      	adds	r3, #1
 8003f60:	627b      	str	r3, [r7, #36]	; 0x24
            for (int j = 0; j < 2; j++) {
 8003f62:	69fb      	ldr	r3, [r7, #28]
 8003f64:	3301      	adds	r3, #1
 8003f66:	61fb      	str	r3, [r7, #28]
 8003f68:	69fb      	ldr	r3, [r7, #28]
 8003f6a:	2b01      	cmp	r3, #1
 8003f6c:	ddaa      	ble.n	8003ec4 <drawCodewords+0x48>
        for (uint8_t vert = 0; vert < size; vert++) {  // Vertical counter
 8003f6e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8003f72:	3301      	adds	r3, #1
 8003f74:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8003f78:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8003f7c:	7cfb      	ldrb	r3, [r7, #19]
 8003f7e:	429a      	cmp	r2, r3
 8003f80:	d39d      	bcc.n	8003ebe <drawCodewords+0x42>
    for (int16_t right = size - 1; right >= 1; right -= 2) {  // Index of right column in each column pair
 8003f82:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003f84:	3b02      	subs	r3, #2
 8003f86:	b29b      	uxth	r3, r3
 8003f88:	847b      	strh	r3, [r7, #34]	; 0x22
 8003f8a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	dc8b      	bgt.n	8003eaa <drawCodewords+0x2e>
                // If there are any remainder bits (0 to 7), they are already
                // set to 0/false/white when the grid of modules was initialized
            }
        }
    }
}
 8003f92:	bf00      	nop
 8003f94:	bf00      	nop
 8003f96:	3728      	adds	r7, #40	; 0x28
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd80      	pop	{r7, pc}

08003f9c <getPenaltyScore>:
#define PENALTY_N4     10

// Calculates and returns the penalty score based on state of this QR Code's current modules.
// This is used by the automatic mask choice algorithm to find the mask pattern that yields the lowest score.
// @TODO: This can be optimized by working with the bytes instead of bits.
static uint32_t getPenaltyScore(BitBucket *modules) {
 8003f9c:	b590      	push	{r4, r7, lr}
 8003f9e:	b08d      	sub	sp, #52	; 0x34
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
    uint32_t result = 0;
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
    
    uint8_t size = modules->bitOffsetOrWidth;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	75fb      	strb	r3, [r7, #23]
    
    // Adjacent modules in row having same color
    for (uint8_t y = 0; y < size; y++) {
 8003fae:	2300      	movs	r3, #0
 8003fb0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003fb4:	e049      	b.n	800404a <getPenaltyScore+0xae>
        
        bool colorX = bb_getBit(modules, 0, y);
 8003fb6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003fba:	461a      	mov	r2, r3
 8003fbc:	2100      	movs	r1, #0
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f7ff fab9 	bl	8003536 <bb_getBit>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        for (uint8_t x = 1, runX = 1; x < size; x++) {
 8003fca:	2301      	movs	r3, #1
 8003fcc:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8003fd6:	e02e      	b.n	8004036 <getPenaltyScore+0x9a>
            bool cx = bb_getBit(modules, x, y);
 8003fd8:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8003fdc:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8003fe0:	4619      	mov	r1, r3
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f7ff faa7 	bl	8003536 <bb_getBit>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	73bb      	strb	r3, [r7, #14]
            if (cx != colorX) {
 8003fec:	7bba      	ldrb	r2, [r7, #14]
 8003fee:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8003ff2:	429a      	cmp	r2, r3
 8003ff4:	d006      	beq.n	8004004 <getPenaltyScore+0x68>
                colorX = cx;
 8003ff6:	7bbb      	ldrb	r3, [r7, #14]
 8003ff8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
                runX = 1;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8004002:	e013      	b.n	800402c <getPenaltyScore+0x90>
                
            } else {
                runX++;
 8004004:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004008:	3301      	adds	r3, #1
 800400a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
                if (runX == 5) {
 800400e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004012:	2b05      	cmp	r3, #5
 8004014:	d103      	bne.n	800401e <getPenaltyScore+0x82>
                    result += PENALTY_N1;
 8004016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004018:	3303      	adds	r3, #3
 800401a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800401c:	e006      	b.n	800402c <getPenaltyScore+0x90>
                } else if (runX > 5) {
 800401e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004022:	2b05      	cmp	r3, #5
 8004024:	d902      	bls.n	800402c <getPenaltyScore+0x90>
                    result++;
 8004026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004028:	3301      	adds	r3, #1
 800402a:	62fb      	str	r3, [r7, #44]	; 0x2c
        for (uint8_t x = 1, runX = 1; x < size; x++) {
 800402c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8004030:	3301      	adds	r3, #1
 8004032:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8004036:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 800403a:	7dfb      	ldrb	r3, [r7, #23]
 800403c:	429a      	cmp	r2, r3
 800403e:	d3cb      	bcc.n	8003fd8 <getPenaltyScore+0x3c>
    for (uint8_t y = 0; y < size; y++) {
 8004040:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004044:	3301      	adds	r3, #1
 8004046:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800404a:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800404e:	7dfb      	ldrb	r3, [r7, #23]
 8004050:	429a      	cmp	r2, r3
 8004052:	d3b0      	bcc.n	8003fb6 <getPenaltyScore+0x1a>
            }
        }
    }
    
    // Adjacent modules in column having same color
    for (uint8_t x = 0; x < size; x++) {
 8004054:	2300      	movs	r3, #0
 8004056:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800405a:	e049      	b.n	80040f0 <getPenaltyScore+0x154>
        bool colorY = bb_getBit(modules, x, 0);
 800405c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004060:	2200      	movs	r2, #0
 8004062:	4619      	mov	r1, r3
 8004064:	6878      	ldr	r0, [r7, #4]
 8004066:	f7ff fa66 	bl	8003536 <bb_getBit>
 800406a:	4603      	mov	r3, r0
 800406c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        for (uint8_t y = 1, runY = 1; y < size; y++) {
 8004070:	2301      	movs	r3, #1
 8004072:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8004076:	2301      	movs	r3, #1
 8004078:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 800407c:	e02e      	b.n	80040dc <getPenaltyScore+0x140>
            bool cy = bb_getBit(modules, x, y);
 800407e:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8004082:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004086:	4619      	mov	r1, r3
 8004088:	6878      	ldr	r0, [r7, #4]
 800408a:	f7ff fa54 	bl	8003536 <bb_getBit>
 800408e:	4603      	mov	r3, r0
 8004090:	73fb      	strb	r3, [r7, #15]
            if (cy != colorY) {
 8004092:	7bfa      	ldrb	r2, [r7, #15]
 8004094:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004098:	429a      	cmp	r2, r3
 800409a:	d006      	beq.n	80040aa <getPenaltyScore+0x10e>
                colorY = cy;
 800409c:	7bfb      	ldrb	r3, [r7, #15]
 800409e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                runY = 1;
 80040a2:	2301      	movs	r3, #1
 80040a4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 80040a8:	e013      	b.n	80040d2 <getPenaltyScore+0x136>
            } else {
                runY++;
 80040aa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80040ae:	3301      	adds	r3, #1
 80040b0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                if (runY == 5) {
 80040b4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80040b8:	2b05      	cmp	r3, #5
 80040ba:	d103      	bne.n	80040c4 <getPenaltyScore+0x128>
                    result += PENALTY_N1;
 80040bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040be:	3303      	adds	r3, #3
 80040c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040c2:	e006      	b.n	80040d2 <getPenaltyScore+0x136>
                } else if (runY > 5) {
 80040c4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80040c8:	2b05      	cmp	r3, #5
 80040ca:	d902      	bls.n	80040d2 <getPenaltyScore+0x136>
                    result++;
 80040cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040ce:	3301      	adds	r3, #1
 80040d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        for (uint8_t y = 1, runY = 1; y < size; y++) {
 80040d2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80040d6:	3301      	adds	r3, #1
 80040d8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80040dc:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 80040e0:	7dfb      	ldrb	r3, [r7, #23]
 80040e2:	429a      	cmp	r2, r3
 80040e4:	d3cb      	bcc.n	800407e <getPenaltyScore+0xe2>
    for (uint8_t x = 0; x < size; x++) {
 80040e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80040ea:	3301      	adds	r3, #1
 80040ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80040f0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80040f4:	7dfb      	ldrb	r3, [r7, #23]
 80040f6:	429a      	cmp	r2, r3
 80040f8:	d3b0      	bcc.n	800405c <getPenaltyScore+0xc0>
                }
            }
        }
    }
    
    uint16_t black = 0;
 80040fa:	2300      	movs	r3, #0
 80040fc:	847b      	strh	r3, [r7, #34]	; 0x22
    for (uint8_t y = 0; y < size; y++) {
 80040fe:	2300      	movs	r3, #0
 8004100:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8004104:	e08f      	b.n	8004226 <getPenaltyScore+0x28a>
        uint16_t bitsRow = 0, bitsCol = 0;
 8004106:	2300      	movs	r3, #0
 8004108:	83fb      	strh	r3, [r7, #30]
 800410a:	2300      	movs	r3, #0
 800410c:	83bb      	strh	r3, [r7, #28]
        for (uint8_t x = 0; x < size; x++) {
 800410e:	2300      	movs	r3, #0
 8004110:	76fb      	strb	r3, [r7, #27]
 8004112:	e07e      	b.n	8004212 <getPenaltyScore+0x276>
            bool color = bb_getBit(modules, x, y);
 8004114:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8004118:	7efb      	ldrb	r3, [r7, #27]
 800411a:	4619      	mov	r1, r3
 800411c:	6878      	ldr	r0, [r7, #4]
 800411e:	f7ff fa0a 	bl	8003536 <bb_getBit>
 8004122:	4603      	mov	r3, r0
 8004124:	74fb      	strb	r3, [r7, #19]

            // 2*2 blocks of modules having same color
            if (x > 0 && y > 0) {
 8004126:	7efb      	ldrb	r3, [r7, #27]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d035      	beq.n	8004198 <getPenaltyScore+0x1fc>
 800412c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8004130:	2b00      	cmp	r3, #0
 8004132:	d031      	beq.n	8004198 <getPenaltyScore+0x1fc>
                bool colorUL = bb_getBit(modules, x - 1, y - 1);
 8004134:	7efb      	ldrb	r3, [r7, #27]
 8004136:	3b01      	subs	r3, #1
 8004138:	b2d9      	uxtb	r1, r3
 800413a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800413e:	3b01      	subs	r3, #1
 8004140:	b2db      	uxtb	r3, r3
 8004142:	461a      	mov	r2, r3
 8004144:	6878      	ldr	r0, [r7, #4]
 8004146:	f7ff f9f6 	bl	8003536 <bb_getBit>
 800414a:	4603      	mov	r3, r0
 800414c:	74bb      	strb	r3, [r7, #18]
                bool colorUR = bb_getBit(modules, x, y - 1);
 800414e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8004152:	3b01      	subs	r3, #1
 8004154:	b2da      	uxtb	r2, r3
 8004156:	7efb      	ldrb	r3, [r7, #27]
 8004158:	4619      	mov	r1, r3
 800415a:	6878      	ldr	r0, [r7, #4]
 800415c:	f7ff f9eb 	bl	8003536 <bb_getBit>
 8004160:	4603      	mov	r3, r0
 8004162:	747b      	strb	r3, [r7, #17]
                bool colorL = bb_getBit(modules, x - 1, y);
 8004164:	7efb      	ldrb	r3, [r7, #27]
 8004166:	3b01      	subs	r3, #1
 8004168:	b2db      	uxtb	r3, r3
 800416a:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800416e:	4619      	mov	r1, r3
 8004170:	6878      	ldr	r0, [r7, #4]
 8004172:	f7ff f9e0 	bl	8003536 <bb_getBit>
 8004176:	4603      	mov	r3, r0
 8004178:	743b      	strb	r3, [r7, #16]
                if (color == colorUL && color == colorUR && color == colorL) {
 800417a:	7cfa      	ldrb	r2, [r7, #19]
 800417c:	7cbb      	ldrb	r3, [r7, #18]
 800417e:	429a      	cmp	r2, r3
 8004180:	d10a      	bne.n	8004198 <getPenaltyScore+0x1fc>
 8004182:	7cfa      	ldrb	r2, [r7, #19]
 8004184:	7c7b      	ldrb	r3, [r7, #17]
 8004186:	429a      	cmp	r2, r3
 8004188:	d106      	bne.n	8004198 <getPenaltyScore+0x1fc>
 800418a:	7cfa      	ldrb	r2, [r7, #19]
 800418c:	7c3b      	ldrb	r3, [r7, #16]
 800418e:	429a      	cmp	r2, r3
 8004190:	d102      	bne.n	8004198 <getPenaltyScore+0x1fc>
                    result += PENALTY_N2;
 8004192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004194:	3303      	adds	r3, #3
 8004196:	62fb      	str	r3, [r7, #44]	; 0x2c
                }
            }

            // Finder-like pattern in rows and columns
            bitsRow = ((bitsRow << 1) & 0x7FF) | color;
 8004198:	8bfb      	ldrh	r3, [r7, #30]
 800419a:	005b      	lsls	r3, r3, #1
 800419c:	b21b      	sxth	r3, r3
 800419e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80041a2:	b21a      	sxth	r2, r3
 80041a4:	7cfb      	ldrb	r3, [r7, #19]
 80041a6:	b21b      	sxth	r3, r3
 80041a8:	4313      	orrs	r3, r2
 80041aa:	b21b      	sxth	r3, r3
 80041ac:	83fb      	strh	r3, [r7, #30]
            bitsCol = ((bitsCol << 1) & 0x7FF) | bb_getBit(modules, y, x);
 80041ae:	8bbb      	ldrh	r3, [r7, #28]
 80041b0:	005b      	lsls	r3, r3, #1
 80041b2:	b21b      	sxth	r3, r3
 80041b4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80041b8:	b21c      	sxth	r4, r3
 80041ba:	7efa      	ldrb	r2, [r7, #27]
 80041bc:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80041c0:	4619      	mov	r1, r3
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	f7ff f9b7 	bl	8003536 <bb_getBit>
 80041c8:	4603      	mov	r3, r0
 80041ca:	b21b      	sxth	r3, r3
 80041cc:	4323      	orrs	r3, r4
 80041ce:	b21b      	sxth	r3, r3
 80041d0:	83bb      	strh	r3, [r7, #28]

            // Needs 11 bits accumulated
            if (x >= 10) {
 80041d2:	7efb      	ldrb	r3, [r7, #27]
 80041d4:	2b09      	cmp	r3, #9
 80041d6:	d913      	bls.n	8004200 <getPenaltyScore+0x264>
                if (bitsRow == 0x05D || bitsRow == 0x5D0) {
 80041d8:	8bfb      	ldrh	r3, [r7, #30]
 80041da:	2b5d      	cmp	r3, #93	; 0x5d
 80041dc:	d003      	beq.n	80041e6 <getPenaltyScore+0x24a>
 80041de:	8bfb      	ldrh	r3, [r7, #30]
 80041e0:	f5b3 6fba 	cmp.w	r3, #1488	; 0x5d0
 80041e4:	d102      	bne.n	80041ec <getPenaltyScore+0x250>
                    result += PENALTY_N3;
 80041e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041e8:	3328      	adds	r3, #40	; 0x28
 80041ea:	62fb      	str	r3, [r7, #44]	; 0x2c
                }
                if (bitsCol == 0x05D || bitsCol == 0x5D0) {
 80041ec:	8bbb      	ldrh	r3, [r7, #28]
 80041ee:	2b5d      	cmp	r3, #93	; 0x5d
 80041f0:	d003      	beq.n	80041fa <getPenaltyScore+0x25e>
 80041f2:	8bbb      	ldrh	r3, [r7, #28]
 80041f4:	f5b3 6fba 	cmp.w	r3, #1488	; 0x5d0
 80041f8:	d102      	bne.n	8004200 <getPenaltyScore+0x264>
                    result += PENALTY_N3;
 80041fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041fc:	3328      	adds	r3, #40	; 0x28
 80041fe:	62fb      	str	r3, [r7, #44]	; 0x2c
                }
            }

            // Balance of black and white modules
            if (color) { black++; }
 8004200:	7cfb      	ldrb	r3, [r7, #19]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d002      	beq.n	800420c <getPenaltyScore+0x270>
 8004206:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004208:	3301      	adds	r3, #1
 800420a:	847b      	strh	r3, [r7, #34]	; 0x22
        for (uint8_t x = 0; x < size; x++) {
 800420c:	7efb      	ldrb	r3, [r7, #27]
 800420e:	3301      	adds	r3, #1
 8004210:	76fb      	strb	r3, [r7, #27]
 8004212:	7efa      	ldrb	r2, [r7, #27]
 8004214:	7dfb      	ldrb	r3, [r7, #23]
 8004216:	429a      	cmp	r2, r3
 8004218:	f4ff af7c 	bcc.w	8004114 <getPenaltyScore+0x178>
    for (uint8_t y = 0; y < size; y++) {
 800421c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8004220:	3301      	adds	r3, #1
 8004222:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8004226:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800422a:	7dfb      	ldrb	r3, [r7, #23]
 800422c:	429a      	cmp	r2, r3
 800422e:	f4ff af6a 	bcc.w	8004106 <getPenaltyScore+0x16a>
        }
    }

    // Find smallest k such that (45-5k)% <= dark/total <= (55+5k)%
    uint16_t total = size * size;
 8004232:	7dfb      	ldrb	r3, [r7, #23]
 8004234:	b29a      	uxth	r2, r3
 8004236:	7dfb      	ldrb	r3, [r7, #23]
 8004238:	b29b      	uxth	r3, r3
 800423a:	fb12 f303 	smulbb	r3, r2, r3
 800423e:	82bb      	strh	r3, [r7, #20]
    for (uint16_t k = 0; black * 20 < (9 - k) * total || black * 20 > (11 + k) * total; k++) {
 8004240:	2300      	movs	r3, #0
 8004242:	833b      	strh	r3, [r7, #24]
 8004244:	e005      	b.n	8004252 <getPenaltyScore+0x2b6>
        result += PENALTY_N4;
 8004246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004248:	330a      	adds	r3, #10
 800424a:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (uint16_t k = 0; black * 20 < (9 - k) * total || black * 20 > (11 + k) * total; k++) {
 800424c:	8b3b      	ldrh	r3, [r7, #24]
 800424e:	3301      	adds	r3, #1
 8004250:	833b      	strh	r3, [r7, #24]
 8004252:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8004254:	4613      	mov	r3, r2
 8004256:	009b      	lsls	r3, r3, #2
 8004258:	4413      	add	r3, r2
 800425a:	009b      	lsls	r3, r3, #2
 800425c:	4619      	mov	r1, r3
 800425e:	8b3b      	ldrh	r3, [r7, #24]
 8004260:	f1c3 0309 	rsb	r3, r3, #9
 8004264:	8aba      	ldrh	r2, [r7, #20]
 8004266:	fb02 f303 	mul.w	r3, r2, r3
 800426a:	4299      	cmp	r1, r3
 800426c:	dbeb      	blt.n	8004246 <getPenaltyScore+0x2aa>
 800426e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8004270:	4613      	mov	r3, r2
 8004272:	009b      	lsls	r3, r3, #2
 8004274:	4413      	add	r3, r2
 8004276:	009b      	lsls	r3, r3, #2
 8004278:	4619      	mov	r1, r3
 800427a:	8b3b      	ldrh	r3, [r7, #24]
 800427c:	330b      	adds	r3, #11
 800427e:	8aba      	ldrh	r2, [r7, #20]
 8004280:	fb02 f303 	mul.w	r3, r2, r3
 8004284:	4299      	cmp	r1, r3
 8004286:	dcde      	bgt.n	8004246 <getPenaltyScore+0x2aa>
    }
    
    return result;
 8004288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800428a:	4618      	mov	r0, r3
 800428c:	3734      	adds	r7, #52	; 0x34
 800428e:	46bd      	mov	sp, r7
 8004290:	bd90      	pop	{r4, r7, pc}

08004292 <rs_multiply>:


//#pragma mark - Reed-Solomon Generator

static uint8_t rs_multiply(uint8_t x, uint8_t y) {
 8004292:	b480      	push	{r7}
 8004294:	b085      	sub	sp, #20
 8004296:	af00      	add	r7, sp, #0
 8004298:	4603      	mov	r3, r0
 800429a:	460a      	mov	r2, r1
 800429c:	71fb      	strb	r3, [r7, #7]
 800429e:	4613      	mov	r3, r2
 80042a0:	71bb      	strb	r3, [r7, #6]
    // Russian peasant multiplication
    // See: https://en.wikipedia.org/wiki/Ancient_Egyptian_multiplication
    uint16_t z = 0;
 80042a2:	2300      	movs	r3, #0
 80042a4:	81fb      	strh	r3, [r7, #14]
    for (int8_t i = 7; i >= 0; i--) {
 80042a6:	2307      	movs	r3, #7
 80042a8:	737b      	strb	r3, [r7, #13]
 80042aa:	e02c      	b.n	8004306 <rs_multiply+0x74>
        z = (z << 1) ^ ((z >> 7) * 0x11D);
 80042ac:	89fb      	ldrh	r3, [r7, #14]
 80042ae:	005b      	lsls	r3, r3, #1
 80042b0:	b21a      	sxth	r2, r3
 80042b2:	89fb      	ldrh	r3, [r7, #14]
 80042b4:	09db      	lsrs	r3, r3, #7
 80042b6:	b29b      	uxth	r3, r3
 80042b8:	4619      	mov	r1, r3
 80042ba:	00c9      	lsls	r1, r1, #3
 80042bc:	4419      	add	r1, r3
 80042be:	0049      	lsls	r1, r1, #1
 80042c0:	440b      	add	r3, r1
 80042c2:	4619      	mov	r1, r3
 80042c4:	0109      	lsls	r1, r1, #4
 80042c6:	1acb      	subs	r3, r1, r3
 80042c8:	b29b      	uxth	r3, r3
 80042ca:	b21b      	sxth	r3, r3
 80042cc:	4053      	eors	r3, r2
 80042ce:	b21b      	sxth	r3, r3
 80042d0:	81fb      	strh	r3, [r7, #14]
        z ^= ((y >> i) & 1) * x;
 80042d2:	79ba      	ldrb	r2, [r7, #6]
 80042d4:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80042d8:	fa42 f303 	asr.w	r3, r2, r3
 80042dc:	b29b      	uxth	r3, r3
 80042de:	f003 0301 	and.w	r3, r3, #1
 80042e2:	b29a      	uxth	r2, r3
 80042e4:	79fb      	ldrb	r3, [r7, #7]
 80042e6:	b29b      	uxth	r3, r3
 80042e8:	fb12 f303 	smulbb	r3, r2, r3
 80042ec:	b29b      	uxth	r3, r3
 80042ee:	b21a      	sxth	r2, r3
 80042f0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80042f4:	4053      	eors	r3, r2
 80042f6:	b21b      	sxth	r3, r3
 80042f8:	81fb      	strh	r3, [r7, #14]
    for (int8_t i = 7; i >= 0; i--) {
 80042fa:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80042fe:	b2db      	uxtb	r3, r3
 8004300:	3b01      	subs	r3, #1
 8004302:	b2db      	uxtb	r3, r3
 8004304:	737b      	strb	r3, [r7, #13]
 8004306:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800430a:	2b00      	cmp	r3, #0
 800430c:	dace      	bge.n	80042ac <rs_multiply+0x1a>
    }
    return z;
 800430e:	89fb      	ldrh	r3, [r7, #14]
 8004310:	b2db      	uxtb	r3, r3
}
 8004312:	4618      	mov	r0, r3
 8004314:	3714      	adds	r7, #20
 8004316:	46bd      	mov	sp, r7
 8004318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431c:	4770      	bx	lr

0800431e <rs_init>:

static void rs_init(uint8_t degree, uint8_t *coeff) {
 800431e:	b590      	push	{r4, r7, lr}
 8004320:	b085      	sub	sp, #20
 8004322:	af00      	add	r7, sp, #0
 8004324:	4603      	mov	r3, r0
 8004326:	6039      	str	r1, [r7, #0]
 8004328:	71fb      	strb	r3, [r7, #7]
    memset(coeff, 0, degree);
 800432a:	79fb      	ldrb	r3, [r7, #7]
 800432c:	461a      	mov	r2, r3
 800432e:	2100      	movs	r1, #0
 8004330:	6838      	ldr	r0, [r7, #0]
 8004332:	f002 fadd 	bl	80068f0 <memset>
    coeff[degree - 1] = 1;
 8004336:	79fb      	ldrb	r3, [r7, #7]
 8004338:	3b01      	subs	r3, #1
 800433a:	683a      	ldr	r2, [r7, #0]
 800433c:	4413      	add	r3, r2
 800433e:	2201      	movs	r2, #1
 8004340:	701a      	strb	r2, [r3, #0]
    
    // Compute the product polynomial (x - r^0) * (x - r^1) * (x - r^2) * ... * (x - r^{degree-1}),
    // drop the highest term, and store the rest of the coefficients in order of descending powers.
    // Note that r = 0x02, which is a generator element of this field GF(2^8/0x11D).
    uint16_t root = 1;
 8004342:	2301      	movs	r3, #1
 8004344:	81fb      	strh	r3, [r7, #14]
    for (uint8_t i = 0; i < degree; i++) {
 8004346:	2300      	movs	r3, #0
 8004348:	737b      	strb	r3, [r7, #13]
 800434a:	e040      	b.n	80043ce <rs_init+0xb0>
        // Multiply the current product by (x - r^i)
        for (uint8_t j = 0; j < degree; j++) {
 800434c:	2300      	movs	r3, #0
 800434e:	733b      	strb	r3, [r7, #12]
 8004350:	e023      	b.n	800439a <rs_init+0x7c>
            coeff[j] = rs_multiply(coeff[j], root);
 8004352:	7b3b      	ldrb	r3, [r7, #12]
 8004354:	683a      	ldr	r2, [r7, #0]
 8004356:	4413      	add	r3, r2
 8004358:	7818      	ldrb	r0, [r3, #0]
 800435a:	89fb      	ldrh	r3, [r7, #14]
 800435c:	b2d9      	uxtb	r1, r3
 800435e:	7b3b      	ldrb	r3, [r7, #12]
 8004360:	683a      	ldr	r2, [r7, #0]
 8004362:	18d4      	adds	r4, r2, r3
 8004364:	f7ff ff95 	bl	8004292 <rs_multiply>
 8004368:	4603      	mov	r3, r0
 800436a:	7023      	strb	r3, [r4, #0]
            if (j + 1 < degree) {
 800436c:	7b3b      	ldrb	r3, [r7, #12]
 800436e:	1c5a      	adds	r2, r3, #1
 8004370:	79fb      	ldrb	r3, [r7, #7]
 8004372:	429a      	cmp	r2, r3
 8004374:	da0e      	bge.n	8004394 <rs_init+0x76>
                coeff[j] ^= coeff[j + 1];
 8004376:	7b3b      	ldrb	r3, [r7, #12]
 8004378:	683a      	ldr	r2, [r7, #0]
 800437a:	4413      	add	r3, r2
 800437c:	7819      	ldrb	r1, [r3, #0]
 800437e:	7b3b      	ldrb	r3, [r7, #12]
 8004380:	3301      	adds	r3, #1
 8004382:	683a      	ldr	r2, [r7, #0]
 8004384:	4413      	add	r3, r2
 8004386:	781a      	ldrb	r2, [r3, #0]
 8004388:	7b3b      	ldrb	r3, [r7, #12]
 800438a:	6838      	ldr	r0, [r7, #0]
 800438c:	4403      	add	r3, r0
 800438e:	404a      	eors	r2, r1
 8004390:	b2d2      	uxtb	r2, r2
 8004392:	701a      	strb	r2, [r3, #0]
        for (uint8_t j = 0; j < degree; j++) {
 8004394:	7b3b      	ldrb	r3, [r7, #12]
 8004396:	3301      	adds	r3, #1
 8004398:	733b      	strb	r3, [r7, #12]
 800439a:	7b3a      	ldrb	r2, [r7, #12]
 800439c:	79fb      	ldrb	r3, [r7, #7]
 800439e:	429a      	cmp	r2, r3
 80043a0:	d3d7      	bcc.n	8004352 <rs_init+0x34>
            }
        }
        root = (root << 1) ^ ((root >> 7) * 0x11D);  // Multiply by 0x02 mod GF(2^8/0x11D)
 80043a2:	89fb      	ldrh	r3, [r7, #14]
 80043a4:	005b      	lsls	r3, r3, #1
 80043a6:	b21a      	sxth	r2, r3
 80043a8:	89fb      	ldrh	r3, [r7, #14]
 80043aa:	09db      	lsrs	r3, r3, #7
 80043ac:	b29b      	uxth	r3, r3
 80043ae:	4619      	mov	r1, r3
 80043b0:	00c9      	lsls	r1, r1, #3
 80043b2:	4419      	add	r1, r3
 80043b4:	0049      	lsls	r1, r1, #1
 80043b6:	440b      	add	r3, r1
 80043b8:	4619      	mov	r1, r3
 80043ba:	0109      	lsls	r1, r1, #4
 80043bc:	1acb      	subs	r3, r1, r3
 80043be:	b29b      	uxth	r3, r3
 80043c0:	b21b      	sxth	r3, r3
 80043c2:	4053      	eors	r3, r2
 80043c4:	b21b      	sxth	r3, r3
 80043c6:	81fb      	strh	r3, [r7, #14]
    for (uint8_t i = 0; i < degree; i++) {
 80043c8:	7b7b      	ldrb	r3, [r7, #13]
 80043ca:	3301      	adds	r3, #1
 80043cc:	737b      	strb	r3, [r7, #13]
 80043ce:	7b7a      	ldrb	r2, [r7, #13]
 80043d0:	79fb      	ldrb	r3, [r7, #7]
 80043d2:	429a      	cmp	r2, r3
 80043d4:	d3ba      	bcc.n	800434c <rs_init+0x2e>
    }
}
 80043d6:	bf00      	nop
 80043d8:	bf00      	nop
 80043da:	3714      	adds	r7, #20
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd90      	pop	{r4, r7, pc}

080043e0 <rs_getRemainder>:

static void rs_getRemainder(uint8_t degree, uint8_t *coeff, uint8_t *data, uint8_t length, uint8_t *result, uint8_t stride) {
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b086      	sub	sp, #24
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	60b9      	str	r1, [r7, #8]
 80043e8:	607a      	str	r2, [r7, #4]
 80043ea:	461a      	mov	r2, r3
 80043ec:	4603      	mov	r3, r0
 80043ee:	73fb      	strb	r3, [r7, #15]
 80043f0:	4613      	mov	r3, r2
 80043f2:	73bb      	strb	r3, [r7, #14]
    // Compute the remainder by performing polynomial division
    
    //for (uint8_t i = 0; i < degree; i++) { result[] = 0; }
    //memset(result, 0, degree);
    
    for (uint8_t i = 0; i < length; i++) {
 80043f4:	2300      	movs	r3, #0
 80043f6:	75fb      	strb	r3, [r7, #23]
 80043f8:	e05b      	b.n	80044b2 <rs_getRemainder+0xd2>
        uint8_t factor = data[i] ^ result[0];
 80043fa:	7dfb      	ldrb	r3, [r7, #23]
 80043fc:	687a      	ldr	r2, [r7, #4]
 80043fe:	4413      	add	r3, r2
 8004400:	781a      	ldrb	r2, [r3, #0]
 8004402:	6a3b      	ldr	r3, [r7, #32]
 8004404:	781b      	ldrb	r3, [r3, #0]
 8004406:	4053      	eors	r3, r2
 8004408:	753b      	strb	r3, [r7, #20]
        for (uint8_t j = 1; j < degree; j++) {
 800440a:	2301      	movs	r3, #1
 800440c:	75bb      	strb	r3, [r7, #22]
 800440e:	e015      	b.n	800443c <rs_getRemainder+0x5c>
            result[(j - 1) * stride] = result[j * stride];
 8004410:	7dbb      	ldrb	r3, [r7, #22]
 8004412:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8004416:	fb02 f303 	mul.w	r3, r2, r3
 800441a:	461a      	mov	r2, r3
 800441c:	6a3b      	ldr	r3, [r7, #32]
 800441e:	441a      	add	r2, r3
 8004420:	7dbb      	ldrb	r3, [r7, #22]
 8004422:	3b01      	subs	r3, #1
 8004424:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8004428:	fb01 f303 	mul.w	r3, r1, r3
 800442c:	4619      	mov	r1, r3
 800442e:	6a3b      	ldr	r3, [r7, #32]
 8004430:	440b      	add	r3, r1
 8004432:	7812      	ldrb	r2, [r2, #0]
 8004434:	701a      	strb	r2, [r3, #0]
        for (uint8_t j = 1; j < degree; j++) {
 8004436:	7dbb      	ldrb	r3, [r7, #22]
 8004438:	3301      	adds	r3, #1
 800443a:	75bb      	strb	r3, [r7, #22]
 800443c:	7dba      	ldrb	r2, [r7, #22]
 800443e:	7bfb      	ldrb	r3, [r7, #15]
 8004440:	429a      	cmp	r2, r3
 8004442:	d3e5      	bcc.n	8004410 <rs_getRemainder+0x30>
        }
        result[(degree - 1) * stride] = 0;
 8004444:	7bfb      	ldrb	r3, [r7, #15]
 8004446:	3b01      	subs	r3, #1
 8004448:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800444c:	fb02 f303 	mul.w	r3, r2, r3
 8004450:	461a      	mov	r2, r3
 8004452:	6a3b      	ldr	r3, [r7, #32]
 8004454:	4413      	add	r3, r2
 8004456:	2200      	movs	r2, #0
 8004458:	701a      	strb	r2, [r3, #0]
        
        for (uint8_t j = 0; j < degree; j++) {
 800445a:	2300      	movs	r3, #0
 800445c:	757b      	strb	r3, [r7, #21]
 800445e:	e021      	b.n	80044a4 <rs_getRemainder+0xc4>
            result[j * stride] ^= rs_multiply(coeff[j], factor);
 8004460:	7d7b      	ldrb	r3, [r7, #21]
 8004462:	68ba      	ldr	r2, [r7, #8]
 8004464:	4413      	add	r3, r2
 8004466:	781b      	ldrb	r3, [r3, #0]
 8004468:	7d3a      	ldrb	r2, [r7, #20]
 800446a:	4611      	mov	r1, r2
 800446c:	4618      	mov	r0, r3
 800446e:	f7ff ff10 	bl	8004292 <rs_multiply>
 8004472:	4603      	mov	r3, r0
 8004474:	4618      	mov	r0, r3
 8004476:	7d7b      	ldrb	r3, [r7, #21]
 8004478:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800447c:	fb02 f303 	mul.w	r3, r2, r3
 8004480:	461a      	mov	r2, r3
 8004482:	6a3b      	ldr	r3, [r7, #32]
 8004484:	4413      	add	r3, r2
 8004486:	781a      	ldrb	r2, [r3, #0]
 8004488:	7d7b      	ldrb	r3, [r7, #21]
 800448a:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 800448e:	fb01 f303 	mul.w	r3, r1, r3
 8004492:	4619      	mov	r1, r3
 8004494:	6a3b      	ldr	r3, [r7, #32]
 8004496:	440b      	add	r3, r1
 8004498:	4042      	eors	r2, r0
 800449a:	b2d2      	uxtb	r2, r2
 800449c:	701a      	strb	r2, [r3, #0]
        for (uint8_t j = 0; j < degree; j++) {
 800449e:	7d7b      	ldrb	r3, [r7, #21]
 80044a0:	3301      	adds	r3, #1
 80044a2:	757b      	strb	r3, [r7, #21]
 80044a4:	7d7a      	ldrb	r2, [r7, #21]
 80044a6:	7bfb      	ldrb	r3, [r7, #15]
 80044a8:	429a      	cmp	r2, r3
 80044aa:	d3d9      	bcc.n	8004460 <rs_getRemainder+0x80>
    for (uint8_t i = 0; i < length; i++) {
 80044ac:	7dfb      	ldrb	r3, [r7, #23]
 80044ae:	3301      	adds	r3, #1
 80044b0:	75fb      	strb	r3, [r7, #23]
 80044b2:	7dfa      	ldrb	r2, [r7, #23]
 80044b4:	7bbb      	ldrb	r3, [r7, #14]
 80044b6:	429a      	cmp	r2, r3
 80044b8:	d39f      	bcc.n	80043fa <rs_getRemainder+0x1a>
        }
    }
}
 80044ba:	bf00      	nop
 80044bc:	bf00      	nop
 80044be:	3718      	adds	r7, #24
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bd80      	pop	{r7, pc}

080044c4 <encodeDataCodewords>:



//#pragma mark - QrCode

static int8_t encodeDataCodewords(BitBucket *dataCodewords, const uint8_t *text, uint16_t length, uint8_t version) {
 80044c4:	b590      	push	{r4, r7, lr}
 80044c6:	b089      	sub	sp, #36	; 0x24
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	60f8      	str	r0, [r7, #12]
 80044cc:	60b9      	str	r1, [r7, #8]
 80044ce:	4611      	mov	r1, r2
 80044d0:	461a      	mov	r2, r3
 80044d2:	460b      	mov	r3, r1
 80044d4:	80fb      	strh	r3, [r7, #6]
 80044d6:	4613      	mov	r3, r2
 80044d8:	717b      	strb	r3, [r7, #5]
    int8_t mode = MODE_BYTE;
 80044da:	2302      	movs	r3, #2
 80044dc:	77fb      	strb	r3, [r7, #31]
    
    if (isNumeric((char*)text, length)) {
 80044de:	88fb      	ldrh	r3, [r7, #6]
 80044e0:	4619      	mov	r1, r3
 80044e2:	68b8      	ldr	r0, [r7, #8]
 80044e4:	f7fe fe8b 	bl	80031fe <isNumeric>
 80044e8:	4603      	mov	r3, r0
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d050      	beq.n	8004590 <encodeDataCodewords+0xcc>
        mode = MODE_NUMERIC;
 80044ee:	2300      	movs	r3, #0
 80044f0:	77fb      	strb	r3, [r7, #31]
        bb_appendBits(dataCodewords, 1 << MODE_NUMERIC, 4);
 80044f2:	2204      	movs	r2, #4
 80044f4:	2101      	movs	r1, #1
 80044f6:	68f8      	ldr	r0, [r7, #12]
 80044f8:	f7fe ff32 	bl	8003360 <bb_appendBits>
        bb_appendBits(dataCodewords, length, getModeBits(version, MODE_NUMERIC));
 80044fc:	88fc      	ldrh	r4, [r7, #6]
 80044fe:	797b      	ldrb	r3, [r7, #5]
 8004500:	2100      	movs	r1, #0
 8004502:	4618      	mov	r0, r3
 8004504:	f7fe fe9c 	bl	8003240 <getModeBits>
 8004508:	4603      	mov	r3, r0
 800450a:	461a      	mov	r2, r3
 800450c:	4621      	mov	r1, r4
 800450e:	68f8      	ldr	r0, [r7, #12]
 8004510:	f7fe ff26 	bl	8003360 <bb_appendBits>

        uint16_t accumData = 0;
 8004514:	2300      	movs	r3, #0
 8004516:	83bb      	strh	r3, [r7, #28]
        uint8_t accumCount = 0;
 8004518:	2300      	movs	r3, #0
 800451a:	76fb      	strb	r3, [r7, #27]
        for (uint16_t i = 0; i < length; i++) {
 800451c:	2300      	movs	r3, #0
 800451e:	833b      	strh	r3, [r7, #24]
 8004520:	e021      	b.n	8004566 <encodeDataCodewords+0xa2>
            accumData = accumData * 10 + ((char)(text[i]) - '0');
 8004522:	8bbb      	ldrh	r3, [r7, #28]
 8004524:	461a      	mov	r2, r3
 8004526:	0092      	lsls	r2, r2, #2
 8004528:	4413      	add	r3, r2
 800452a:	005b      	lsls	r3, r3, #1
 800452c:	b29a      	uxth	r2, r3
 800452e:	8b3b      	ldrh	r3, [r7, #24]
 8004530:	68b9      	ldr	r1, [r7, #8]
 8004532:	440b      	add	r3, r1
 8004534:	781b      	ldrb	r3, [r3, #0]
 8004536:	b29b      	uxth	r3, r3
 8004538:	4413      	add	r3, r2
 800453a:	b29b      	uxth	r3, r3
 800453c:	3b30      	subs	r3, #48	; 0x30
 800453e:	83bb      	strh	r3, [r7, #28]
            accumCount++;
 8004540:	7efb      	ldrb	r3, [r7, #27]
 8004542:	3301      	adds	r3, #1
 8004544:	76fb      	strb	r3, [r7, #27]
            if (accumCount == 3) {
 8004546:	7efb      	ldrb	r3, [r7, #27]
 8004548:	2b03      	cmp	r3, #3
 800454a:	d109      	bne.n	8004560 <encodeDataCodewords+0x9c>
                bb_appendBits(dataCodewords, accumData, 10);
 800454c:	8bbb      	ldrh	r3, [r7, #28]
 800454e:	220a      	movs	r2, #10
 8004550:	4619      	mov	r1, r3
 8004552:	68f8      	ldr	r0, [r7, #12]
 8004554:	f7fe ff04 	bl	8003360 <bb_appendBits>
                accumData = 0;
 8004558:	2300      	movs	r3, #0
 800455a:	83bb      	strh	r3, [r7, #28]
                accumCount = 0;
 800455c:	2300      	movs	r3, #0
 800455e:	76fb      	strb	r3, [r7, #27]
        for (uint16_t i = 0; i < length; i++) {
 8004560:	8b3b      	ldrh	r3, [r7, #24]
 8004562:	3301      	adds	r3, #1
 8004564:	833b      	strh	r3, [r7, #24]
 8004566:	8b3a      	ldrh	r2, [r7, #24]
 8004568:	88fb      	ldrh	r3, [r7, #6]
 800456a:	429a      	cmp	r2, r3
 800456c:	d3d9      	bcc.n	8004522 <encodeDataCodewords+0x5e>
            }
        }
        
        // 1 or 2 digits remaining
        if (accumCount > 0) {
 800456e:	7efb      	ldrb	r3, [r7, #27]
 8004570:	2b00      	cmp	r3, #0
 8004572:	f000 8087 	beq.w	8004684 <encodeDataCodewords+0x1c0>
            bb_appendBits(dataCodewords, accumData, accumCount * 3 + 1);
 8004576:	8bb9      	ldrh	r1, [r7, #28]
 8004578:	7efb      	ldrb	r3, [r7, #27]
 800457a:	461a      	mov	r2, r3
 800457c:	0052      	lsls	r2, r2, #1
 800457e:	4413      	add	r3, r2
 8004580:	b2db      	uxtb	r3, r3
 8004582:	3301      	adds	r3, #1
 8004584:	b2db      	uxtb	r3, r3
 8004586:	461a      	mov	r2, r3
 8004588:	68f8      	ldr	r0, [r7, #12]
 800458a:	f7fe fee9 	bl	8003360 <bb_appendBits>
 800458e:	e079      	b.n	8004684 <encodeDataCodewords+0x1c0>
        }
        
    } else if (isAlphanumeric((char*)text, length)) {
 8004590:	88fb      	ldrh	r3, [r7, #6]
 8004592:	4619      	mov	r1, r3
 8004594:	68b8      	ldr	r0, [r7, #8]
 8004596:	f7fe fe13 	bl	80031c0 <isAlphanumeric>
 800459a:	4603      	mov	r3, r0
 800459c:	2b00      	cmp	r3, #0
 800459e:	d04d      	beq.n	800463c <encodeDataCodewords+0x178>
        mode = MODE_ALPHANUMERIC;
 80045a0:	2301      	movs	r3, #1
 80045a2:	77fb      	strb	r3, [r7, #31]
        bb_appendBits(dataCodewords, 1 << MODE_ALPHANUMERIC, 4);
 80045a4:	2204      	movs	r2, #4
 80045a6:	2102      	movs	r1, #2
 80045a8:	68f8      	ldr	r0, [r7, #12]
 80045aa:	f7fe fed9 	bl	8003360 <bb_appendBits>
        bb_appendBits(dataCodewords, length, getModeBits(version, MODE_ALPHANUMERIC));
 80045ae:	88fc      	ldrh	r4, [r7, #6]
 80045b0:	797b      	ldrb	r3, [r7, #5]
 80045b2:	2101      	movs	r1, #1
 80045b4:	4618      	mov	r0, r3
 80045b6:	f7fe fe43 	bl	8003240 <getModeBits>
 80045ba:	4603      	mov	r3, r0
 80045bc:	461a      	mov	r2, r3
 80045be:	4621      	mov	r1, r4
 80045c0:	68f8      	ldr	r0, [r7, #12]
 80045c2:	f7fe fecd 	bl	8003360 <bb_appendBits>

        uint16_t accumData = 0;
 80045c6:	2300      	movs	r3, #0
 80045c8:	82fb      	strh	r3, [r7, #22]
        uint8_t accumCount = 0;
 80045ca:	2300      	movs	r3, #0
 80045cc:	757b      	strb	r3, [r7, #21]
        for (uint16_t i = 0; i  < length; i++) {
 80045ce:	2300      	movs	r3, #0
 80045d0:	827b      	strh	r3, [r7, #18]
 80045d2:	e025      	b.n	8004620 <encodeDataCodewords+0x15c>
            accumData = accumData * 45 + getAlphanumeric((char)(text[i]));
 80045d4:	8afb      	ldrh	r3, [r7, #22]
 80045d6:	461a      	mov	r2, r3
 80045d8:	0052      	lsls	r2, r2, #1
 80045da:	4413      	add	r3, r2
 80045dc:	461a      	mov	r2, r3
 80045de:	0112      	lsls	r2, r2, #4
 80045e0:	1ad3      	subs	r3, r2, r3
 80045e2:	b29c      	uxth	r4, r3
 80045e4:	8a7b      	ldrh	r3, [r7, #18]
 80045e6:	68ba      	ldr	r2, [r7, #8]
 80045e8:	4413      	add	r3, r2
 80045ea:	781b      	ldrb	r3, [r3, #0]
 80045ec:	4618      	mov	r0, r3
 80045ee:	f7fe fd75 	bl	80030dc <getAlphanumeric>
 80045f2:	4603      	mov	r3, r0
 80045f4:	b29b      	uxth	r3, r3
 80045f6:	4423      	add	r3, r4
 80045f8:	82fb      	strh	r3, [r7, #22]
            accumCount++;
 80045fa:	7d7b      	ldrb	r3, [r7, #21]
 80045fc:	3301      	adds	r3, #1
 80045fe:	757b      	strb	r3, [r7, #21]
            if (accumCount == 2) {
 8004600:	7d7b      	ldrb	r3, [r7, #21]
 8004602:	2b02      	cmp	r3, #2
 8004604:	d109      	bne.n	800461a <encodeDataCodewords+0x156>
                bb_appendBits(dataCodewords, accumData, 11);
 8004606:	8afb      	ldrh	r3, [r7, #22]
 8004608:	220b      	movs	r2, #11
 800460a:	4619      	mov	r1, r3
 800460c:	68f8      	ldr	r0, [r7, #12]
 800460e:	f7fe fea7 	bl	8003360 <bb_appendBits>
                accumData = 0;
 8004612:	2300      	movs	r3, #0
 8004614:	82fb      	strh	r3, [r7, #22]
                accumCount = 0;
 8004616:	2300      	movs	r3, #0
 8004618:	757b      	strb	r3, [r7, #21]
        for (uint16_t i = 0; i  < length; i++) {
 800461a:	8a7b      	ldrh	r3, [r7, #18]
 800461c:	3301      	adds	r3, #1
 800461e:	827b      	strh	r3, [r7, #18]
 8004620:	8a7a      	ldrh	r2, [r7, #18]
 8004622:	88fb      	ldrh	r3, [r7, #6]
 8004624:	429a      	cmp	r2, r3
 8004626:	d3d5      	bcc.n	80045d4 <encodeDataCodewords+0x110>
            }
        }
        
        // 1 character remaining
        if (accumCount > 0) {
 8004628:	7d7b      	ldrb	r3, [r7, #21]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d02a      	beq.n	8004684 <encodeDataCodewords+0x1c0>
            bb_appendBits(dataCodewords, accumData, 6);
 800462e:	8afb      	ldrh	r3, [r7, #22]
 8004630:	2206      	movs	r2, #6
 8004632:	4619      	mov	r1, r3
 8004634:	68f8      	ldr	r0, [r7, #12]
 8004636:	f7fe fe93 	bl	8003360 <bb_appendBits>
 800463a:	e023      	b.n	8004684 <encodeDataCodewords+0x1c0>
        }
        
    } else {
        bb_appendBits(dataCodewords, 1 << MODE_BYTE, 4);
 800463c:	2204      	movs	r2, #4
 800463e:	2104      	movs	r1, #4
 8004640:	68f8      	ldr	r0, [r7, #12]
 8004642:	f7fe fe8d 	bl	8003360 <bb_appendBits>
        bb_appendBits(dataCodewords, length, getModeBits(version, MODE_BYTE));
 8004646:	88fc      	ldrh	r4, [r7, #6]
 8004648:	797b      	ldrb	r3, [r7, #5]
 800464a:	2102      	movs	r1, #2
 800464c:	4618      	mov	r0, r3
 800464e:	f7fe fdf7 	bl	8003240 <getModeBits>
 8004652:	4603      	mov	r3, r0
 8004654:	461a      	mov	r2, r3
 8004656:	4621      	mov	r1, r4
 8004658:	68f8      	ldr	r0, [r7, #12]
 800465a:	f7fe fe81 	bl	8003360 <bb_appendBits>
        for (uint16_t i = 0; i < length; i++) {
 800465e:	2300      	movs	r3, #0
 8004660:	823b      	strh	r3, [r7, #16]
 8004662:	e00b      	b.n	800467c <encodeDataCodewords+0x1b8>
            bb_appendBits(dataCodewords, (char)(text[i]), 8);
 8004664:	8a3b      	ldrh	r3, [r7, #16]
 8004666:	68ba      	ldr	r2, [r7, #8]
 8004668:	4413      	add	r3, r2
 800466a:	781b      	ldrb	r3, [r3, #0]
 800466c:	2208      	movs	r2, #8
 800466e:	4619      	mov	r1, r3
 8004670:	68f8      	ldr	r0, [r7, #12]
 8004672:	f7fe fe75 	bl	8003360 <bb_appendBits>
        for (uint16_t i = 0; i < length; i++) {
 8004676:	8a3b      	ldrh	r3, [r7, #16]
 8004678:	3301      	adds	r3, #1
 800467a:	823b      	strh	r3, [r7, #16]
 800467c:	8a3a      	ldrh	r2, [r7, #16]
 800467e:	88fb      	ldrh	r3, [r7, #6]
 8004680:	429a      	cmp	r2, r3
 8004682:	d3ef      	bcc.n	8004664 <encodeDataCodewords+0x1a0>
        }
    }
    
    //bb_setBits(dataCodewords, length, 4, getModeBits(version, mode));
    
    return mode;
 8004684:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8004688:	4618      	mov	r0, r3
 800468a:	3724      	adds	r7, #36	; 0x24
 800468c:	46bd      	mov	sp, r7
 800468e:	bd90      	pop	{r4, r7, pc}

08004690 <performErrorCorrection>:

static void performErrorCorrection(uint8_t version, uint8_t ecc, BitBucket *data) {
 8004690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004694:	b093      	sub	sp, #76	; 0x4c
 8004696:	af02      	add	r7, sp, #8
 8004698:	4603      	mov	r3, r0
 800469a:	60ba      	str	r2, [r7, #8]
 800469c:	73fb      	strb	r3, [r7, #15]
 800469e:	460b      	mov	r3, r1
 80046a0:	73bb      	strb	r3, [r7, #14]
 80046a2:	466b      	mov	r3, sp
 80046a4:	461e      	mov	r6, r3
    
    // See: http://www.thonky.com/qr-code-tutorial/structure-final-message
    
#if LOCK_VERSION == 0
    uint8_t numBlocks = NUM_ERROR_CORRECTION_BLOCKS[ecc][version - 1];
 80046a6:	7bba      	ldrb	r2, [r7, #14]
 80046a8:	7bfb      	ldrb	r3, [r7, #15]
 80046aa:	1e59      	subs	r1, r3, #1
 80046ac:	48b4      	ldr	r0, [pc, #720]	; (8004980 <performErrorCorrection+0x2f0>)
 80046ae:	4613      	mov	r3, r2
 80046b0:	009b      	lsls	r3, r3, #2
 80046b2:	4413      	add	r3, r2
 80046b4:	00db      	lsls	r3, r3, #3
 80046b6:	4403      	add	r3, r0
 80046b8:	440b      	add	r3, r1
 80046ba:	781b      	ldrb	r3, [r3, #0]
 80046bc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    uint16_t totalEcc = NUM_ERROR_CORRECTION_CODEWORDS[ecc][version - 1];
 80046c0:	7bba      	ldrb	r2, [r7, #14]
 80046c2:	7bfb      	ldrb	r3, [r7, #15]
 80046c4:	1e59      	subs	r1, r3, #1
 80046c6:	48af      	ldr	r0, [pc, #700]	; (8004984 <performErrorCorrection+0x2f4>)
 80046c8:	4613      	mov	r3, r2
 80046ca:	009b      	lsls	r3, r3, #2
 80046cc:	4413      	add	r3, r2
 80046ce:	00db      	lsls	r3, r3, #3
 80046d0:	440b      	add	r3, r1
 80046d2:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80046d6:	857b      	strh	r3, [r7, #42]	; 0x2a
    uint16_t moduleCount = NUM_RAW_DATA_MODULES[version - 1];
 80046d8:	7bfb      	ldrb	r3, [r7, #15]
 80046da:	3b01      	subs	r3, #1
 80046dc:	4aaa      	ldr	r2, [pc, #680]	; (8004988 <performErrorCorrection+0x2f8>)
 80046de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80046e2:	853b      	strh	r3, [r7, #40]	; 0x28
    uint8_t numBlocks = NUM_ERROR_CORRECTION_BLOCKS[ecc];
    uint16_t totalEcc = NUM_ERROR_CORRECTION_CODEWORDS[ecc];
    uint16_t moduleCount = NUM_RAW_DATA_MODULES;
#endif
    
    uint8_t blockEccLen = totalEcc / numBlocks;
 80046e4:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80046e6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80046ea:	fb92 f3f3 	sdiv	r3, r2, r3
 80046ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    uint8_t numShortBlocks = numBlocks - moduleCount / 8 % numBlocks;
 80046f2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80046f4:	08db      	lsrs	r3, r3, #3
 80046f6:	b29b      	uxth	r3, r3
 80046f8:	461a      	mov	r2, r3
 80046fa:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80046fe:	fb92 f1f3 	sdiv	r1, r2, r3
 8004702:	fb01 f303 	mul.w	r3, r1, r3
 8004706:	1ad3      	subs	r3, r2, r3
 8004708:	b2db      	uxtb	r3, r3
 800470a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800470e:	1ad3      	subs	r3, r2, r3
 8004710:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    uint8_t shortBlockLen = moduleCount / 8 / numBlocks;
 8004714:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004716:	08db      	lsrs	r3, r3, #3
 8004718:	b29b      	uxth	r3, r3
 800471a:	461a      	mov	r2, r3
 800471c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004720:	fb92 f3f3 	sdiv	r3, r2, r3
 8004724:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    
    uint8_t shortDataBlockLen = shortBlockLen - blockEccLen;
 8004728:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800472c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004730:	1ad3      	subs	r3, r2, r3
 8004732:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    
    uint8_t result[data->capacityBytes];
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	8899      	ldrh	r1, [r3, #4]
 800473a:	460b      	mov	r3, r1
 800473c:	3b01      	subs	r3, #1
 800473e:	623b      	str	r3, [r7, #32]
 8004740:	b28b      	uxth	r3, r1
 8004742:	2200      	movs	r2, #0
 8004744:	603b      	str	r3, [r7, #0]
 8004746:	607a      	str	r2, [r7, #4]
 8004748:	f04f 0200 	mov.w	r2, #0
 800474c:	f04f 0300 	mov.w	r3, #0
 8004750:	6878      	ldr	r0, [r7, #4]
 8004752:	00c3      	lsls	r3, r0, #3
 8004754:	6838      	ldr	r0, [r7, #0]
 8004756:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800475a:	6838      	ldr	r0, [r7, #0]
 800475c:	00c2      	lsls	r2, r0, #3
 800475e:	b28b      	uxth	r3, r1
 8004760:	2200      	movs	r2, #0
 8004762:	469a      	mov	sl, r3
 8004764:	4693      	mov	fp, r2
 8004766:	f04f 0200 	mov.w	r2, #0
 800476a:	f04f 0300 	mov.w	r3, #0
 800476e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004772:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004776:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800477a:	460b      	mov	r3, r1
 800477c:	3307      	adds	r3, #7
 800477e:	08db      	lsrs	r3, r3, #3
 8004780:	00db      	lsls	r3, r3, #3
 8004782:	ebad 0d03 	sub.w	sp, sp, r3
 8004786:	ab02      	add	r3, sp, #8
 8004788:	3300      	adds	r3, #0
 800478a:	61fb      	str	r3, [r7, #28]
    memset(result, 0, sizeof(result));
 800478c:	460b      	mov	r3, r1
 800478e:	461a      	mov	r2, r3
 8004790:	2100      	movs	r1, #0
 8004792:	69f8      	ldr	r0, [r7, #28]
 8004794:	f002 f8ac 	bl	80068f0 <memset>
    
    uint8_t coeff[blockEccLen];
 8004798:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 800479c:	460b      	mov	r3, r1
 800479e:	3b01      	subs	r3, #1
 80047a0:	61bb      	str	r3, [r7, #24]
 80047a2:	b2cb      	uxtb	r3, r1
 80047a4:	2200      	movs	r2, #0
 80047a6:	4698      	mov	r8, r3
 80047a8:	4691      	mov	r9, r2
 80047aa:	f04f 0200 	mov.w	r2, #0
 80047ae:	f04f 0300 	mov.w	r3, #0
 80047b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80047b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80047ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80047be:	b2cb      	uxtb	r3, r1
 80047c0:	2200      	movs	r2, #0
 80047c2:	461c      	mov	r4, r3
 80047c4:	4615      	mov	r5, r2
 80047c6:	f04f 0200 	mov.w	r2, #0
 80047ca:	f04f 0300 	mov.w	r3, #0
 80047ce:	00eb      	lsls	r3, r5, #3
 80047d0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80047d4:	00e2      	lsls	r2, r4, #3
 80047d6:	460b      	mov	r3, r1
 80047d8:	3307      	adds	r3, #7
 80047da:	08db      	lsrs	r3, r3, #3
 80047dc:	00db      	lsls	r3, r3, #3
 80047de:	ebad 0d03 	sub.w	sp, sp, r3
 80047e2:	ab02      	add	r3, sp, #8
 80047e4:	3300      	adds	r3, #0
 80047e6:	617b      	str	r3, [r7, #20]
    rs_init(blockEccLen, coeff);
 80047e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80047ec:	6979      	ldr	r1, [r7, #20]
 80047ee:	4618      	mov	r0, r3
 80047f0:	f7ff fd95 	bl	800431e <rs_init>
    
    uint16_t offset = 0;
 80047f4:	2300      	movs	r3, #0
 80047f6:	867b      	strh	r3, [r7, #50]	; 0x32
    uint8_t *dataBytes = data->data;
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	637b      	str	r3, [r7, #52]	; 0x34
    
    
    // Interleave all short blocks
    for (uint8_t i = 0; i < shortDataBlockLen; i++) {
 80047fe:	2300      	movs	r3, #0
 8004800:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 8004804:	e035      	b.n	8004872 <performErrorCorrection+0x1e2>
        uint16_t index = i;
 8004806:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800480a:	877b      	strh	r3, [r7, #58]	; 0x3a
        uint8_t stride = shortDataBlockLen;
 800480c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004810:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
        for (uint8_t blockNum = 0; blockNum < numBlocks; blockNum++) {
 8004814:	2300      	movs	r3, #0
 8004816:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 800481a:	e01f      	b.n	800485c <performErrorCorrection+0x1cc>
            result[offset++] = dataBytes[index];
 800481c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800481e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004820:	441a      	add	r2, r3
 8004822:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004824:	1c59      	adds	r1, r3, #1
 8004826:	8679      	strh	r1, [r7, #50]	; 0x32
 8004828:	4619      	mov	r1, r3
 800482a:	7812      	ldrb	r2, [r2, #0]
 800482c:	69fb      	ldr	r3, [r7, #28]
 800482e:	545a      	strb	r2, [r3, r1]
            
#if LOCK_VERSION == 0 || LOCK_VERSION >= 5
            if (blockNum == numShortBlocks) { stride++; }
 8004830:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004834:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004838:	429a      	cmp	r2, r3
 800483a:	d104      	bne.n	8004846 <performErrorCorrection+0x1b6>
 800483c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8004840:	3301      	adds	r3, #1
 8004842:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
#endif
            index += stride;
 8004846:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800484a:	b29a      	uxth	r2, r3
 800484c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800484e:	4413      	add	r3, r2
 8004850:	877b      	strh	r3, [r7, #58]	; 0x3a
        for (uint8_t blockNum = 0; blockNum < numBlocks; blockNum++) {
 8004852:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8004856:	3301      	adds	r3, #1
 8004858:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 800485c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004860:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004864:	429a      	cmp	r2, r3
 8004866:	d3d9      	bcc.n	800481c <performErrorCorrection+0x18c>
    for (uint8_t i = 0; i < shortDataBlockLen; i++) {
 8004868:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800486c:	3301      	adds	r3, #1
 800486e:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 8004872:	f897 2039 	ldrb.w	r2, [r7, #57]	; 0x39
 8004876:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800487a:	429a      	cmp	r2, r3
 800487c:	d3c3      	bcc.n	8004806 <performErrorCorrection+0x176>
    
    // Version less than 5 only have short blocks
#if LOCK_VERSION == 0 || LOCK_VERSION >= 5
    {
        // Interleave long blocks
        uint16_t index = shortDataBlockLen * (numShortBlocks + 1);
 800487e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004882:	b29a      	uxth	r2, r3
 8004884:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004888:	3301      	adds	r3, #1
 800488a:	b29b      	uxth	r3, r3
 800488c:	fb12 f303 	smulbb	r3, r2, r3
 8004890:	87fb      	strh	r3, [r7, #62]	; 0x3e
        uint8_t stride = shortDataBlockLen;
 8004892:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004896:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
        for (uint8_t blockNum = 0; blockNum < numBlocks - numShortBlocks; blockNum++) {
 800489a:	2300      	movs	r3, #0
 800489c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 80048a0:	e01d      	b.n	80048de <performErrorCorrection+0x24e>
            result[offset++] = dataBytes[index];
 80048a2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80048a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80048a6:	441a      	add	r2, r3
 80048a8:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80048aa:	1c59      	adds	r1, r3, #1
 80048ac:	8679      	strh	r1, [r7, #50]	; 0x32
 80048ae:	4619      	mov	r1, r3
 80048b0:	7812      	ldrb	r2, [r2, #0]
 80048b2:	69fb      	ldr	r3, [r7, #28]
 80048b4:	545a      	strb	r2, [r3, r1]
            
            if (blockNum == 0) { stride++; }
 80048b6:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d104      	bne.n	80048c8 <performErrorCorrection+0x238>
 80048be:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80048c2:	3301      	adds	r3, #1
 80048c4:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
            index += stride;
 80048c8:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80048cc:	b29a      	uxth	r2, r3
 80048ce:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80048d0:	4413      	add	r3, r2
 80048d2:	87fb      	strh	r3, [r7, #62]	; 0x3e
        for (uint8_t blockNum = 0; blockNum < numBlocks - numShortBlocks; blockNum++) {
 80048d4:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80048d8:	3301      	adds	r3, #1
 80048da:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 80048de:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80048e2:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 80048e6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80048ea:	1acb      	subs	r3, r1, r3
 80048ec:	429a      	cmp	r2, r3
 80048ee:	dbd8      	blt.n	80048a2 <performErrorCorrection+0x212>
        }
    }
#endif
    
    // Add all ecc blocks, interleaved
    uint8_t blockSize = shortDataBlockLen;
 80048f0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80048f4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    for (uint8_t blockNum = 0; blockNum < numBlocks; blockNum++) {
 80048f8:	2300      	movs	r3, #0
 80048fa:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80048fe:	e027      	b.n	8004950 <performErrorCorrection+0x2c0>
        
#if LOCK_VERSION == 0 || LOCK_VERSION >= 5
        if (blockNum == numShortBlocks) { blockSize++; }
 8004900:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8004904:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004908:	429a      	cmp	r2, r3
 800490a:	d104      	bne.n	8004916 <performErrorCorrection+0x286>
 800490c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004910:	3301      	adds	r3, #1
 8004912:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
#endif
        rs_getRemainder(blockEccLen, coeff, dataBytes, blockSize, &result[offset + blockNum], numBlocks);
 8004916:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8004918:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800491c:	4413      	add	r3, r2
 800491e:	69fa      	ldr	r2, [r7, #28]
 8004920:	4413      	add	r3, r2
 8004922:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8004926:	f897 0027 	ldrb.w	r0, [r7, #39]	; 0x27
 800492a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800492e:	9201      	str	r2, [sp, #4]
 8004930:	9300      	str	r3, [sp, #0]
 8004932:	460b      	mov	r3, r1
 8004934:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004936:	6979      	ldr	r1, [r7, #20]
 8004938:	f7ff fd52 	bl	80043e0 <rs_getRemainder>
        dataBytes += blockSize;
 800493c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004940:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004942:	4413      	add	r3, r2
 8004944:	637b      	str	r3, [r7, #52]	; 0x34
    for (uint8_t blockNum = 0; blockNum < numBlocks; blockNum++) {
 8004946:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800494a:	3301      	adds	r3, #1
 800494c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8004950:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8004954:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004958:	429a      	cmp	r2, r3
 800495a:	d3d1      	bcc.n	8004900 <performErrorCorrection+0x270>
    }
    
    memcpy(data->data, result, data->capacityBytes);
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	6898      	ldr	r0, [r3, #8]
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	889b      	ldrh	r3, [r3, #4]
 8004964:	461a      	mov	r2, r3
 8004966:	69f9      	ldr	r1, [r7, #28]
 8004968:	f001 ffb4 	bl	80068d4 <memcpy>
    data->bitOffsetOrWidth = moduleCount;
 800496c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	601a      	str	r2, [r3, #0]
 8004972:	46b5      	mov	sp, r6
}
 8004974:	bf00      	nop
 8004976:	3744      	adds	r7, #68	; 0x44
 8004978:	46bd      	mov	sp, r7
 800497a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800497e:	bf00      	nop
 8004980:	08008220 	.word	0x08008220
 8004984:	080080e0 	.word	0x080080e0
 8004988:	080082c0 	.word	0x080082c0

0800498c <qrcode_getBufferSize>:
static const uint8_t ECC_FORMAT_BITS = (0x02 << 6) | (0x03 << 4) | (0x00 << 2) | (0x01 << 0);


//#pragma mark - Public QRCode functions

uint16_t qrcode_getBufferSize(uint8_t version) {
 800498c:	b580      	push	{r7, lr}
 800498e:	b082      	sub	sp, #8
 8004990:	af00      	add	r7, sp, #0
 8004992:	4603      	mov	r3, r0
 8004994:	71fb      	strb	r3, [r7, #7]
    return bb_getGridSizeBytes(4 * version + 17);
 8004996:	79fb      	ldrb	r3, [r7, #7]
 8004998:	009b      	lsls	r3, r3, #2
 800499a:	b2db      	uxtb	r3, r3
 800499c:	3311      	adds	r3, #17
 800499e:	b2db      	uxtb	r3, r3
 80049a0:	4618      	mov	r0, r3
 80049a2:	f7fe fc7f 	bl	80032a4 <bb_getGridSizeBytes>
 80049a6:	4603      	mov	r3, r0
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	3708      	adds	r7, #8
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bd80      	pop	{r7, pc}

080049b0 <qrcode_initBytes>:

// @TODO: Return error if data is too big.
int8_t qrcode_initBytes(QRCode *qrcode, uint8_t *modules, uint8_t version, uint8_t ecc, uint8_t *data, uint16_t length) {
 80049b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049b4:	b09d      	sub	sp, #116	; 0x74
 80049b6:	af00      	add	r7, sp, #0
 80049b8:	6178      	str	r0, [r7, #20]
 80049ba:	6139      	str	r1, [r7, #16]
 80049bc:	4611      	mov	r1, r2
 80049be:	461a      	mov	r2, r3
 80049c0:	460b      	mov	r3, r1
 80049c2:	73fb      	strb	r3, [r7, #15]
 80049c4:	4613      	mov	r3, r2
 80049c6:	73bb      	strb	r3, [r7, #14]
 80049c8:	466b      	mov	r3, sp
 80049ca:	60bb      	str	r3, [r7, #8]
    uint8_t size = version * 4 + 17;
 80049cc:	7bfb      	ldrb	r3, [r7, #15]
 80049ce:	009b      	lsls	r3, r3, #2
 80049d0:	b2db      	uxtb	r3, r3
 80049d2:	3311      	adds	r3, #17
 80049d4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    qrcode->version = version;
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	7bfa      	ldrb	r2, [r7, #15]
 80049dc:	701a      	strb	r2, [r3, #0]
    qrcode->size = size;
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 80049e4:	705a      	strb	r2, [r3, #1]
    qrcode->ecc = ecc;
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	7bba      	ldrb	r2, [r7, #14]
 80049ea:	709a      	strb	r2, [r3, #2]
    qrcode->modules = modules;
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	693a      	ldr	r2, [r7, #16]
 80049f0:	609a      	str	r2, [r3, #8]
    
    uint8_t eccFormatBits = (ECC_FORMAT_BITS >> (2 * ecc)) & 0x03;
 80049f2:	23b1      	movs	r3, #177	; 0xb1
 80049f4:	461a      	mov	r2, r3
 80049f6:	7bbb      	ldrb	r3, [r7, #14]
 80049f8:	005b      	lsls	r3, r3, #1
 80049fa:	fa42 f303 	asr.w	r3, r2, r3
 80049fe:	b2db      	uxtb	r3, r3
 8004a00:	f003 0303 	and.w	r3, r3, #3
 8004a04:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
    
#if LOCK_VERSION == 0
    uint16_t moduleCount = NUM_RAW_DATA_MODULES[version - 1];
 8004a08:	7bfb      	ldrb	r3, [r7, #15]
 8004a0a:	3b01      	subs	r3, #1
 8004a0c:	4aac      	ldr	r2, [pc, #688]	; (8004cc0 <qrcode_initBytes+0x310>)
 8004a0e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004a12:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
    uint16_t dataCapacity = moduleCount / 8 - NUM_ERROR_CORRECTION_CODEWORDS[eccFormatBits][version - 1];
 8004a16:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8004a1a:	08db      	lsrs	r3, r3, #3
 8004a1c:	b299      	uxth	r1, r3
 8004a1e:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 8004a22:	7bfb      	ldrb	r3, [r7, #15]
 8004a24:	1e58      	subs	r0, r3, #1
 8004a26:	4ea7      	ldr	r6, [pc, #668]	; (8004cc4 <qrcode_initBytes+0x314>)
 8004a28:	4613      	mov	r3, r2
 8004a2a:	009b      	lsls	r3, r3, #2
 8004a2c:	4413      	add	r3, r2
 8004a2e:	00db      	lsls	r3, r3, #3
 8004a30:	4403      	add	r3, r0
 8004a32:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8004a36:	1acb      	subs	r3, r1, r3
 8004a38:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
    uint16_t moduleCount = NUM_RAW_DATA_MODULES;
    uint16_t dataCapacity = moduleCount / 8 - NUM_ERROR_CORRECTION_CODEWORDS[eccFormatBits];
#endif
    
    struct BitBucket codewords;
    uint8_t codewordBytes[bb_getBufferSizeBytes(moduleCount)];
 8004a3c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8004a40:	4618      	mov	r0, r3
 8004a42:	f7fe fc44 	bl	80032ce <bb_getBufferSizeBytes>
 8004a46:	4603      	mov	r3, r0
 8004a48:	4619      	mov	r1, r3
 8004a4a:	460b      	mov	r3, r1
 8004a4c:	3b01      	subs	r3, #1
 8004a4e:	657b      	str	r3, [r7, #84]	; 0x54
 8004a50:	b28b      	uxth	r3, r1
 8004a52:	2200      	movs	r2, #0
 8004a54:	603b      	str	r3, [r7, #0]
 8004a56:	607a      	str	r2, [r7, #4]
 8004a58:	f04f 0200 	mov.w	r2, #0
 8004a5c:	f04f 0300 	mov.w	r3, #0
 8004a60:	6878      	ldr	r0, [r7, #4]
 8004a62:	00c3      	lsls	r3, r0, #3
 8004a64:	6838      	ldr	r0, [r7, #0]
 8004a66:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8004a6a:	6838      	ldr	r0, [r7, #0]
 8004a6c:	00c2      	lsls	r2, r0, #3
 8004a6e:	b28b      	uxth	r3, r1
 8004a70:	2200      	movs	r2, #0
 8004a72:	469a      	mov	sl, r3
 8004a74:	4693      	mov	fp, r2
 8004a76:	f04f 0200 	mov.w	r2, #0
 8004a7a:	f04f 0300 	mov.w	r3, #0
 8004a7e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004a82:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004a86:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004a8a:	460b      	mov	r3, r1
 8004a8c:	3307      	adds	r3, #7
 8004a8e:	08db      	lsrs	r3, r3, #3
 8004a90:	00db      	lsls	r3, r3, #3
 8004a92:	ebad 0d03 	sub.w	sp, sp, r3
 8004a96:	466b      	mov	r3, sp
 8004a98:	3300      	adds	r3, #0
 8004a9a:	653b      	str	r3, [r7, #80]	; 0x50
    bb_initBuffer(&codewords, codewordBytes, (int32_t)sizeof(codewordBytes));
 8004a9c:	460a      	mov	r2, r1
 8004a9e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004aa2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	f7fe fc20 	bl	80032ea <bb_initBuffer>
    
    // Place the data code words into the buffer
    int8_t mode = encodeDataCodewords(&codewords, data, length, version);
 8004aaa:	7bfb      	ldrb	r3, [r7, #15]
 8004aac:	f8b7 209c 	ldrh.w	r2, [r7, #156]	; 0x9c
 8004ab0:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8004ab4:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8004ab8:	f7ff fd04 	bl	80044c4 <encodeDataCodewords>
 8004abc:	4603      	mov	r3, r0
 8004abe:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
    if (mode < 0) { return -1; }
 8004ac2:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	da02      	bge.n	8004ad0 <qrcode_initBytes+0x120>
 8004aca:	f04f 33ff 	mov.w	r3, #4294967295
 8004ace:	e0ef      	b.n	8004cb0 <qrcode_initBytes+0x300>
    qrcode->mode = mode;
 8004ad0:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	70da      	strb	r2, [r3, #3]
    
    // Add terminator and pad up to a byte if applicable
    uint32_t padding = (dataCapacity * 8) - codewords.bitOffsetOrWidth;
 8004ad8:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8004adc:	00db      	lsls	r3, r3, #3
 8004ade:	461a      	mov	r2, r3
 8004ae0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ae2:	1ad3      	subs	r3, r2, r3
 8004ae4:	663b      	str	r3, [r7, #96]	; 0x60
    if (padding > 4) { padding = 4; }
 8004ae6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004ae8:	2b04      	cmp	r3, #4
 8004aea:	d901      	bls.n	8004af0 <qrcode_initBytes+0x140>
 8004aec:	2304      	movs	r3, #4
 8004aee:	663b      	str	r3, [r7, #96]	; 0x60
    bb_appendBits(&codewords, 0, padding);
 8004af0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004af2:	b2da      	uxtb	r2, r3
 8004af4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004af8:	2100      	movs	r1, #0
 8004afa:	4618      	mov	r0, r3
 8004afc:	f7fe fc30 	bl	8003360 <bb_appendBits>
    bb_appendBits(&codewords, 0, (8 - codewords.bitOffsetOrWidth % 8) % 8);
 8004b00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b02:	b2db      	uxtb	r3, r3
 8004b04:	425b      	negs	r3, r3
 8004b06:	b2db      	uxtb	r3, r3
 8004b08:	f003 0307 	and.w	r3, r3, #7
 8004b0c:	b2da      	uxtb	r2, r3
 8004b0e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004b12:	2100      	movs	r1, #0
 8004b14:	4618      	mov	r0, r3
 8004b16:	f7fe fc23 	bl	8003360 <bb_appendBits>

    // Pad with alternate bytes until data capacity is reached
    for (uint8_t padByte = 0xEC; codewords.bitOffsetOrWidth < (dataCapacity * 8); padByte ^= 0xEC ^ 0x11) {
 8004b1a:	23ec      	movs	r3, #236	; 0xec
 8004b1c:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8004b20:	e00e      	b.n	8004b40 <qrcode_initBytes+0x190>
        bb_appendBits(&codewords, padByte, 8);
 8004b22:	f897 1066 	ldrb.w	r1, [r7, #102]	; 0x66
 8004b26:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004b2a:	2208      	movs	r2, #8
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	f7fe fc17 	bl	8003360 <bb_appendBits>
    for (uint8_t padByte = 0xEC; codewords.bitOffsetOrWidth < (dataCapacity * 8); padByte ^= 0xEC ^ 0x11) {
 8004b32:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8004b36:	f083 0302 	eor.w	r3, r3, #2
 8004b3a:	43db      	mvns	r3, r3
 8004b3c:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8004b40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b42:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
 8004b46:	00d2      	lsls	r2, r2, #3
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d3ea      	bcc.n	8004b22 <qrcode_initBytes+0x172>
    }

    BitBucket modulesGrid;
    bb_initGrid(&modulesGrid, modules, size);
 8004b4c:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8004b50:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004b54:	6939      	ldr	r1, [r7, #16]
 8004b56:	4618      	mov	r0, r3
 8004b58:	f7fe fbe2 	bl	8003320 <bb_initGrid>
    
    BitBucket isFunctionGrid;
    uint8_t isFunctionGridBytes[bb_getGridSizeBytes(size)];
 8004b5c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004b60:	4618      	mov	r0, r3
 8004b62:	f7fe fb9f 	bl	80032a4 <bb_getGridSizeBytes>
 8004b66:	4603      	mov	r3, r0
 8004b68:	4619      	mov	r1, r3
 8004b6a:	466b      	mov	r3, sp
 8004b6c:	461e      	mov	r6, r3
 8004b6e:	460b      	mov	r3, r1
 8004b70:	3b01      	subs	r3, #1
 8004b72:	64bb      	str	r3, [r7, #72]	; 0x48
 8004b74:	b28b      	uxth	r3, r1
 8004b76:	2200      	movs	r2, #0
 8004b78:	4698      	mov	r8, r3
 8004b7a:	4691      	mov	r9, r2
 8004b7c:	f04f 0200 	mov.w	r2, #0
 8004b80:	f04f 0300 	mov.w	r3, #0
 8004b84:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004b88:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004b8c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004b90:	b28b      	uxth	r3, r1
 8004b92:	2200      	movs	r2, #0
 8004b94:	461c      	mov	r4, r3
 8004b96:	4615      	mov	r5, r2
 8004b98:	f04f 0200 	mov.w	r2, #0
 8004b9c:	f04f 0300 	mov.w	r3, #0
 8004ba0:	00eb      	lsls	r3, r5, #3
 8004ba2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ba6:	00e2      	lsls	r2, r4, #3
 8004ba8:	460b      	mov	r3, r1
 8004baa:	3307      	adds	r3, #7
 8004bac:	08db      	lsrs	r3, r3, #3
 8004bae:	00db      	lsls	r3, r3, #3
 8004bb0:	ebad 0d03 	sub.w	sp, sp, r3
 8004bb4:	466b      	mov	r3, sp
 8004bb6:	3300      	adds	r3, #0
 8004bb8:	647b      	str	r3, [r7, #68]	; 0x44
    bb_initGrid(&isFunctionGrid, isFunctionGridBytes, size);
 8004bba:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8004bbe:	f107 031c 	add.w	r3, r7, #28
 8004bc2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	f7fe fbab 	bl	8003320 <bb_initGrid>
    
    // Draw function patterns, draw all codewords, do masking
    drawFunctionPatterns(&modulesGrid, &isFunctionGrid, version, eccFormatBits);
 8004bca:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8004bce:	7bfa      	ldrb	r2, [r7, #15]
 8004bd0:	f107 011c 	add.w	r1, r7, #28
 8004bd4:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8004bd8:	f7ff f81a 	bl	8003c10 <drawFunctionPatterns>
    performErrorCorrection(version, eccFormatBits, &codewords);
 8004bdc:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8004be0:	f897 105e 	ldrb.w	r1, [r7, #94]	; 0x5e
 8004be4:	7bfb      	ldrb	r3, [r7, #15]
 8004be6:	4618      	mov	r0, r3
 8004be8:	f7ff fd52 	bl	8004690 <performErrorCorrection>
    drawCodewords(&modulesGrid, &isFunctionGrid, &codewords);
 8004bec:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8004bf0:	f107 011c 	add.w	r1, r7, #28
 8004bf4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	f7ff f93f 	bl	8003e7c <drawCodewords>
    
    // Find the best (lowest penalty) mask
    uint8_t mask = 0;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    int32_t minPenalty = INT32_MAX;
 8004c04:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8004c08:	66bb      	str	r3, [r7, #104]	; 0x68
    for (uint8_t i = 0; i < 8; i++) {
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8004c10:	e031      	b.n	8004c76 <qrcode_initBytes+0x2c6>
        drawFormatBits(&modulesGrid, &isFunctionGrid, eccFormatBits, i);
 8004c12:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004c16:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 8004c1a:	f107 011c 	add.w	r1, r7, #28
 8004c1e:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8004c22:	f7fe fe8c 	bl	800393e <drawFormatBits>
        applyMask(&modulesGrid, &isFunctionGrid, i);
 8004c26:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8004c2a:	f107 011c 	add.w	r1, r7, #28
 8004c2e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004c32:	4618      	mov	r0, r3
 8004c34:	f7fe fcaa 	bl	800358c <applyMask>
        int penalty = getPenaltyScore(&modulesGrid);
 8004c38:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	f7ff f9ad 	bl	8003f9c <getPenaltyScore>
 8004c42:	4603      	mov	r3, r0
 8004c44:	643b      	str	r3, [r7, #64]	; 0x40
        if (penalty < minPenalty) {
 8004c46:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004c48:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004c4a:	429a      	cmp	r2, r3
 8004c4c:	da05      	bge.n	8004c5a <qrcode_initBytes+0x2aa>
            mask = i;
 8004c4e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004c52:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
            minPenalty = penalty;
 8004c56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c58:	66bb      	str	r3, [r7, #104]	; 0x68
        }
        applyMask(&modulesGrid, &isFunctionGrid, i);  // Undoes the mask due to XOR
 8004c5a:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8004c5e:	f107 011c 	add.w	r1, r7, #28
 8004c62:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004c66:	4618      	mov	r0, r3
 8004c68:	f7fe fc90 	bl	800358c <applyMask>
    for (uint8_t i = 0; i < 8; i++) {
 8004c6c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004c70:	3301      	adds	r3, #1
 8004c72:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8004c76:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004c7a:	2b07      	cmp	r3, #7
 8004c7c:	d9c9      	bls.n	8004c12 <qrcode_initBytes+0x262>
    }
    
    qrcode->mask = mask;
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8004c84:	711a      	strb	r2, [r3, #4]
    
    // Overwrite old format bits
    drawFormatBits(&modulesGrid, &isFunctionGrid, eccFormatBits, mask);
 8004c86:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004c8a:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 8004c8e:	f107 011c 	add.w	r1, r7, #28
 8004c92:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8004c96:	f7fe fe52 	bl	800393e <drawFormatBits>
    
    // Apply the final choice of mask
    applyMask(&modulesGrid, &isFunctionGrid, mask);
 8004c9a:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8004c9e:	f107 011c 	add.w	r1, r7, #28
 8004ca2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	f7fe fc70 	bl	800358c <applyMask>

    return 0;
 8004cac:	2300      	movs	r3, #0
 8004cae:	46b5      	mov	sp, r6
 8004cb0:	f8d7 d008 	ldr.w	sp, [r7, #8]
}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	3774      	adds	r7, #116	; 0x74
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cbe:	bf00      	nop
 8004cc0:	080082c0 	.word	0x080082c0
 8004cc4:	080080e0 	.word	0x080080e0

08004cc8 <qrcode_initText>:

int8_t qrcode_initText(QRCode *qrcode, uint8_t *modules, uint8_t version, uint8_t ecc, const char *data) {
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b086      	sub	sp, #24
 8004ccc:	af02      	add	r7, sp, #8
 8004cce:	60f8      	str	r0, [r7, #12]
 8004cd0:	60b9      	str	r1, [r7, #8]
 8004cd2:	4611      	mov	r1, r2
 8004cd4:	461a      	mov	r2, r3
 8004cd6:	460b      	mov	r3, r1
 8004cd8:	71fb      	strb	r3, [r7, #7]
 8004cda:	4613      	mov	r3, r2
 8004cdc:	71bb      	strb	r3, [r7, #6]
    return qrcode_initBytes(qrcode, modules, version, ecc, (uint8_t*)data, strlen(data));
 8004cde:	69b8      	ldr	r0, [r7, #24]
 8004ce0:	f7fb fa82 	bl	80001e8 <strlen>
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	b29b      	uxth	r3, r3
 8004ce8:	79b9      	ldrb	r1, [r7, #6]
 8004cea:	79fa      	ldrb	r2, [r7, #7]
 8004cec:	9301      	str	r3, [sp, #4]
 8004cee:	69bb      	ldr	r3, [r7, #24]
 8004cf0:	9300      	str	r3, [sp, #0]
 8004cf2:	460b      	mov	r3, r1
 8004cf4:	68b9      	ldr	r1, [r7, #8]
 8004cf6:	68f8      	ldr	r0, [r7, #12]
 8004cf8:	f7ff fe5a 	bl	80049b0 <qrcode_initBytes>
 8004cfc:	4603      	mov	r3, r0
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3710      	adds	r7, #16
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}

08004d06 <qrcode_getModule>:

bool qrcode_getModule(QRCode *qrcode, uint8_t x, uint8_t y) {
 8004d06:	b480      	push	{r7}
 8004d08:	b085      	sub	sp, #20
 8004d0a:	af00      	add	r7, sp, #0
 8004d0c:	6078      	str	r0, [r7, #4]
 8004d0e:	460b      	mov	r3, r1
 8004d10:	70fb      	strb	r3, [r7, #3]
 8004d12:	4613      	mov	r3, r2
 8004d14:	70bb      	strb	r3, [r7, #2]
    if (x < 0 || x >= qrcode->size || y < 0 || y >= qrcode->size) {
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	785b      	ldrb	r3, [r3, #1]
 8004d1a:	78fa      	ldrb	r2, [r7, #3]
 8004d1c:	429a      	cmp	r2, r3
 8004d1e:	d204      	bcs.n	8004d2a <qrcode_getModule+0x24>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	785b      	ldrb	r3, [r3, #1]
 8004d24:	78ba      	ldrb	r2, [r7, #2]
 8004d26:	429a      	cmp	r2, r3
 8004d28:	d301      	bcc.n	8004d2e <qrcode_getModule+0x28>
        return false;
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	e01b      	b.n	8004d66 <qrcode_getModule+0x60>
    }

    uint32_t offset = y * qrcode->size + x;
 8004d2e:	78bb      	ldrb	r3, [r7, #2]
 8004d30:	687a      	ldr	r2, [r7, #4]
 8004d32:	7852      	ldrb	r2, [r2, #1]
 8004d34:	fb03 f202 	mul.w	r2, r3, r2
 8004d38:	78fb      	ldrb	r3, [r7, #3]
 8004d3a:	4413      	add	r3, r2
 8004d3c:	60fb      	str	r3, [r7, #12]
    return (qrcode->modules[offset >> 3] & (1 << (7 - (offset & 0x07)))) != 0;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	689a      	ldr	r2, [r3, #8]
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	08db      	lsrs	r3, r3, #3
 8004d46:	4413      	add	r3, r2
 8004d48:	781b      	ldrb	r3, [r3, #0]
 8004d4a:	461a      	mov	r2, r3
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	43db      	mvns	r3, r3
 8004d50:	f003 0307 	and.w	r3, r3, #7
 8004d54:	fa42 f303 	asr.w	r3, r2, r3
 8004d58:	f003 0301 	and.w	r3, r3, #1
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	bf14      	ite	ne
 8004d60:	2301      	movne	r3, #1
 8004d62:	2300      	moveq	r3, #0
 8004d64:	b2db      	uxtb	r3, r3
}
 8004d66:	4618      	mov	r0, r3
 8004d68:	3714      	adds	r7, #20
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d70:	4770      	bx	lr

08004d72 <generateQRCode>:
 * @brief  Print qr_code in LCD
 * @param  data
 * @retval None
 */
void generateQRCode(u8 byX,u8 byY,char *pByData,uint8_t byDataLength)
{
 8004d72:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004d76:	b08f      	sub	sp, #60	; 0x3c
 8004d78:	af02      	add	r7, sp, #8
 8004d7a:	603a      	str	r2, [r7, #0]
 8004d7c:	461a      	mov	r2, r3
 8004d7e:	4603      	mov	r3, r0
 8004d80:	71fb      	strb	r3, [r7, #7]
 8004d82:	460b      	mov	r3, r1
 8004d84:	71bb      	strb	r3, [r7, #6]
 8004d86:	4613      	mov	r3, r2
 8004d88:	717b      	strb	r3, [r7, #5]
 8004d8a:	466b      	mov	r3, sp
 8004d8c:	461e      	mov	r6, r3
	  // Create the QR code
	    QRCode qrcode;

	    const uint8_t byEcc = ECC_LEVEL;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

	    const uint8_t byVersion = VERSION_OF_QR;
 8004d94:	2306      	movs	r3, #6
 8004d96:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a

	    uint8_t pbyQrcodeData[qrcode_getBufferSize(byVersion)];
 8004d9a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f7ff fdf4 	bl	800498c <qrcode_getBufferSize>
 8004da4:	4603      	mov	r3, r0
 8004da6:	4619      	mov	r1, r3
 8004da8:	460b      	mov	r3, r1
 8004daa:	3b01      	subs	r3, #1
 8004dac:	627b      	str	r3, [r7, #36]	; 0x24
 8004dae:	b28b      	uxth	r3, r1
 8004db0:	2200      	movs	r2, #0
 8004db2:	4698      	mov	r8, r3
 8004db4:	4691      	mov	r9, r2
 8004db6:	f04f 0200 	mov.w	r2, #0
 8004dba:	f04f 0300 	mov.w	r3, #0
 8004dbe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004dc2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004dc6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004dca:	b28b      	uxth	r3, r1
 8004dcc:	2200      	movs	r2, #0
 8004dce:	461c      	mov	r4, r3
 8004dd0:	4615      	mov	r5, r2
 8004dd2:	f04f 0200 	mov.w	r2, #0
 8004dd6:	f04f 0300 	mov.w	r3, #0
 8004dda:	00eb      	lsls	r3, r5, #3
 8004ddc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004de0:	00e2      	lsls	r2, r4, #3
 8004de2:	460b      	mov	r3, r1
 8004de4:	3307      	adds	r3, #7
 8004de6:	08db      	lsrs	r3, r3, #3
 8004de8:	00db      	lsls	r3, r3, #3
 8004dea:	ebad 0d03 	sub.w	sp, sp, r3
 8004dee:	ab02      	add	r3, sp, #8
 8004df0:	3300      	adds	r3, #0
 8004df2:	623b      	str	r3, [r7, #32]

	    checkDataLength(byDataLength, byEcc, byVersion);
 8004df4:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 8004df8:	f897 102b 	ldrb.w	r1, [r7, #43]	; 0x2b
 8004dfc:	797b      	ldrb	r3, [r7, #5]
 8004dfe:	4618      	mov	r0, r3
 8004e00:	f000 f8b4 	bl	8004f6c <checkDataLength>

	    qrcode_initText(&qrcode, pbyQrcodeData, byVersion, byEcc, pByData);
 8004e04:	f897 102b 	ldrb.w	r1, [r7, #43]	; 0x2b
 8004e08:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 8004e0c:	f107 0008 	add.w	r0, r7, #8
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	9300      	str	r3, [sp, #0]
 8004e14:	460b      	mov	r3, r1
 8004e16:	6a39      	ldr	r1, [r7, #32]
 8004e18:	f7ff ff56 	bl	8004cc8 <qrcode_initText>

	    const uint8_t byXyScale = SCALE_ONE_PIXEL;
 8004e1c:	2303      	movs	r3, #3
 8004e1e:	77fb      	strb	r3, [r7, #31]

	    const uint8_t byWidth = WIDTH_LCD;
 8004e20:	23f0      	movs	r3, #240	; 0xf0
 8004e22:	77bb      	strb	r3, [r7, #30]
	    //const uint8_t byHeight = HEIGHT_LCD;
	    uint8_t byXmax = byWidth/2;
 8004e24:	7fbb      	ldrb	r3, [r7, #30]
 8004e26:	085b      	lsrs	r3, r3, #1
 8004e28:	777b      	strb	r3, [r7, #29]
	    //uint8_t byYmax = byHeight/2;
	    uint8_t byOffset = (byXyScale*qrcode.size);
 8004e2a:	7a7b      	ldrb	r3, [r7, #9]
 8004e2c:	7ffa      	ldrb	r2, [r7, #31]
 8004e2e:	fb12 f303 	smulbb	r3, r2, r3
 8004e32:	773b      	strb	r3, [r7, #28]
	    uint8_t byX1 = byX +byXmax - (byOffset/2);
 8004e34:	79fa      	ldrb	r2, [r7, #7]
 8004e36:	7f7b      	ldrb	r3, [r7, #29]
 8004e38:	4413      	add	r3, r2
 8004e3a:	b2da      	uxtb	r2, r3
 8004e3c:	7f3b      	ldrb	r3, [r7, #28]
 8004e3e:	085b      	lsrs	r3, r3, #1
 8004e40:	b2db      	uxtb	r3, r3
 8004e42:	1ad3      	subs	r3, r2, r3
 8004e44:	76fb      	strb	r3, [r7, #27]
	    uint8_t byY1 = byY;
 8004e46:	79bb      	ldrb	r3, [r7, #6]
 8004e48:	76bb      	strb	r3, [r7, #26]


	    uint8_t byPx1 = byX1;
 8004e4a:	7efb      	ldrb	r3, [r7, #27]
 8004e4c:	767b      	strb	r3, [r7, #25]
	    uint8_t byPy1 = byY1;
 8004e4e:	7ebb      	ldrb	r3, [r7, #26]
 8004e50:	763b      	strb	r3, [r7, #24]

	    uint8_t byPx2 = byPx1;
 8004e52:	7e7b      	ldrb	r3, [r7, #25]
 8004e54:	75fb      	strb	r3, [r7, #23]
	    uint8_t byPy2 = byPy1;
 8004e56:	7e3b      	ldrb	r3, [r7, #24]
 8004e58:	75bb      	strb	r3, [r7, #22]


	    //Clear LCD
	    LCD_ClearCursor(0, byY1, 240, byY1*2 + byOffset, WHITE);
 8004e5a:	7ebb      	ldrb	r3, [r7, #26]
 8004e5c:	b299      	uxth	r1, r3
 8004e5e:	7ebb      	ldrb	r3, [r7, #26]
 8004e60:	b29b      	uxth	r3, r3
 8004e62:	005b      	lsls	r3, r3, #1
 8004e64:	b29a      	uxth	r2, r3
 8004e66:	7f3b      	ldrb	r3, [r7, #28]
 8004e68:	b29b      	uxth	r3, r3
 8004e6a:	4413      	add	r3, r2
 8004e6c:	b29b      	uxth	r3, r3
 8004e6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004e72:	9200      	str	r2, [sp, #0]
 8004e74:	22f0      	movs	r2, #240	; 0xf0
 8004e76:	2000      	movs	r0, #0
 8004e78:	f7fc fdf2 	bl	8001a60 <LCD_ClearCursor>
	    //LCD_Clear(WHITE);

	    // Top quiet zone

	    LCD_SetWindows(byPx1,byPy1,128,128);
 8004e7c:	7e7b      	ldrb	r3, [r7, #25]
 8004e7e:	b298      	uxth	r0, r3
 8004e80:	7e3b      	ldrb	r3, [r7, #24]
 8004e82:	b299      	uxth	r1, r3
 8004e84:	2380      	movs	r3, #128	; 0x80
 8004e86:	2280      	movs	r2, #128	; 0x80
 8004e88:	f7fc ff9c 	bl	8001dc4 <LCD_SetWindows>
	    for (uint8_t y = 0; y < qrcode.size; y++) {
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8004e92:	e060      	b.n	8004f56 <generateQRCode+0x1e4>
	        for(uint8_t x = 0; x < qrcode.size; x++) {
 8004e94:	2300      	movs	r3, #0
 8004e96:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8004e9a:	e052      	b.n	8004f42 <generateQRCode+0x1d0>
	            bool mod = qrcode_getModule(&qrcode,x, y);
 8004e9c:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8004ea0:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 8004ea4:	f107 0308 	add.w	r3, r7, #8
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	f7ff ff2c 	bl	8004d06 <qrcode_getModule>
 8004eae:	4603      	mov	r3, r0
 8004eb0:	757b      	strb	r3, [r7, #21]
	            byPx1 = byX1 + x * byXyScale;
 8004eb2:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8004eb6:	7ffb      	ldrb	r3, [r7, #31]
 8004eb8:	fb12 f303 	smulbb	r3, r2, r3
 8004ebc:	b2da      	uxtb	r2, r3
 8004ebe:	7efb      	ldrb	r3, [r7, #27]
 8004ec0:	4413      	add	r3, r2
 8004ec2:	767b      	strb	r3, [r7, #25]
	            byPy1 = byY1 + y * byXyScale;
 8004ec4:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8004ec8:	7ffb      	ldrb	r3, [r7, #31]
 8004eca:	fb12 f303 	smulbb	r3, r2, r3
 8004ece:	b2da      	uxtb	r2, r3
 8004ed0:	7ebb      	ldrb	r3, [r7, #26]
 8004ed2:	4413      	add	r3, r2
 8004ed4:	763b      	strb	r3, [r7, #24]
	            byPx2 = byPx1 + byXyScale;
 8004ed6:	7e7a      	ldrb	r2, [r7, #25]
 8004ed8:	7ffb      	ldrb	r3, [r7, #31]
 8004eda:	4413      	add	r3, r2
 8004edc:	75fb      	strb	r3, [r7, #23]
	            byPy2 = byPy1 + byXyScale;
 8004ede:	7e3a      	ldrb	r2, [r7, #24]
 8004ee0:	7ffb      	ldrb	r3, [r7, #31]
 8004ee2:	4413      	add	r3, r2
 8004ee4:	75bb      	strb	r3, [r7, #22]
	            if(mod){
 8004ee6:	7d7b      	ldrb	r3, [r7, #21]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d025      	beq.n	8004f38 <generateQRCode+0x1c6>
	            	for(uint8_t i =byPx1;i<=byPx2;i++)
 8004eec:	7e7b      	ldrb	r3, [r7, #25]
 8004eee:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8004ef2:	e01c      	b.n	8004f2e <generateQRCode+0x1bc>
	            	{
	            		for(uint8_t k = byPy1; k<= byPy2;k++)
 8004ef4:	7e3b      	ldrb	r3, [r7, #24]
 8004ef6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8004efa:	e00e      	b.n	8004f1a <generateQRCode+0x1a8>
	            		{
	            			GUI_DrawPoint(i,k,BLACK);
 8004efc:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004f00:	b29b      	uxth	r3, r3
 8004f02:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8004f06:	b291      	uxth	r1, r2
 8004f08:	2200      	movs	r2, #0
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	f7fb feee 	bl	8000cec <GUI_DrawPoint>
	            		for(uint8_t k = byPy1; k<= byPy2;k++)
 8004f10:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004f14:	3301      	adds	r3, #1
 8004f16:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8004f1a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8004f1e:	7dbb      	ldrb	r3, [r7, #22]
 8004f20:	429a      	cmp	r2, r3
 8004f22:	d9eb      	bls.n	8004efc <generateQRCode+0x18a>
	            	for(uint8_t i =byPx1;i<=byPx2;i++)
 8004f24:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004f28:	3301      	adds	r3, #1
 8004f2a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8004f2e:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8004f32:	7dfb      	ldrb	r3, [r7, #23]
 8004f34:	429a      	cmp	r2, r3
 8004f36:	d9dd      	bls.n	8004ef4 <generateQRCode+0x182>
	        for(uint8_t x = 0; x < qrcode.size; x++) {
 8004f38:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004f3c:	3301      	adds	r3, #1
 8004f3e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8004f42:	7a7b      	ldrb	r3, [r7, #9]
 8004f44:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8004f48:	429a      	cmp	r2, r3
 8004f4a:	d3a7      	bcc.n	8004e9c <generateQRCode+0x12a>
	    for (uint8_t y = 0; y < qrcode.size; y++) {
 8004f4c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004f50:	3301      	adds	r3, #1
 8004f52:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8004f56:	7a7b      	ldrb	r3, [r7, #9]
 8004f58:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8004f5c:	429a      	cmp	r2, r3
 8004f5e:	d399      	bcc.n	8004e94 <generateQRCode+0x122>
 8004f60:	46b5      	mov	sp, r6

	            }
	        }
	    }

}
 8004f62:	bf00      	nop
 8004f64:	3734      	adds	r7, #52	; 0x34
 8004f66:	46bd      	mov	sp, r7
 8004f68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08004f6c <checkDataLength>:
 * @brief  Kiem tra do dai chuoi ma QR-Code co the chua
 * @param
 * @retval None
 */
uint8_t checkDataLength(uint8_t byDataLength, uint8_t byEccLevel, uint8_t byVersion)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b083      	sub	sp, #12
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	4603      	mov	r3, r0
 8004f74:	71fb      	strb	r3, [r7, #7]
 8004f76:	460b      	mov	r3, r1
 8004f78:	71bb      	strb	r3, [r7, #6]
 8004f7a:	4613      	mov	r3, r2
 8004f7c:	717b      	strb	r3, [r7, #5]
	switch(byVersion)
 8004f7e:	797b      	ldrb	r3, [r7, #5]
 8004f80:	3b01      	subs	r3, #1
 8004f82:	2b05      	cmp	r3, #5
 8004f84:	f200 80da 	bhi.w	800513c <checkDataLength+0x1d0>
 8004f88:	a201      	add	r2, pc, #4	; (adr r2, 8004f90 <checkDataLength+0x24>)
 8004f8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f8e:	bf00      	nop
 8004f90:	08004fa9 	.word	0x08004fa9
 8004f94:	08004ff3 	.word	0x08004ff3
 8004f98:	0800503d 	.word	0x0800503d
 8004f9c:	0800507d 	.word	0x0800507d
 8004fa0:	080050bd 	.word	0x080050bd
 8004fa4:	080050fd 	.word	0x080050fd
	{
	case 1:
		if(byEccLevel == ECC_LOW)
 8004fa8:	79bb      	ldrb	r3, [r7, #6]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d105      	bne.n	8004fba <checkDataLength+0x4e>
		{
			if(byDataLength>19)
 8004fae:	79fb      	ldrb	r3, [r7, #7]
 8004fb0:	2b13      	cmp	r3, #19
 8004fb2:	f240 80c5 	bls.w	8005140 <checkDataLength+0x1d4>
				return -1;
 8004fb6:	23ff      	movs	r3, #255	; 0xff
 8004fb8:	e0ce      	b.n	8005158 <checkDataLength+0x1ec>
		}else if(byEccLevel == ECC_MEDIUM)
 8004fba:	79bb      	ldrb	r3, [r7, #6]
 8004fbc:	2b01      	cmp	r3, #1
 8004fbe:	d105      	bne.n	8004fcc <checkDataLength+0x60>
		{
			if(byDataLength>16)
 8004fc0:	79fb      	ldrb	r3, [r7, #7]
 8004fc2:	2b10      	cmp	r3, #16
 8004fc4:	f240 80bc 	bls.w	8005140 <checkDataLength+0x1d4>
				return -1;
 8004fc8:	23ff      	movs	r3, #255	; 0xff
 8004fca:	e0c5      	b.n	8005158 <checkDataLength+0x1ec>
		}else if(byEccLevel == ECC_QUARTILE)
 8004fcc:	79bb      	ldrb	r3, [r7, #6]
 8004fce:	2b02      	cmp	r3, #2
 8004fd0:	d105      	bne.n	8004fde <checkDataLength+0x72>
		{
			if(byDataLength>13)
 8004fd2:	79fb      	ldrb	r3, [r7, #7]
 8004fd4:	2b0d      	cmp	r3, #13
 8004fd6:	f240 80b3 	bls.w	8005140 <checkDataLength+0x1d4>
				return -1;
 8004fda:	23ff      	movs	r3, #255	; 0xff
 8004fdc:	e0bc      	b.n	8005158 <checkDataLength+0x1ec>
		}else if(byEccLevel == ECC_HIGH)
 8004fde:	79bb      	ldrb	r3, [r7, #6]
 8004fe0:	2b03      	cmp	r3, #3
 8004fe2:	f040 80ad 	bne.w	8005140 <checkDataLength+0x1d4>
		{
			if(byDataLength>9)
 8004fe6:	79fb      	ldrb	r3, [r7, #7]
 8004fe8:	2b09      	cmp	r3, #9
 8004fea:	f240 80a9 	bls.w	8005140 <checkDataLength+0x1d4>
				return -1;
 8004fee:	23ff      	movs	r3, #255	; 0xff
 8004ff0:	e0b2      	b.n	8005158 <checkDataLength+0x1ec>
		}
		break;
	case 2:
		if(byEccLevel == ECC_LOW)
 8004ff2:	79bb      	ldrb	r3, [r7, #6]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d105      	bne.n	8005004 <checkDataLength+0x98>
		{
			if(byDataLength>34)
 8004ff8:	79fb      	ldrb	r3, [r7, #7]
 8004ffa:	2b22      	cmp	r3, #34	; 0x22
 8004ffc:	f240 80a2 	bls.w	8005144 <checkDataLength+0x1d8>
				return -1;
 8005000:	23ff      	movs	r3, #255	; 0xff
 8005002:	e0a9      	b.n	8005158 <checkDataLength+0x1ec>
		}else if(byEccLevel == ECC_MEDIUM)
 8005004:	79bb      	ldrb	r3, [r7, #6]
 8005006:	2b01      	cmp	r3, #1
 8005008:	d105      	bne.n	8005016 <checkDataLength+0xaa>
		{
			if(byDataLength>28)
 800500a:	79fb      	ldrb	r3, [r7, #7]
 800500c:	2b1c      	cmp	r3, #28
 800500e:	f240 8099 	bls.w	8005144 <checkDataLength+0x1d8>
				return -1;
 8005012:	23ff      	movs	r3, #255	; 0xff
 8005014:	e0a0      	b.n	8005158 <checkDataLength+0x1ec>
		}else if(byEccLevel == ECC_QUARTILE)
 8005016:	79bb      	ldrb	r3, [r7, #6]
 8005018:	2b02      	cmp	r3, #2
 800501a:	d105      	bne.n	8005028 <checkDataLength+0xbc>
		{
			if(byDataLength>22)
 800501c:	79fb      	ldrb	r3, [r7, #7]
 800501e:	2b16      	cmp	r3, #22
 8005020:	f240 8090 	bls.w	8005144 <checkDataLength+0x1d8>
				return -1;
 8005024:	23ff      	movs	r3, #255	; 0xff
 8005026:	e097      	b.n	8005158 <checkDataLength+0x1ec>
		}else if(byEccLevel == ECC_HIGH)
 8005028:	79bb      	ldrb	r3, [r7, #6]
 800502a:	2b03      	cmp	r3, #3
 800502c:	f040 808a 	bne.w	8005144 <checkDataLength+0x1d8>
		{
			if(byDataLength>16)
 8005030:	79fb      	ldrb	r3, [r7, #7]
 8005032:	2b10      	cmp	r3, #16
 8005034:	f240 8086 	bls.w	8005144 <checkDataLength+0x1d8>
				return -1;
 8005038:	23ff      	movs	r3, #255	; 0xff
 800503a:	e08d      	b.n	8005158 <checkDataLength+0x1ec>
		}
		break;
	case 3:
		if(byEccLevel == ECC_LOW)
 800503c:	79bb      	ldrb	r3, [r7, #6]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d104      	bne.n	800504c <checkDataLength+0xe0>
		{
			if(byDataLength>55)
 8005042:	79fb      	ldrb	r3, [r7, #7]
 8005044:	2b37      	cmp	r3, #55	; 0x37
 8005046:	d97f      	bls.n	8005148 <checkDataLength+0x1dc>
				return -1;
 8005048:	23ff      	movs	r3, #255	; 0xff
 800504a:	e085      	b.n	8005158 <checkDataLength+0x1ec>
		}else if(byEccLevel == ECC_MEDIUM)
 800504c:	79bb      	ldrb	r3, [r7, #6]
 800504e:	2b01      	cmp	r3, #1
 8005050:	d104      	bne.n	800505c <checkDataLength+0xf0>
		{
			if(byDataLength>44)
 8005052:	79fb      	ldrb	r3, [r7, #7]
 8005054:	2b2c      	cmp	r3, #44	; 0x2c
 8005056:	d977      	bls.n	8005148 <checkDataLength+0x1dc>
				return -1;
 8005058:	23ff      	movs	r3, #255	; 0xff
 800505a:	e07d      	b.n	8005158 <checkDataLength+0x1ec>
		}else if(byEccLevel == ECC_QUARTILE)
 800505c:	79bb      	ldrb	r3, [r7, #6]
 800505e:	2b02      	cmp	r3, #2
 8005060:	d104      	bne.n	800506c <checkDataLength+0x100>
		{
			if(byDataLength>34)
 8005062:	79fb      	ldrb	r3, [r7, #7]
 8005064:	2b22      	cmp	r3, #34	; 0x22
 8005066:	d96f      	bls.n	8005148 <checkDataLength+0x1dc>
				return -1;
 8005068:	23ff      	movs	r3, #255	; 0xff
 800506a:	e075      	b.n	8005158 <checkDataLength+0x1ec>
		}else if(byEccLevel == ECC_HIGH)
 800506c:	79bb      	ldrb	r3, [r7, #6]
 800506e:	2b03      	cmp	r3, #3
 8005070:	d16a      	bne.n	8005148 <checkDataLength+0x1dc>
		{
			if(byDataLength>26)
 8005072:	79fb      	ldrb	r3, [r7, #7]
 8005074:	2b1a      	cmp	r3, #26
 8005076:	d967      	bls.n	8005148 <checkDataLength+0x1dc>
				return -1;
 8005078:	23ff      	movs	r3, #255	; 0xff
 800507a:	e06d      	b.n	8005158 <checkDataLength+0x1ec>
		}
		break;
	case 4:
		if(byEccLevel == ECC_LOW)
 800507c:	79bb      	ldrb	r3, [r7, #6]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d104      	bne.n	800508c <checkDataLength+0x120>
		{
			if(byDataLength>80)
 8005082:	79fb      	ldrb	r3, [r7, #7]
 8005084:	2b50      	cmp	r3, #80	; 0x50
 8005086:	d961      	bls.n	800514c <checkDataLength+0x1e0>
				return -1;
 8005088:	23ff      	movs	r3, #255	; 0xff
 800508a:	e065      	b.n	8005158 <checkDataLength+0x1ec>
		}else if(byEccLevel == ECC_MEDIUM)
 800508c:	79bb      	ldrb	r3, [r7, #6]
 800508e:	2b01      	cmp	r3, #1
 8005090:	d104      	bne.n	800509c <checkDataLength+0x130>
		{
			if(byDataLength>64)
 8005092:	79fb      	ldrb	r3, [r7, #7]
 8005094:	2b40      	cmp	r3, #64	; 0x40
 8005096:	d959      	bls.n	800514c <checkDataLength+0x1e0>
				return -1;
 8005098:	23ff      	movs	r3, #255	; 0xff
 800509a:	e05d      	b.n	8005158 <checkDataLength+0x1ec>
		}else if(byEccLevel == ECC_QUARTILE)
 800509c:	79bb      	ldrb	r3, [r7, #6]
 800509e:	2b02      	cmp	r3, #2
 80050a0:	d104      	bne.n	80050ac <checkDataLength+0x140>
		{
			if(byDataLength>48)
 80050a2:	79fb      	ldrb	r3, [r7, #7]
 80050a4:	2b30      	cmp	r3, #48	; 0x30
 80050a6:	d951      	bls.n	800514c <checkDataLength+0x1e0>
				return -1;
 80050a8:	23ff      	movs	r3, #255	; 0xff
 80050aa:	e055      	b.n	8005158 <checkDataLength+0x1ec>
		}else if(byEccLevel == ECC_HIGH)
 80050ac:	79bb      	ldrb	r3, [r7, #6]
 80050ae:	2b03      	cmp	r3, #3
 80050b0:	d14c      	bne.n	800514c <checkDataLength+0x1e0>
		{
			if(byDataLength>36)
 80050b2:	79fb      	ldrb	r3, [r7, #7]
 80050b4:	2b24      	cmp	r3, #36	; 0x24
 80050b6:	d949      	bls.n	800514c <checkDataLength+0x1e0>
				return -1;
 80050b8:	23ff      	movs	r3, #255	; 0xff
 80050ba:	e04d      	b.n	8005158 <checkDataLength+0x1ec>
		}
		break;
	case 5:
		if(byEccLevel == ECC_LOW)
 80050bc:	79bb      	ldrb	r3, [r7, #6]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d104      	bne.n	80050cc <checkDataLength+0x160>
		{
			if(byDataLength>108)
 80050c2:	79fb      	ldrb	r3, [r7, #7]
 80050c4:	2b6c      	cmp	r3, #108	; 0x6c
 80050c6:	d943      	bls.n	8005150 <checkDataLength+0x1e4>
				return -1;
 80050c8:	23ff      	movs	r3, #255	; 0xff
 80050ca:	e045      	b.n	8005158 <checkDataLength+0x1ec>
		}else if(byEccLevel == ECC_MEDIUM)
 80050cc:	79bb      	ldrb	r3, [r7, #6]
 80050ce:	2b01      	cmp	r3, #1
 80050d0:	d104      	bne.n	80050dc <checkDataLength+0x170>
		{
			if(byDataLength>86)
 80050d2:	79fb      	ldrb	r3, [r7, #7]
 80050d4:	2b56      	cmp	r3, #86	; 0x56
 80050d6:	d93b      	bls.n	8005150 <checkDataLength+0x1e4>
				return -1;
 80050d8:	23ff      	movs	r3, #255	; 0xff
 80050da:	e03d      	b.n	8005158 <checkDataLength+0x1ec>
		}else if(byEccLevel == ECC_QUARTILE)
 80050dc:	79bb      	ldrb	r3, [r7, #6]
 80050de:	2b02      	cmp	r3, #2
 80050e0:	d104      	bne.n	80050ec <checkDataLength+0x180>
		{
			if(byDataLength>62)
 80050e2:	79fb      	ldrb	r3, [r7, #7]
 80050e4:	2b3e      	cmp	r3, #62	; 0x3e
 80050e6:	d933      	bls.n	8005150 <checkDataLength+0x1e4>
				return -1;
 80050e8:	23ff      	movs	r3, #255	; 0xff
 80050ea:	e035      	b.n	8005158 <checkDataLength+0x1ec>
		}else if(byEccLevel == ECC_HIGH)
 80050ec:	79bb      	ldrb	r3, [r7, #6]
 80050ee:	2b03      	cmp	r3, #3
 80050f0:	d12e      	bne.n	8005150 <checkDataLength+0x1e4>
		{
			if(byDataLength>46)
 80050f2:	79fb      	ldrb	r3, [r7, #7]
 80050f4:	2b2e      	cmp	r3, #46	; 0x2e
 80050f6:	d92b      	bls.n	8005150 <checkDataLength+0x1e4>
				return -1;
 80050f8:	23ff      	movs	r3, #255	; 0xff
 80050fa:	e02d      	b.n	8005158 <checkDataLength+0x1ec>
		}
		break;
	case 6:
		if(byEccLevel == ECC_LOW)
 80050fc:	79bb      	ldrb	r3, [r7, #6]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d104      	bne.n	800510c <checkDataLength+0x1a0>
		{
			if(byDataLength>136)
 8005102:	79fb      	ldrb	r3, [r7, #7]
 8005104:	2b88      	cmp	r3, #136	; 0x88
 8005106:	d925      	bls.n	8005154 <checkDataLength+0x1e8>
				return -1;
 8005108:	23ff      	movs	r3, #255	; 0xff
 800510a:	e025      	b.n	8005158 <checkDataLength+0x1ec>
		}else if(byEccLevel == ECC_MEDIUM)
 800510c:	79bb      	ldrb	r3, [r7, #6]
 800510e:	2b01      	cmp	r3, #1
 8005110:	d104      	bne.n	800511c <checkDataLength+0x1b0>
		{
			if(byDataLength>108)
 8005112:	79fb      	ldrb	r3, [r7, #7]
 8005114:	2b6c      	cmp	r3, #108	; 0x6c
 8005116:	d91d      	bls.n	8005154 <checkDataLength+0x1e8>
				return -1;
 8005118:	23ff      	movs	r3, #255	; 0xff
 800511a:	e01d      	b.n	8005158 <checkDataLength+0x1ec>
		}else if(byEccLevel == ECC_QUARTILE)
 800511c:	79bb      	ldrb	r3, [r7, #6]
 800511e:	2b02      	cmp	r3, #2
 8005120:	d104      	bne.n	800512c <checkDataLength+0x1c0>
		{
			if(byDataLength>76)
 8005122:	79fb      	ldrb	r3, [r7, #7]
 8005124:	2b4c      	cmp	r3, #76	; 0x4c
 8005126:	d915      	bls.n	8005154 <checkDataLength+0x1e8>
				return -1;
 8005128:	23ff      	movs	r3, #255	; 0xff
 800512a:	e015      	b.n	8005158 <checkDataLength+0x1ec>
		}else if(byEccLevel == ECC_HIGH)
 800512c:	79bb      	ldrb	r3, [r7, #6]
 800512e:	2b03      	cmp	r3, #3
 8005130:	d110      	bne.n	8005154 <checkDataLength+0x1e8>
		{
			if(byDataLength>60)
 8005132:	79fb      	ldrb	r3, [r7, #7]
 8005134:	2b3c      	cmp	r3, #60	; 0x3c
 8005136:	d90d      	bls.n	8005154 <checkDataLength+0x1e8>
				return -1;
 8005138:	23ff      	movs	r3, #255	; 0xff
 800513a:	e00d      	b.n	8005158 <checkDataLength+0x1ec>
		}
		break;
	default:
		break;
 800513c:	bf00      	nop
 800513e:	e00a      	b.n	8005156 <checkDataLength+0x1ea>
		break;
 8005140:	bf00      	nop
 8005142:	e008      	b.n	8005156 <checkDataLength+0x1ea>
		break;
 8005144:	bf00      	nop
 8005146:	e006      	b.n	8005156 <checkDataLength+0x1ea>
		break;
 8005148:	bf00      	nop
 800514a:	e004      	b.n	8005156 <checkDataLength+0x1ea>
		break;
 800514c:	bf00      	nop
 800514e:	e002      	b.n	8005156 <checkDataLength+0x1ea>
		break;
 8005150:	bf00      	nop
 8005152:	e000      	b.n	8005156 <checkDataLength+0x1ea>
		break;
 8005154:	bf00      	nop
	}
	return 0;
 8005156:	2300      	movs	r3, #0
}
 8005158:	4618      	mov	r0, r3
 800515a:	370c      	adds	r7, #12
 800515c:	46bd      	mov	sp, r7
 800515e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005162:	4770      	bx	lr

08005164 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005164:	b480      	push	{r7}
 8005166:	b083      	sub	sp, #12
 8005168:	af00      	add	r7, sp, #0
 800516a:	4603      	mov	r3, r0
 800516c:	6039      	str	r1, [r7, #0]
 800516e:	71fb      	strb	r3, [r7, #7]
  if((int32_t)IRQn < 0) {
 8005170:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005174:	2b00      	cmp	r3, #0
 8005176:	da0b      	bge.n	8005190 <NVIC_SetPriority+0x2c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	b2da      	uxtb	r2, r3
 800517c:	490c      	ldr	r1, [pc, #48]	; (80051b0 <NVIC_SetPriority+0x4c>)
 800517e:	79fb      	ldrb	r3, [r7, #7]
 8005180:	f003 030f 	and.w	r3, r3, #15
 8005184:	3b04      	subs	r3, #4
 8005186:	0112      	lsls	r2, r2, #4
 8005188:	b2d2      	uxtb	r2, r2
 800518a:	440b      	add	r3, r1
 800518c:	761a      	strb	r2, [r3, #24]
  }
  else {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800518e:	e009      	b.n	80051a4 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	b2da      	uxtb	r2, r3
 8005194:	4907      	ldr	r1, [pc, #28]	; (80051b4 <NVIC_SetPriority+0x50>)
 8005196:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800519a:	0112      	lsls	r2, r2, #4
 800519c:	b2d2      	uxtb	r2, r2
 800519e:	440b      	add	r3, r1
 80051a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80051a4:	bf00      	nop
 80051a6:	370c      	adds	r7, #12
 80051a8:	46bd      	mov	sp, r7
 80051aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ae:	4770      	bx	lr
 80051b0:	e000ed00 	.word	0xe000ed00
 80051b4:	e000e100 	.word	0xe000e100

080051b8 <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b082      	sub	sp, #8
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk) { return (1UL); }    /* Reload value impossible */
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	3b01      	subs	r3, #1
 80051c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80051c8:	d301      	bcc.n	80051ce <SysTick_Config+0x16>
 80051ca:	2301      	movs	r3, #1
 80051cc:	e00f      	b.n	80051ee <SysTick_Config+0x36>

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80051ce:	4a0a      	ldr	r2, [pc, #40]	; (80051f8 <SysTick_Config+0x40>)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	3b01      	subs	r3, #1
 80051d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80051d6:	210f      	movs	r1, #15
 80051d8:	f04f 30ff 	mov.w	r0, #4294967295
 80051dc:	f7ff ffc2 	bl	8005164 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80051e0:	4b05      	ldr	r3, [pc, #20]	; (80051f8 <SysTick_Config+0x40>)
 80051e2:	2200      	movs	r2, #0
 80051e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80051e6:	4b04      	ldr	r3, [pc, #16]	; (80051f8 <SysTick_Config+0x40>)
 80051e8:	2207      	movs	r2, #7
 80051ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80051ec:	2300      	movs	r3, #0
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	3708      	adds	r7, #8
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}
 80051f6:	bf00      	nop
 80051f8:	e000e010 	.word	0xe000e010

080051fc <TimerInit>:
 * @brief  None
 * @param  None
 * @retval None
 */
void
TimerInit(void) {
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b084      	sub	sp, #16
 8005200:	af00      	add	r7, sp, #0
    RCC_ClocksTypeDef RCC_Clocks;

    RCC_GetClocksFreq(&RCC_Clocks);
 8005202:	463b      	mov	r3, r7
 8005204:	4618      	mov	r0, r3
 8005206:	f7fb fa55 	bl	80006b4 <RCC_GetClocksFreq>
    SysTick_Config(RCC_Clocks.SYSCLK_Frequency/1000);
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	4a0a      	ldr	r2, [pc, #40]	; (8005238 <TimerInit+0x3c>)
 800520e:	fba2 2303 	umull	r2, r3, r2, r3
 8005212:	099b      	lsrs	r3, r3, #6
 8005214:	4618      	mov	r0, r3
 8005216:	f7ff ffcf 	bl	80051b8 <SysTick_Config>
    NVIC_SetPriority(SysTick_IRQn, 1);
 800521a:	2101      	movs	r1, #1
 800521c:	f04f 30ff 	mov.w	r0, #4294967295
 8005220:	f7ff ffa0 	bl	8005164 <NVIC_SetPriority>
    memsetl((uint8_t *)g_pTimerHandle, 0, sizeof(g_pTimerHandle));
 8005224:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8005228:	2100      	movs	r1, #0
 800522a:	4804      	ldr	r0, [pc, #16]	; (800523c <TimerInit+0x40>)
 800522c:	f7fc fffb 	bl	8002226 <memsetl>
    DBG_TIMER_SEND_STR("$ TimerInit\n");
}
 8005230:	bf00      	nop
 8005232:	3710      	adds	r7, #16
 8005234:	46bd      	mov	sp, r7
 8005236:	bd80      	pop	{r7, pc}
 8005238:	10624dd3 	.word	0x10624dd3
 800523c:	20000108 	.word	0x20000108

08005240 <GetMilSecTick>:
 * @brief  None
 * @param  None
 * @retval None
 */
uint32_t
GetMilSecTick(void) {
 8005240:	b480      	push	{r7}
 8005242:	af00      	add	r7, sp, #0
    return g_wMilSecTickTimer;
 8005244:	4b03      	ldr	r3, [pc, #12]	; (8005254 <GetMilSecTick+0x14>)
 8005246:	681b      	ldr	r3, [r3, #0]
}
 8005248:	4618      	mov	r0, r3
 800524a:	46bd      	mov	sp, r7
 800524c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005250:	4770      	bx	lr
 8005252:	bf00      	nop
 8005254:	20000288 	.word	0x20000288

08005258 <SysTick_Handler>:
 * @brief  None
 * @param  None
 * @retval None
 */
void
SysTick_Handler(void) {
 8005258:	b480      	push	{r7}
 800525a:	af00      	add	r7, sp, #0
    g_wMilSecTickTimer++;
 800525c:	4b04      	ldr	r3, [pc, #16]	; (8005270 <SysTick_Handler+0x18>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	3301      	adds	r3, #1
 8005262:	4a03      	ldr	r2, [pc, #12]	; (8005270 <SysTick_Handler+0x18>)
 8005264:	6013      	str	r3, [r2, #0]
}
 8005266:	bf00      	nop
 8005268:	46bd      	mov	sp, r7
 800526a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526e:	4770      	bx	lr
 8005270:	20000288 	.word	0x20000288

08005274 <resetBuffer>:
/*                            EXPORTED FUNCTIONS                              */
/******************************************************************************/

/******************************************************************************/
void resetBuffer(void)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b082      	sub	sp, #8
 8005278:	af00      	add	r7, sp, #0
	uint8_t temp;
	while((bufNumItems(&g_pUartRxQueue) !=0))
 800527a:	e004      	b.n	8005286 <resetBuffer+0x12>
	{
		bufDeDat(&g_pUartRxQueue, &temp);
 800527c:	1dfb      	adds	r3, r7, #7
 800527e:	4619      	mov	r1, r3
 8005280:	4806      	ldr	r0, [pc, #24]	; (800529c <resetBuffer+0x28>)
 8005282:	f7fc ff8b 	bl	800219c <bufDeDat>
	while((bufNumItems(&g_pUartRxQueue) !=0))
 8005286:	4805      	ldr	r0, [pc, #20]	; (800529c <resetBuffer+0x28>)
 8005288:	f7fc feed 	bl	8002066 <bufNumItems>
 800528c:	4603      	mov	r3, r0
 800528e:	2b00      	cmp	r3, #0
 8005290:	d1f4      	bne.n	800527c <resetBuffer+0x8>
	};
}
 8005292:	bf00      	nop
 8005294:	bf00      	nop
 8005296:	3708      	adds	r7, #8
 8005298:	46bd      	mov	sp, r7
 800529a:	bd80      	pop	{r7, pc}
 800529c:	20000498 	.word	0x20000498

080052a0 <processSerialUartReceiver>:
 * @brief  Xu ly ban tin nhan duoc tu UART
 * @param  None
 * @retval None
 */
void processSerialUartReceiver(void)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	af00      	add	r7, sp, #0
	static UsartState_e uartState;
	uartState = PollRxBuff();
 80052a4:	f000 f82a 	bl	80052fc <PollRxBuff>
 80052a8:	4603      	mov	r3, r0
 80052aa:	461a      	mov	r2, r3
 80052ac:	4b0f      	ldr	r3, [pc, #60]	; (80052ec <processSerialUartReceiver+0x4c>)
 80052ae:	701a      	strb	r2, [r3, #0]

	if(uartState != UART_STATE_IDLE)
 80052b0:	4b0e      	ldr	r3, [pc, #56]	; (80052ec <processSerialUartReceiver+0x4c>)
 80052b2:	781b      	ldrb	r3, [r3, #0]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d015      	beq.n	80052e4 <processSerialUartReceiver+0x44>
	{
		switch(uartState)
 80052b8:	4b0c      	ldr	r3, [pc, #48]	; (80052ec <processSerialUartReceiver+0x4c>)
 80052ba:	781b      	ldrb	r3, [r3, #0]
 80052bc:	2b01      	cmp	r3, #1
 80052be:	d002      	beq.n	80052c6 <processSerialUartReceiver+0x26>
 80052c0:	2b04      	cmp	r3, #4
 80052c2:	d008      	beq.n	80052d6 <processSerialUartReceiver+0x36>
		case UART_STATE_ERROR:
			uartState = UART_STATE_IDLE;
			g_eRxState = RX_STATE_START_1_BYTE;
			break;
		default:
			break;
 80052c4:	e00f      	b.n	80052e6 <processSerialUartReceiver+0x46>
			pSerialHandleEvent((void *)&g_pbyRxDataByte[1]);
 80052c6:	4b0a      	ldr	r3, [pc, #40]	; (80052f0 <processSerialUartReceiver+0x50>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	480a      	ldr	r0, [pc, #40]	; (80052f4 <processSerialUartReceiver+0x54>)
 80052cc:	4798      	blx	r3
			g_eRxState = RX_STATE_START_1_BYTE;
 80052ce:	4b0a      	ldr	r3, [pc, #40]	; (80052f8 <processSerialUartReceiver+0x58>)
 80052d0:	2200      	movs	r2, #0
 80052d2:	701a      	strb	r2, [r3, #0]
			break;
 80052d4:	e007      	b.n	80052e6 <processSerialUartReceiver+0x46>
			uartState = UART_STATE_IDLE;
 80052d6:	4b05      	ldr	r3, [pc, #20]	; (80052ec <processSerialUartReceiver+0x4c>)
 80052d8:	2200      	movs	r2, #0
 80052da:	701a      	strb	r2, [r3, #0]
			g_eRxState = RX_STATE_START_1_BYTE;
 80052dc:	4b06      	ldr	r3, [pc, #24]	; (80052f8 <processSerialUartReceiver+0x58>)
 80052de:	2200      	movs	r2, #0
 80052e0:	701a      	strb	r2, [r3, #0]
			break;
 80052e2:	e000      	b.n	80052e6 <processSerialUartReceiver+0x46>
		}
	}
 80052e4:	bf00      	nop
}
 80052e6:	bf00      	nop
 80052e8:	bd80      	pop	{r7, pc}
 80052ea:	bf00      	nop
 80052ec:	200004a8 	.word	0x200004a8
 80052f0:	2000028c 	.word	0x2000028c
 80052f4:	20000295 	.word	0x20000295
 80052f8:	20000290 	.word	0x20000290

080052fc <PollRxBuff>:
 * @brief  Phan tich ban tin UART nhan duoc, loai bo cac ban tin loi.
 * @param  void *arg
 * @retval None
 */
static UsartState_e PollRxBuff(void)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b082      	sub	sp, #8
 8005300:	af00      	add	r7, sp, #0
	//1. Khai bao bien chua data lieu lay tu hang doi
	uint8_t byRxDataTemp;
	UsartState_e eUartState = (uint8_t)UART_STATE_IDLE;
 8005302:	2300      	movs	r3, #0
 8005304:	71fb      	strb	r3, [r7, #7]



	//2. Tao vong lap den khi het du lieu trong hang doi
	while((bufNumItems(&g_pUartRxQueue) !=0) && (eUartState == UART_STATE_IDLE)){
 8005306:	e061      	b.n	80053cc <PollRxBuff+0xd0>
		//2.0 Lay 1 phan tu trong hang doi
		bufDeDat(&g_pUartRxQueue, &byRxDataTemp);
 8005308:	1dbb      	adds	r3, r7, #6
 800530a:	4619      	mov	r1, r3
 800530c:	4836      	ldr	r0, [pc, #216]	; (80053e8 <PollRxBuff+0xec>)
 800530e:	f7fc ff45 	bl	800219c <bufDeDat>
		switch(g_eRxState)
 8005312:	4b36      	ldr	r3, [pc, #216]	; (80053ec <PollRxBuff+0xf0>)
 8005314:	781b      	ldrb	r3, [r3, #0]
 8005316:	2b03      	cmp	r3, #3
 8005318:	d854      	bhi.n	80053c4 <PollRxBuff+0xc8>
 800531a:	a201      	add	r2, pc, #4	; (adr r2, 8005320 <PollRxBuff+0x24>)
 800531c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005320:	08005331 	.word	0x08005331
 8005324:	08005345 	.word	0x08005345
 8005328:	0800536b 	.word	0x0800536b
 800532c:	080053ad 	.word	0x080053ad
		{
		//2.1 Uart state- Start byte: 0xb1
		case RX_STATE_START_1_BYTE:
		{
			//2.1.1 TH: byte du lieu lay ra la byte start 1 0x4C
			if(byRxDataTemp == BYTE_START_1)
 8005330:	79bb      	ldrb	r3, [r7, #6]
 8005332:	2b4c      	cmp	r3, #76	; 0x4c
 8005334:	d103      	bne.n	800533e <PollRxBuff+0x42>
				 * Neu la byte start thi se khoi tao
				 * 1. Bien check xor = 0xff
				 * 2. Khoi tao so byte data doc duoc
				 * 3. Khoi tao g_eRxState sang trang thai bat dau doc du lieu
				 */
				g_eRxState = RX_STATE_START_2_BYTE;
 8005336:	4b2d      	ldr	r3, [pc, #180]	; (80053ec <PollRxBuff+0xf0>)
 8005338:	2201      	movs	r2, #1
 800533a:	701a      	strb	r2, [r3, #0]
 800533c:	e046      	b.n	80053cc <PollRxBuff+0xd0>
			}
			//2.1.4 TH: con lai
			else
			{
				eUartState = UART_STATE_ERROR;
 800533e:	2304      	movs	r3, #4
 8005340:	71fb      	strb	r3, [r7, #7]
			}
			break;
 8005342:	e043      	b.n	80053cc <PollRxBuff+0xd0>
		}
		case RX_STATE_START_2_BYTE:
				{
					//2.1.1 TH: byte du lieu lay ra la byte start 2
					if(byRxDataTemp == BYTE_START_2)
 8005344:	79bb      	ldrb	r3, [r7, #6]
 8005346:	2b4d      	cmp	r3, #77	; 0x4d
 8005348:	d109      	bne.n	800535e <PollRxBuff+0x62>
						 * Neu la byte start thi se khoi tao
						 * 1. Bien check xor = 0xff
						 * 2. Khoi tao so byte data doc duoc
						 * 3. Khoi tao g_eRxState sang trang thai bat dau doc du lieu
						 */
						g_byRxCheckXor = 0;
 800534a:	4b29      	ldr	r3, [pc, #164]	; (80053f0 <PollRxBuff+0xf4>)
 800534c:	2200      	movs	r2, #0
 800534e:	701a      	strb	r2, [r3, #0]
						g_byRxIndexByte = 0;
 8005350:	4b28      	ldr	r3, [pc, #160]	; (80053f4 <PollRxBuff+0xf8>)
 8005352:	2200      	movs	r2, #0
 8005354:	701a      	strb	r2, [r3, #0]
						g_eRxState = RX_STATE_DATA_BYTES;
 8005356:	4b25      	ldr	r3, [pc, #148]	; (80053ec <PollRxBuff+0xf0>)
 8005358:	2202      	movs	r2, #2
 800535a:	701a      	strb	r2, [r3, #0]
 800535c:	e036      	b.n	80053cc <PollRxBuff+0xd0>
					}
					//2.1.4 TH: con lai
					else
					{
						g_eRxState = RX_STATE_START_1_BYTE;
 800535e:	4b23      	ldr	r3, [pc, #140]	; (80053ec <PollRxBuff+0xf0>)
 8005360:	2200      	movs	r2, #0
 8005362:	701a      	strb	r2, [r3, #0]
						eUartState = UART_STATE_ERROR;
 8005364:	2304      	movs	r3, #4
 8005366:	71fb      	strb	r3, [r7, #7]
					}
					break;
 8005368:	e030      	b.n	80053cc <PollRxBuff+0xd0>
			 * 2. Tinh toan check Xor de xac nhan toan ven cua data da nhan duoc
			 * 3. Neu so byte doc duoc lon hon gia tri ma mang co the luu thi reset va bao loi
			 */
			if(g_byRxIndexByte < RX_MAX_INDEX_BYTE)
			{
				g_pbyRxDataByte[g_byRxIndexByte] = byRxDataTemp;
 800536a:	4b22      	ldr	r3, [pc, #136]	; (80053f4 <PollRxBuff+0xf8>)
 800536c:	781b      	ldrb	r3, [r3, #0]
 800536e:	461a      	mov	r2, r3
 8005370:	79b9      	ldrb	r1, [r7, #6]
 8005372:	4b21      	ldr	r3, [pc, #132]	; (80053f8 <PollRxBuff+0xfc>)
 8005374:	5499      	strb	r1, [r3, r2]
				if(g_byRxIndexByte >0)
 8005376:	4b1f      	ldr	r3, [pc, #124]	; (80053f4 <PollRxBuff+0xf8>)
 8005378:	781b      	ldrb	r3, [r3, #0]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d006      	beq.n	800538c <PollRxBuff+0x90>
				{
					g_byRxCheckXor ^= byRxDataTemp;
 800537e:	4b1c      	ldr	r3, [pc, #112]	; (80053f0 <PollRxBuff+0xf4>)
 8005380:	781a      	ldrb	r2, [r3, #0]
 8005382:	79bb      	ldrb	r3, [r7, #6]
 8005384:	4053      	eors	r3, r2
 8005386:	b2da      	uxtb	r2, r3
 8005388:	4b19      	ldr	r3, [pc, #100]	; (80053f0 <PollRxBuff+0xf4>)
 800538a:	701a      	strb	r2, [r3, #0]
				}
				// Neu la byte cuoi cung thi se chuyen sang check xor
				// Sau byte start la byte chua do dai du lieu
				if(++g_byRxIndexByte == g_pbyRxDataByte[0])
 800538c:	4b19      	ldr	r3, [pc, #100]	; (80053f4 <PollRxBuff+0xf8>)
 800538e:	781b      	ldrb	r3, [r3, #0]
 8005390:	3301      	adds	r3, #1
 8005392:	b2da      	uxtb	r2, r3
 8005394:	4b17      	ldr	r3, [pc, #92]	; (80053f4 <PollRxBuff+0xf8>)
 8005396:	701a      	strb	r2, [r3, #0]
 8005398:	4b16      	ldr	r3, [pc, #88]	; (80053f4 <PollRxBuff+0xf8>)
 800539a:	781a      	ldrb	r2, [r3, #0]
 800539c:	4b16      	ldr	r3, [pc, #88]	; (80053f8 <PollRxBuff+0xfc>)
 800539e:	781b      	ldrb	r3, [r3, #0]
 80053a0:	429a      	cmp	r2, r3
 80053a2:	d113      	bne.n	80053cc <PollRxBuff+0xd0>
				{
					g_eRxState = RX_STATE_CXOR_BYTE;
 80053a4:	4b11      	ldr	r3, [pc, #68]	; (80053ec <PollRxBuff+0xf0>)
 80053a6:	2203      	movs	r2, #3
 80053a8:	701a      	strb	r2, [r3, #0]
			}else
			{
				g_eRxState = RX_STATE_START_1_BYTE;
				eUartState = UART_STATE_ERROR;
			}
			break;
 80053aa:	e00f      	b.n	80053cc <PollRxBuff+0xd0>
			 * Neu byte check xor gui toi bang gia tri tinh duoc thi data duoc chap nhan
			 * Nguoc lai thi bao loi
			 */
			//USART_SendData(USARTx, RxDataTemp);
			//USART_SendData(USARTx, g_byRxCheckXor);
			if(byRxDataTemp == g_byRxCheckXor) {
 80053ac:	79ba      	ldrb	r2, [r7, #6]
 80053ae:	4b10      	ldr	r3, [pc, #64]	; (80053f0 <PollRxBuff+0xf4>)
 80053b0:	781b      	ldrb	r3, [r3, #0]
 80053b2:	429a      	cmp	r2, r3
 80053b4:	d103      	bne.n	80053be <PollRxBuff+0xc2>
				eUartState = UART_STATE_DATA_RECEIVED;
 80053b6:	2301      	movs	r3, #1
 80053b8:	71fb      	strb	r3, [r7, #7]
				return eUartState;
 80053ba:	79fb      	ldrb	r3, [r7, #7]
 80053bc:	e010      	b.n	80053e0 <PollRxBuff+0xe4>
			} else {
				eUartState = UART_STATE_ERROR;
 80053be:	2304      	movs	r3, #4
 80053c0:	71fb      	strb	r3, [r7, #7]
			}

			break;
 80053c2:	e003      	b.n	80053cc <PollRxBuff+0xd0>
		//2.1 Default
		default:
			g_eRxState = RX_STATE_START_1_BYTE;
 80053c4:	4b09      	ldr	r3, [pc, #36]	; (80053ec <PollRxBuff+0xf0>)
 80053c6:	2200      	movs	r2, #0
 80053c8:	701a      	strb	r2, [r3, #0]
			break;
 80053ca:	bf00      	nop
	while((bufNumItems(&g_pUartRxQueue) !=0) && (eUartState == UART_STATE_IDLE)){
 80053cc:	4806      	ldr	r0, [pc, #24]	; (80053e8 <PollRxBuff+0xec>)
 80053ce:	f7fc fe4a 	bl	8002066 <bufNumItems>
 80053d2:	4603      	mov	r3, r0
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d002      	beq.n	80053de <PollRxBuff+0xe2>
 80053d8:	79fb      	ldrb	r3, [r7, #7]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d094      	beq.n	8005308 <PollRxBuff+0xc>
		}

	}
	return eUartState;
 80053de:	79fb      	ldrb	r3, [r7, #7]
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	3708      	adds	r7, #8
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bd80      	pop	{r7, pc}
 80053e8:	20000498 	.word	0x20000498
 80053ec:	20000290 	.word	0x20000290
 80053f0:	20000394 	.word	0x20000394
 80053f4:	20000395 	.word	0x20000395
 80053f8:	20000294 	.word	0x20000294

080053fc <SerialHandleEventCallback>:
 * @retval None
 */
void
SerialHandleEventCallback(
	serial_handle_event pSerialEvent
) {
 80053fc:	b480      	push	{r7}
 80053fe:	b083      	sub	sp, #12
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
	pSerialHandleEvent = pSerialEvent;
 8005404:	4a04      	ldr	r2, [pc, #16]	; (8005418 <SerialHandleEventCallback+0x1c>)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6013      	str	r3, [r2, #0]
}
 800540a:	bf00      	nop
 800540c:	370c      	adds	r7, #12
 800540e:	46bd      	mov	sp, r7
 8005410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005414:	4770      	bx	lr
 8005416:	bf00      	nop
 8005418:	2000028c 	.word	0x2000028c

0800541c <usartInit>:
 * @brief  Usart initialization
 * @param  None
 * @retval None
 */
static void usartInit(void)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b088      	sub	sp, #32
 8005420:	af00      	add	r7, sp, #0
		GPIO_InitTypeDef	GPIO_InitStruct;
		USART_InitTypeDef	USART_InitStruct;
		NVIC_InitTypeDef	NVIC_InitStruct;

		//1. Configuare GPIO & AF
		RCC_AHB1PeriphClockCmd(USART6_GPIO_RCC, ENABLE);
 8005422:	2101      	movs	r1, #1
 8005424:	2001      	movs	r0, #1
 8005426:	f7fb f9f3 	bl	8000810 <RCC_AHB1PeriphClockCmd>

		GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;
 800542a:	2302      	movs	r3, #2
 800542c:	773b      	strb	r3, [r7, #28]
		GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 800542e:	2300      	movs	r3, #0
 8005430:	77bb      	strb	r3, [r7, #30]
		GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;
 8005432:	2301      	movs	r3, #1
 8005434:	77fb      	strb	r3, [r7, #31]
		GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
 8005436:	2303      	movs	r3, #3
 8005438:	777b      	strb	r3, [r7, #29]

		GPIO_InitStruct.GPIO_Pin = USART6_PIN_RX;
 800543a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800543e:	61bb      	str	r3, [r7, #24]
		GPIO_Init(USART6_PORT, &GPIO_InitStruct);
 8005440:	f107 0318 	add.w	r3, r7, #24
 8005444:	4619      	mov	r1, r3
 8005446:	481d      	ldr	r0, [pc, #116]	; (80054bc <usartInit+0xa0>)
 8005448:	f7fb f842 	bl	80004d0 <GPIO_Init>

		GPIO_PinAFConfig(USART6_PORT, USART6_PINSOURCE_RX, USART6_AF);
 800544c:	2208      	movs	r2, #8
 800544e:	210c      	movs	r1, #12
 8005450:	481a      	ldr	r0, [pc, #104]	; (80054bc <usartInit+0xa0>)
 8005452:	f7fb f8e6 	bl	8000622 <GPIO_PinAFConfig>
		//2. Configuare USART6: Bus APB2
		RCC_APB2PeriphClockCmd(USART6_RCC, ENABLE);
 8005456:	2101      	movs	r1, #1
 8005458:	2020      	movs	r0, #32
 800545a:	f7fb f9f9 	bl	8000850 <RCC_APB2PeriphClockCmd>

		USART_InitStruct.USART_BaudRate = USART6_BAUDRATE;
 800545e:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8005462:	60bb      	str	r3, [r7, #8]
		USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8005464:	2300      	movs	r3, #0
 8005466:	82bb      	strh	r3, [r7, #20]
		USART_InitStruct.USART_Mode = USART_Mode_Rx;
 8005468:	2304      	movs	r3, #4
 800546a:	827b      	strh	r3, [r7, #18]
		USART_InitStruct.USART_Parity = USART_Parity_No;
 800546c:	2300      	movs	r3, #0
 800546e:	823b      	strh	r3, [r7, #16]
		USART_InitStruct.USART_StopBits = USART_StopBits_1;
 8005470:	2300      	movs	r3, #0
 8005472:	81fb      	strh	r3, [r7, #14]
		USART_InitStruct.USART_WordLength = USART_WordLength_8b;
 8005474:	2300      	movs	r3, #0
 8005476:	81bb      	strh	r3, [r7, #12]

		USART_Init(USART6,&USART_InitStruct);
 8005478:	f107 0308 	add.w	r3, r7, #8
 800547c:	4619      	mov	r1, r3
 800547e:	4810      	ldr	r0, [pc, #64]	; (80054c0 <usartInit+0xa4>)
 8005480:	f7fb fa8a 	bl	8000998 <USART_Init>

		//3. Enable USART6 Receive intterupt
		USART_ITConfig(USART6, USART_IT_RXNE, ENABLE);
 8005484:	2201      	movs	r2, #1
 8005486:	f240 5125 	movw	r1, #1317	; 0x525
 800548a:	480d      	ldr	r0, [pc, #52]	; (80054c0 <usartInit+0xa4>)
 800548c:	f7fb fb6e 	bl	8000b6c <USART_ITConfig>

		//4. Configuare NVIC
		NVIC_InitStruct.NVIC_IRQChannel = USART6_IRQn;
 8005490:	2347      	movs	r3, #71	; 0x47
 8005492:	713b      	strb	r3, [r7, #4]
		NVIC_InitStruct.NVIC_IRQChannelCmd = ENABLE;
 8005494:	2301      	movs	r3, #1
 8005496:	71fb      	strb	r3, [r7, #7]
		NVIC_InitStruct.NVIC_IRQChannelPreemptionPriority = 1;
 8005498:	2301      	movs	r3, #1
 800549a:	717b      	strb	r3, [r7, #5]
		NVIC_InitStruct.NVIC_IRQChannelSubPriority = 0;
 800549c:	2300      	movs	r3, #0
 800549e:	71bb      	strb	r3, [r7, #6]

		NVIC_InitStruct.NVIC_IRQChannel = USART6_IRQn;
 80054a0:	2347      	movs	r3, #71	; 0x47
 80054a2:	713b      	strb	r3, [r7, #4]
		NVIC_Init(&NVIC_InitStruct);
 80054a4:	1d3b      	adds	r3, r7, #4
 80054a6:	4618      	mov	r0, r3
 80054a8:	f7fa ffb0 	bl	800040c <NVIC_Init>

		USART_Cmd(USART6, ENABLE);
 80054ac:	2101      	movs	r1, #1
 80054ae:	4804      	ldr	r0, [pc, #16]	; (80054c0 <usartInit+0xa4>)
 80054b0:	f7fb fb2c 	bl	8000b0c <USART_Cmd>
}
 80054b4:	bf00      	nop
 80054b6:	3720      	adds	r7, #32
 80054b8:	46bd      	mov	sp, r7
 80054ba:	bd80      	pop	{r7, pc}
 80054bc:	40020000 	.word	0x40020000
 80054c0:	40011400 	.word	0x40011400

080054c4 <serialUartInit>:

void serialUartInit(void)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	af00      	add	r7, sp, #0
	//1. Khoi tao bo dem chua du lieu gui ve
	bufInit(g_pBuffDataRx, &g_pUartRxQueue, sizeof(g_pBuffDataRx[0]), SIZE_BUFF_DATA_RX);
 80054c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80054cc:	2201      	movs	r2, #1
 80054ce:	4904      	ldr	r1, [pc, #16]	; (80054e0 <serialUartInit+0x1c>)
 80054d0:	4804      	ldr	r0, [pc, #16]	; (80054e4 <serialUartInit+0x20>)
 80054d2:	f7fc fdad 	bl	8002030 <bufInit>

	//2. Khoi tao ket noi USART2
	usartInit();
 80054d6:	f7ff ffa1 	bl	800541c <usartInit>
}
 80054da:	bf00      	nop
 80054dc:	bd80      	pop	{r7, pc}
 80054de:	bf00      	nop
 80054e0:	20000498 	.word	0x20000498
 80054e4:	20000398 	.word	0x20000398

080054e8 <USART6_IRQHandler>:
 * @brief
 * @param  None
 * @retval None
 */
void USART6_IRQHandler(void)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b082      	sub	sp, #8
 80054ec:	af00      	add	r7, sp, #0
	uint8_t byData;
	if((USART_GetITStatus(USART6, USART_IT_RXNE) == SET))
 80054ee:	f240 5125 	movw	r1, #1317	; 0x525
 80054f2:	4810      	ldr	r0, [pc, #64]	; (8005534 <USART6_IRQHandler+0x4c>)
 80054f4:	f7fb fb82 	bl	8000bfc <USART_GetITStatus>
 80054f8:	4603      	mov	r3, r0
 80054fa:	2b01      	cmp	r3, #1
 80054fc:	d110      	bne.n	8005520 <USART6_IRQHandler+0x38>
	{
		byData = USART_ReceiveData(USART6);
 80054fe:	480d      	ldr	r0, [pc, #52]	; (8005534 <USART6_IRQHandler+0x4c>)
 8005500:	f7fb fb24 	bl	8000b4c <USART_ReceiveData>
 8005504:	4603      	mov	r3, r0
 8005506:	b2db      	uxtb	r3, r3
 8005508:	71fb      	strb	r3, [r7, #7]
		g_byRxNumByte++;
 800550a:	4b0b      	ldr	r3, [pc, #44]	; (8005538 <USART6_IRQHandler+0x50>)
 800550c:	781b      	ldrb	r3, [r3, #0]
 800550e:	3301      	adds	r3, #1
 8005510:	b2da      	uxtb	r2, r3
 8005512:	4b09      	ldr	r3, [pc, #36]	; (8005538 <USART6_IRQHandler+0x50>)
 8005514:	701a      	strb	r2, [r3, #0]
		bufEnDat(&g_pUartRxQueue,&byData);
 8005516:	1dfb      	adds	r3, r7, #7
 8005518:	4619      	mov	r1, r3
 800551a:	4808      	ldr	r0, [pc, #32]	; (800553c <USART6_IRQHandler+0x54>)
 800551c:	f7fc fdee 	bl	80020fc <bufEnDat>
	}
	USART_ClearITPendingBit(USART6, USART_IT_RXNE);
 8005520:	f240 5125 	movw	r1, #1317	; 0x525
 8005524:	4803      	ldr	r0, [pc, #12]	; (8005534 <USART6_IRQHandler+0x4c>)
 8005526:	f7fb fbc4 	bl	8000cb2 <USART_ClearITPendingBit>
}
 800552a:	bf00      	nop
 800552c:	3708      	adds	r7, #8
 800552e:	46bd      	mov	sp, r7
 8005530:	bd80      	pop	{r7, pc}
 8005532:	bf00      	nop
 8005534:	40011400 	.word	0x40011400
 8005538:	20000396 	.word	0x20000396
 800553c:	20000498 	.word	0x20000498

08005540 <dwCalculatorTime>:
#include "sys.h"
#include "timer.h"
#include "delay.h"

uint32_t dwCalculatorTime(uint32_t dwTimeInit,uint32_t dwTimeCurrent)
{
 8005540:	b480      	push	{r7}
 8005542:	b083      	sub	sp, #12
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
 8005548:	6039      	str	r1, [r7, #0]
	if(dwTimeCurrent >= dwTimeInit)
 800554a:	683a      	ldr	r2, [r7, #0]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	429a      	cmp	r2, r3
 8005550:	d303      	bcc.n	800555a <dwCalculatorTime+0x1a>
	{
		return (dwTimeCurrent - dwTimeInit);
 8005552:	683a      	ldr	r2, [r7, #0]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	1ad3      	subs	r3, r2, r3
 8005558:	e003      	b.n	8005562 <dwCalculatorTime+0x22>
	}else
	{
		return (0xFFFFFFFF + dwTimeCurrent - dwTimeInit);
 800555a:	683a      	ldr	r2, [r7, #0]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	1ad3      	subs	r3, r2, r3
 8005560:	3b01      	subs	r3, #1
	}
}
 8005562:	4618      	mov	r0, r3
 8005564:	370c      	adds	r7, #12
 8005566:	46bd      	mov	sp, r7
 8005568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556c:	4770      	bx	lr

0800556e <delay_ms>:
void delay_ms(u32 nms)
{	 	 
 800556e:	b580      	push	{r7, lr}
 8005570:	b084      	sub	sp, #16
 8005572:	af00      	add	r7, sp, #0
 8005574:	6078      	str	r0, [r7, #4]
	uint32_t dwTimeInit = GetMilSecTick();
 8005576:	f7ff fe63 	bl	8005240 <GetMilSecTick>
 800557a:	60f8      	str	r0, [r7, #12]
	uint32_t dwTimeCurrent = 0;
 800557c:	2300      	movs	r3, #0
 800557e:	60bb      	str	r3, [r7, #8]

	do{
		dwTimeCurrent = GetMilSecTick();
 8005580:	f7ff fe5e 	bl	8005240 <GetMilSecTick>
 8005584:	60b8      	str	r0, [r7, #8]
	}
	while(dwCalculatorTime(dwTimeInit, dwTimeCurrent)<nms);
 8005586:	68b9      	ldr	r1, [r7, #8]
 8005588:	68f8      	ldr	r0, [r7, #12]
 800558a:	f7ff ffd9 	bl	8005540 <dwCalculatorTime>
 800558e:	4602      	mov	r2, r0
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	4293      	cmp	r3, r2
 8005594:	d8f4      	bhi.n	8005580 <delay_ms+0x12>
}
 8005596:	bf00      	nop
 8005598:	bf00      	nop
 800559a:	3710      	adds	r7, #16
 800559c:	46bd      	mov	sp, r7
 800559e:	bd80      	pop	{r7, pc}

080055a0 <main>:

/******************************************************************************/
/*                            EXPORTED FUNCTIONS                              */
/******************************************************************************/
int main(void)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	af00      	add	r7, sp, #0
	appInitCommon();
 80055a4:	f000 f806 	bl	80055b4 <appInitCommon>

    /* Loop forever */
	while(1)
	{
		appStateManager();
 80055a8:	f000 f838 	bl	800561c <appStateManager>
		processSerialUartReceiver();
 80055ac:	f7ff fe78 	bl	80052a0 <processSerialUartReceiver>
		appStateManager();
 80055b0:	e7fa      	b.n	80055a8 <main+0x8>
	...

080055b4 <appInitCommon>:
 * @param  None
 * @retval None
 */

static void appInitCommon(void)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	af00      	add	r7, sp, #0
	SystemCoreClockUpdate();
 80055b8:	f7fa fe54 	bl	8000264 <SystemCoreClockUpdate>
	buttonInit();
 80055bc:	f7fc fe4e 	bl	800225c <buttonInit>
	TimerInit();
 80055c0:	f7ff fe1c 	bl	80051fc <TimerInit>
	serialUartInit();
 80055c4:	f7ff ff7e 	bl	80054c4 <serialUartInit>
	LCD_Init();
 80055c8:	f7fc fad2 	bl	8001b70 <LCD_Init>
	SerialHandleEventCallback(procUartCmd);
 80055cc:	4803      	ldr	r0, [pc, #12]	; (80055dc <appInitCommon+0x28>)
 80055ce:	f7ff ff15 	bl	80053fc <SerialHandleEventCallback>
	eCurrentState = STATE_APP_STARTUP;
 80055d2:	4b03      	ldr	r3, [pc, #12]	; (80055e0 <appInitCommon+0x2c>)
 80055d4:	2200      	movs	r2, #0
 80055d6:	701a      	strb	r2, [r3, #0]
}
 80055d8:	bf00      	nop
 80055da:	bd80      	pop	{r7, pc}
 80055dc:	0800614d 	.word	0x0800614d
 80055e0:	20000501 	.word	0x20000501

080055e4 <setStateApp>:
 * @param  state: State of application
 * @retval None
 */

static void setStateApp(StateApp_e state)
{
 80055e4:	b480      	push	{r7}
 80055e6:	b083      	sub	sp, #12
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	4603      	mov	r3, r0
 80055ec:	71fb      	strb	r3, [r7, #7]
	eCurrentState = state;
 80055ee:	4a04      	ldr	r2, [pc, #16]	; (8005600 <setStateApp+0x1c>)
 80055f0:	79fb      	ldrb	r3, [r7, #7]
 80055f2:	7013      	strb	r3, [r2, #0]
}
 80055f4:	bf00      	nop
 80055f6:	370c      	adds	r7, #12
 80055f8:	46bd      	mov	sp, r7
 80055fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fe:	4770      	bx	lr
 8005600:	20000501 	.word	0x20000501

08005604 <getStateApp>:
 * @brief  Get state of application
 * @param  None
 * @retval State of application
 */
static StateApp_e getStateApp(void)
{
 8005604:	b480      	push	{r7}
 8005606:	af00      	add	r7, sp, #0
	return eCurrentState;
 8005608:	4b03      	ldr	r3, [pc, #12]	; (8005618 <getStateApp+0x14>)
 800560a:	781b      	ldrb	r3, [r3, #0]
}
 800560c:	4618      	mov	r0, r3
 800560e:	46bd      	mov	sp, r7
 8005610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005614:	4770      	bx	lr
 8005616:	bf00      	nop
 8005618:	20000501 	.word	0x20000501

0800561c <appStateManager>:
 * @brief  Manager state application
 * @param  event: Su kien
 * @retval None
 */
static void appStateManager(void)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b082      	sub	sp, #8
 8005620:	af00      	add	r7, sp, #0
	StateApp_e event = getStateApp();
 8005622:	f7ff ffef 	bl	8005604 <getStateApp>
 8005626:	4603      	mov	r3, r0
 8005628:	71fb      	strb	r3, [r7, #7]
	switch(event)
 800562a:	79fb      	ldrb	r3, [r7, #7]
 800562c:	2b02      	cmp	r3, #2
 800562e:	d034      	beq.n	800569a <appStateManager+0x7e>
 8005630:	2b02      	cmp	r3, #2
 8005632:	dc3b      	bgt.n	80056ac <appStateManager+0x90>
 8005634:	2b00      	cmp	r3, #0
 8005636:	d002      	beq.n	800563e <appStateManager+0x22>
 8005638:	2b01      	cmp	r3, #1
 800563a:	d01d      	beq.n	8005678 <appStateManager+0x5c>
	case STATE_APP_RESET:
		memset(g_pstrMACLast,0,sizeof(g_pstrMACLast));
		setStateApp(STATE_APP_STARTUP);
		break;
	default:
		break;
 800563c:	e036      	b.n	80056ac <appStateManager+0x90>
		Gui_Drawbmp16(0,0,gImage_logo);
 800563e:	4a1e      	ldr	r2, [pc, #120]	; (80056b8 <appStateManager+0x9c>)
 8005640:	2100      	movs	r1, #0
 8005642:	2000      	movs	r0, #0
 8005644:	f7fc f8d6 	bl	80017f4 <Gui_Drawbmp16>
		delay_ms(2000);
 8005648:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800564c:	f7ff ff8f 	bl	800556e <delay_ms>
			modeTest = getModeTest();
 8005650:	f7fd fba2 	bl	8002d98 <getModeTest>
 8005654:	4603      	mov	r3, r0
 8005656:	461a      	mov	r2, r3
 8005658:	4b18      	ldr	r3, [pc, #96]	; (80056bc <appStateManager+0xa0>)
 800565a:	701a      	strb	r2, [r3, #0]
		while(modeTest == NONE);
 800565c:	4b17      	ldr	r3, [pc, #92]	; (80056bc <appStateManager+0xa0>)
 800565e:	781b      	ldrb	r3, [r3, #0]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d0f5      	beq.n	8005650 <appStateManager+0x34>
		setStateApp(STATE_APP_IDLE);
 8005664:	2001      	movs	r0, #1
 8005666:	f7ff ffbd 	bl	80055e4 <setStateApp>
		USART_ITConfig(USART6, USART_IT_RXNE, ENABLE);
 800566a:	2201      	movs	r2, #1
 800566c:	f240 5125 	movw	r1, #1317	; 0x525
 8005670:	4813      	ldr	r0, [pc, #76]	; (80056c0 <appStateManager+0xa4>)
 8005672:	f7fb fa7b 	bl	8000b6c <USART_ITConfig>
		break;
 8005676:	e01a      	b.n	80056ae <appStateManager+0x92>
		if(processEventButton() == RETURN)
 8005678:	f7fc fe3c 	bl	80022f4 <processEventButton>
 800567c:	4603      	mov	r3, r0
 800567e:	2b06      	cmp	r3, #6
 8005680:	d108      	bne.n	8005694 <appStateManager+0x78>
					USART_ITConfig(USART6, USART_IT_RXNE, DISABLE);
 8005682:	2200      	movs	r2, #0
 8005684:	f240 5125 	movw	r1, #1317	; 0x525
 8005688:	480d      	ldr	r0, [pc, #52]	; (80056c0 <appStateManager+0xa4>)
 800568a:	f7fb fa6f 	bl	8000b6c <USART_ITConfig>
					setStateApp(STATE_APP_RESET);
 800568e:	2002      	movs	r0, #2
 8005690:	f7ff ffa8 	bl	80055e4 <setStateApp>
				processSerialUartReceiver();
 8005694:	f7ff fe04 	bl	80052a0 <processSerialUartReceiver>
		break;
 8005698:	e009      	b.n	80056ae <appStateManager+0x92>
		memset(g_pstrMACLast,0,sizeof(g_pstrMACLast));
 800569a:	2211      	movs	r2, #17
 800569c:	2100      	movs	r1, #0
 800569e:	4809      	ldr	r0, [pc, #36]	; (80056c4 <appStateManager+0xa8>)
 80056a0:	f001 f926 	bl	80068f0 <memset>
		setStateApp(STATE_APP_STARTUP);
 80056a4:	2000      	movs	r0, #0
 80056a6:	f7ff ff9d 	bl	80055e4 <setStateApp>
		break;
 80056aa:	e000      	b.n	80056ae <appStateManager+0x92>
		break;
 80056ac:	bf00      	nop

	}
}
 80056ae:	bf00      	nop
 80056b0:	3708      	adds	r7, #8
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}
 80056b6:	bf00      	nop
 80056b8:	08008310 	.word	0x08008310
 80056bc:	20000500 	.word	0x20000500
 80056c0:	40011400 	.word	0x40011400
 80056c4:	200004d4 	.word	0x200004d4

080056c8 <processedUartReceivedNewsOfTouch>:



static void processedUartReceivedNewsOfTouch(McuInfor_t *pCmd)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b082      	sub	sp, #8
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]

	g_byEnpointCntMCU = pCmd->endpoint_cnt;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	799a      	ldrb	r2, [r3, #6]
 80056d4:	4b08      	ldr	r3, [pc, #32]	; (80056f8 <processedUartReceivedNewsOfTouch+0x30>)
 80056d6:	701a      	strb	r2, [r3, #0]

	g_byTypeMCU = pCmd->type;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	795a      	ldrb	r2, [r3, #5]
 80056dc:	4b07      	ldr	r3, [pc, #28]	; (80056fc <processedUartReceivedNewsOfTouch+0x34>)
 80056de:	701a      	strb	r2, [r3, #0]

	hexToAscii(g_pstrVersionMCU,pCmd->version,LENGTH_OF_VERSION);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	3302      	adds	r3, #2
 80056e4:	2203      	movs	r2, #3
 80056e6:	4619      	mov	r1, r3
 80056e8:	4805      	ldr	r0, [pc, #20]	; (8005700 <processedUartReceivedNewsOfTouch+0x38>)
 80056ea:	f000 fd4b 	bl	8006184 <hexToAscii>

}
 80056ee:	bf00      	nop
 80056f0:	3708      	adds	r7, #8
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bd80      	pop	{r7, pc}
 80056f6:	bf00      	nop
 80056f8:	200004a9 	.word	0x200004a9
 80056fc:	200004ff 	.word	0x200004ff
 8005700:	200004f8 	.word	0x200004f8

08005704 <processedUartReceivedNewsOfZigbeeAndBLE>:


static void processedUartReceivedNewsOfZigbeeAndBLE(CmdData_t *pCmd)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b096      	sub	sp, #88	; 0x58
 8005708:	af04      	add	r7, sp, #16
 800570a:	6078      	str	r0, [r7, #4]
	//0.Get mode

	//1. Khai bao chuoi chua thong tin in ra QR
	char byDataPrint[5+(LENGTH_OF_MAC+LENGTH_OF_VERSION*2 +LENGTH_OF_PID \
 800570c:	2300      	movs	r3, #0
 800570e:	623b      	str	r3, [r7, #32]
 8005710:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005714:	2223      	movs	r2, #35	; 0x23
 8005716:	2100      	movs	r1, #0
 8005718:	4618      	mov	r0, r3
 800571a:	f001 f8e9 	bl	80068f0 <memset>
			+ LENGTH_OF_DEVICE_TYPE)*2] = {0};

	//2. Chuoi chua thong tin hien tai
	char pstrMAC[LENGTH_OF_MAC * 2+1] = {0};
 800571e:	2300      	movs	r3, #0
 8005720:	60fb      	str	r3, [r7, #12]
 8005722:	f107 0310 	add.w	r3, r7, #16
 8005726:	2200      	movs	r2, #0
 8005728:	601a      	str	r2, [r3, #0]
 800572a:	605a      	str	r2, [r3, #4]
 800572c:	609a      	str	r2, [r3, #8]
 800572e:	731a      	strb	r2, [r3, #12]
	char pstrDeviceType[LENGTH_OF_DEVICE_TYPE * 2 +1] = {0};
 8005730:	4b54      	ldr	r3, [pc, #336]	; (8005884 <processedUartReceivedNewsOfZigbeeAndBLE+0x180>)
 8005732:	881b      	ldrh	r3, [r3, #0]
 8005734:	813b      	strh	r3, [r7, #8]
 8005736:	2300      	movs	r3, #0
 8005738:	72bb      	strb	r3, [r7, #10]
	static char pStrPID[LENGTH_OF_PID * 2 +1] = {0};
	static char pStrModelID[20] = {0};
	//3. Xoa du lieu cu
	memset(byDataPrint,0,sizeof(byDataPrint));
 800573a:	f107 0320 	add.w	r3, r7, #32
 800573e:	2227      	movs	r2, #39	; 0x27
 8005740:	2100      	movs	r1, #0
 8005742:	4618      	mov	r0, r3
 8005744:	f001 f8d4 	bl	80068f0 <memset>
	//4. Chuyen doi du lieu tu dang Hex sang ma ASCII


	hexToAscii( pstrMAC,pCmd->pbyMAC, LENGTH_OF_MAC);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	1d59      	adds	r1, r3, #5
 800574c:	f107 030c 	add.w	r3, r7, #12
 8005750:	2208      	movs	r2, #8
 8005752:	4618      	mov	r0, r3
 8005754:	f000 fd16 	bl	8006184 <hexToAscii>

	hexToAscii(pstrDeviceType, &(pCmd->deviceType), LENGTH_OF_DEVICE_TYPE);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	1c99      	adds	r1, r3, #2
 800575c:	f107 0308 	add.w	r3, r7, #8
 8005760:	2201      	movs	r2, #1
 8005762:	4618      	mov	r0, r3
 8005764:	f000 fd0e 	bl	8006184 <hexToAscii>

	//5. Quet 2 lan de lay version cua zigbee va bluetooth
	static uint8_t byStatusTemp = 0;

	if(pCmd->protocolType == PROTOCOL_TYPE_ZIGBEE)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	785b      	ldrb	r3, [r3, #1]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d122      	bne.n	80057b6 <processedUartReceivedNewsOfZigbeeAndBLE+0xb2>
	{
		byStatusTemp ++;
 8005770:	4b45      	ldr	r3, [pc, #276]	; (8005888 <processedUartReceivedNewsOfZigbeeAndBLE+0x184>)
 8005772:	781b      	ldrb	r3, [r3, #0]
 8005774:	3301      	adds	r3, #1
 8005776:	b2da      	uxtb	r2, r3
 8005778:	4b43      	ldr	r3, [pc, #268]	; (8005888 <processedUartReceivedNewsOfZigbeeAndBLE+0x184>)
 800577a:	701a      	strb	r2, [r3, #0]
		hexToAscii( g_pstrVersionZigBee,pCmd->pbyVersion, LENGTH_OF_VERSION);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	330d      	adds	r3, #13
 8005780:	2203      	movs	r2, #3
 8005782:	4619      	mov	r1, r3
 8005784:	4841      	ldr	r0, [pc, #260]	; (800588c <processedUartReceivedNewsOfZigbeeAndBLE+0x188>)
 8005786:	f000 fcfd 	bl	8006184 <hexToAscii>

		memset(g_pstrMACZigbee,0,sizeof(g_pstrMACZigbee));
 800578a:	2211      	movs	r2, #17
 800578c:	2100      	movs	r1, #0
 800578e:	4840      	ldr	r0, [pc, #256]	; (8005890 <processedUartReceivedNewsOfZigbeeAndBLE+0x18c>)
 8005790:	f001 f8ae 	bl	80068f0 <memset>
		strcpy(g_pstrMACZigbee,pstrMAC);
 8005794:	f107 030c 	add.w	r3, r7, #12
 8005798:	4619      	mov	r1, r3
 800579a:	483d      	ldr	r0, [pc, #244]	; (8005890 <processedUartReceivedNewsOfZigbeeAndBLE+0x18c>)
 800579c:	f001 f8bf 	bl	800691e <strcpy>
		g_byEnpointCntZigBee = pCmd->byEndpointCnt;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	78da      	ldrb	r2, [r3, #3]
 80057a4:	4b3b      	ldr	r3, [pc, #236]	; (8005894 <processedUartReceivedNewsOfZigbeeAndBLE+0x190>)
 80057a6:	701a      	strb	r2, [r3, #0]

		getModelID(pStrModelID, pCmd->pbyInFor);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	3310      	adds	r3, #16
 80057ac:	4619      	mov	r1, r3
 80057ae:	483a      	ldr	r0, [pc, #232]	; (8005898 <processedUartReceivedNewsOfZigbeeAndBLE+0x194>)
 80057b0:	f001 f81a 	bl	80067e8 <getModelID>
 80057b4:	e026      	b.n	8005804 <processedUartReceivedNewsOfZigbeeAndBLE+0x100>

	}

	else if(pCmd->protocolType == PROTOCOL_TYPE_BLUETOOTH)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	785b      	ldrb	r3, [r3, #1]
 80057ba:	2b01      	cmp	r3, #1
 80057bc:	d122      	bne.n	8005804 <processedUartReceivedNewsOfZigbeeAndBLE+0x100>
	{
		byStatusTemp ++;
 80057be:	4b32      	ldr	r3, [pc, #200]	; (8005888 <processedUartReceivedNewsOfZigbeeAndBLE+0x184>)
 80057c0:	781b      	ldrb	r3, [r3, #0]
 80057c2:	3301      	adds	r3, #1
 80057c4:	b2da      	uxtb	r2, r3
 80057c6:	4b30      	ldr	r3, [pc, #192]	; (8005888 <processedUartReceivedNewsOfZigbeeAndBLE+0x184>)
 80057c8:	701a      	strb	r2, [r3, #0]
		hexToAscii( g_pstrVersionBluetooth,pCmd->pbyVersion, LENGTH_OF_VERSION);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	330d      	adds	r3, #13
 80057ce:	2203      	movs	r2, #3
 80057d0:	4619      	mov	r1, r3
 80057d2:	4832      	ldr	r0, [pc, #200]	; (800589c <processedUartReceivedNewsOfZigbeeAndBLE+0x198>)
 80057d4:	f000 fcd6 	bl	8006184 <hexToAscii>

		memset(g_pstrMACBle,0,sizeof(g_pstrMACBle));
 80057d8:	2211      	movs	r2, #17
 80057da:	2100      	movs	r1, #0
 80057dc:	4830      	ldr	r0, [pc, #192]	; (80058a0 <processedUartReceivedNewsOfZigbeeAndBLE+0x19c>)
 80057de:	f001 f887 	bl	80068f0 <memset>
		strcpy(g_pstrMACBle,pstrMAC);
 80057e2:	f107 030c 	add.w	r3, r7, #12
 80057e6:	4619      	mov	r1, r3
 80057e8:	482d      	ldr	r0, [pc, #180]	; (80058a0 <processedUartReceivedNewsOfZigbeeAndBLE+0x19c>)
 80057ea:	f001 f898 	bl	800691e <strcpy>
		g_byEnpointCntBLE = pCmd->byEndpointCnt;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	78da      	ldrb	r2, [r3, #3]
 80057f2:	4b2c      	ldr	r3, [pc, #176]	; (80058a4 <processedUartReceivedNewsOfZigbeeAndBLE+0x1a0>)
 80057f4:	701a      	strb	r2, [r3, #0]

		hexToAscii( pStrPID,pCmd->pbyInFor, LENGTH_OF_PID);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	3310      	adds	r3, #16
 80057fa:	2202      	movs	r2, #2
 80057fc:	4619      	mov	r1, r3
 80057fe:	482a      	ldr	r0, [pc, #168]	; (80058a8 <processedUartReceivedNewsOfZigbeeAndBLE+0x1a4>)
 8005800:	f000 fcc0 	bl	8006184 <hexToAscii>
	}

		//6.1 Reset buffer khi mac thay doi
	static uint8_t byFlagOfBufReset = 0;

	if((strcmp(&g_pstrMACZigbee[4],&g_pstrMACLast[4])!=0)||(strcmp(&g_pstrMACBle[4],&g_pstrMACLast[4])!=0))
 8005804:	4929      	ldr	r1, [pc, #164]	; (80058ac <processedUartReceivedNewsOfZigbeeAndBLE+0x1a8>)
 8005806:	482a      	ldr	r0, [pc, #168]	; (80058b0 <processedUartReceivedNewsOfZigbeeAndBLE+0x1ac>)
 8005808:	f7fa fce4 	bl	80001d4 <strcmp>
 800580c:	4603      	mov	r3, r0
 800580e:	2b00      	cmp	r3, #0
 8005810:	d106      	bne.n	8005820 <processedUartReceivedNewsOfZigbeeAndBLE+0x11c>
 8005812:	4926      	ldr	r1, [pc, #152]	; (80058ac <processedUartReceivedNewsOfZigbeeAndBLE+0x1a8>)
 8005814:	4827      	ldr	r0, [pc, #156]	; (80058b4 <processedUartReceivedNewsOfZigbeeAndBLE+0x1b0>)
 8005816:	f7fa fcdd 	bl	80001d4 <strcmp>
 800581a:	4603      	mov	r3, r0
 800581c:	2b00      	cmp	r3, #0
 800581e:	d021      	beq.n	8005864 <processedUartReceivedNewsOfZigbeeAndBLE+0x160>
	{
		USART_ITConfig(USART6, USART_IT_RXNE, DISABLE);
 8005820:	2200      	movs	r2, #0
 8005822:	f240 5125 	movw	r1, #1317	; 0x525
 8005826:	4824      	ldr	r0, [pc, #144]	; (80058b8 <processedUartReceivedNewsOfZigbeeAndBLE+0x1b4>)
 8005828:	f7fb f9a0 	bl	8000b6c <USART_ITConfig>
		if(byFlagOfBufReset == 0)
 800582c:	4b23      	ldr	r3, [pc, #140]	; (80058bc <processedUartReceivedNewsOfZigbeeAndBLE+0x1b8>)
 800582e:	781b      	ldrb	r3, [r3, #0]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d111      	bne.n	8005858 <processedUartReceivedNewsOfZigbeeAndBLE+0x154>
		{
			//Reset data of queue
			resetBuffer();
 8005834:	f7ff fd1e 	bl	8005274 <resetBuffer>
			g_byEnpointCntMCU = 0;
 8005838:	4b21      	ldr	r3, [pc, #132]	; (80058c0 <processedUartReceivedNewsOfZigbeeAndBLE+0x1bc>)
 800583a:	2200      	movs	r2, #0
 800583c:	701a      	strb	r2, [r3, #0]
			memset(g_pstrVersionBluetooth,0,sizeof(g_pstrVersionBluetooth));
 800583e:	2207      	movs	r2, #7
 8005840:	2100      	movs	r1, #0
 8005842:	4816      	ldr	r0, [pc, #88]	; (800589c <processedUartReceivedNewsOfZigbeeAndBLE+0x198>)
 8005844:	f001 f854 	bl	80068f0 <memset>
			memset(g_pstrVersionZigBee,0,sizeof(g_pstrVersionZigBee));
 8005848:	2207      	movs	r2, #7
 800584a:	2100      	movs	r1, #0
 800584c:	480f      	ldr	r0, [pc, #60]	; (800588c <processedUartReceivedNewsOfZigbeeAndBLE+0x188>)
 800584e:	f001 f84f 	bl	80068f0 <memset>
			byFlagOfBufReset = 1;
 8005852:	4b1a      	ldr	r3, [pc, #104]	; (80058bc <processedUartReceivedNewsOfZigbeeAndBLE+0x1b8>)
 8005854:	2201      	movs	r2, #1
 8005856:	701a      	strb	r2, [r3, #0]

		}
		USART_ITConfig(USART6, USART_IT_RXNE, ENABLE);
 8005858:	2201      	movs	r2, #1
 800585a:	f240 5125 	movw	r1, #1317	; 0x525
 800585e:	4816      	ldr	r0, [pc, #88]	; (80058b8 <processedUartReceivedNewsOfZigbeeAndBLE+0x1b4>)
 8005860:	f7fb f984 	bl	8000b6c <USART_ITConfig>
		//Gia tri dem so lan quet lai ban tin khi thay doi thiet bi co endpoint khac
	static uint8_t byCountTemp = 0;

	//7.1 Dual mode

	switch(modeTest)
 8005864:	4b17      	ldr	r3, [pc, #92]	; (80058c4 <processedUartReceivedNewsOfZigbeeAndBLE+0x1c0>)
 8005866:	781b      	ldrb	r3, [r3, #0]
 8005868:	2b03      	cmp	r3, #3
 800586a:	f000 831e 	beq.w	8005eaa <processedUartReceivedNewsOfZigbeeAndBLE+0x7a6>
 800586e:	2b03      	cmp	r3, #3
 8005870:	f300 8433 	bgt.w	80060da <processedUartReceivedNewsOfZigbeeAndBLE+0x9d6>
 8005874:	2b01      	cmp	r3, #1
 8005876:	d027      	beq.n	80058c8 <processedUartReceivedNewsOfZigbeeAndBLE+0x1c4>
 8005878:	2b02      	cmp	r3, #2
 800587a:	f000 81f4 	beq.w	8005c66 <processedUartReceivedNewsOfZigbeeAndBLE+0x562>
					}
				}
				break;
				break;
			default:
				break;
 800587e:	f000 bc2c 	b.w	80060da <processedUartReceivedNewsOfZigbeeAndBLE+0x9d6>
 8005882:	bf00      	nop
 8005884:	08006994 	.word	0x08006994
 8005888:	20000502 	.word	0x20000502
 800588c:	200004f0 	.word	0x200004f0
 8005890:	200004ac 	.word	0x200004ac
 8005894:	200004ab 	.word	0x200004ab
 8005898:	20000504 	.word	0x20000504
 800589c:	200004e8 	.word	0x200004e8
 80058a0:	200004c0 	.word	0x200004c0
 80058a4:	200004aa 	.word	0x200004aa
 80058a8:	20000518 	.word	0x20000518
 80058ac:	200004d8 	.word	0x200004d8
 80058b0:	200004b0 	.word	0x200004b0
 80058b4:	200004c4 	.word	0x200004c4
 80058b8:	40011400 	.word	0x40011400
 80058bc:	2000051d 	.word	0x2000051d
 80058c0:	200004a9 	.word	0x200004a9
 80058c4:	20000500 	.word	0x20000500
				if(strcmp(&g_pstrMACZigbee[4],&g_pstrMACLast[4])!=0 &&(byStatusTemp>=2))
 80058c8:	4983      	ldr	r1, [pc, #524]	; (8005ad8 <processedUartReceivedNewsOfZigbeeAndBLE+0x3d4>)
 80058ca:	4884      	ldr	r0, [pc, #528]	; (8005adc <processedUartReceivedNewsOfZigbeeAndBLE+0x3d8>)
 80058cc:	f7fa fc82 	bl	80001d4 <strcmp>
 80058d0:	4603      	mov	r3, r0
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	f000 8403 	beq.w	80060de <processedUartReceivedNewsOfZigbeeAndBLE+0x9da>
 80058d8:	4b81      	ldr	r3, [pc, #516]	; (8005ae0 <processedUartReceivedNewsOfZigbeeAndBLE+0x3dc>)
 80058da:	781b      	ldrb	r3, [r3, #0]
 80058dc:	2b01      	cmp	r3, #1
 80058de:	f240 83fe 	bls.w	80060de <processedUartReceivedNewsOfZigbeeAndBLE+0x9da>
					strcpy(g_pstrMACLast,pstrMAC);
 80058e2:	f107 030c 	add.w	r3, r7, #12
 80058e6:	4619      	mov	r1, r3
 80058e8:	487e      	ldr	r0, [pc, #504]	; (8005ae4 <processedUartReceivedNewsOfZigbeeAndBLE+0x3e0>)
 80058ea:	f001 f818 	bl	800691e <strcpy>
					if((g_byEnpointCntMCU == g_byEnpointCntBLE)&&(g_byEnpointCntMCU == g_byEnpointCntZigBee))
 80058ee:	4b7e      	ldr	r3, [pc, #504]	; (8005ae8 <processedUartReceivedNewsOfZigbeeAndBLE+0x3e4>)
 80058f0:	781a      	ldrb	r2, [r3, #0]
 80058f2:	4b7e      	ldr	r3, [pc, #504]	; (8005aec <processedUartReceivedNewsOfZigbeeAndBLE+0x3e8>)
 80058f4:	781b      	ldrb	r3, [r3, #0]
 80058f6:	429a      	cmp	r2, r3
 80058f8:	f040 80da 	bne.w	8005ab0 <processedUartReceivedNewsOfZigbeeAndBLE+0x3ac>
 80058fc:	4b7a      	ldr	r3, [pc, #488]	; (8005ae8 <processedUartReceivedNewsOfZigbeeAndBLE+0x3e4>)
 80058fe:	781a      	ldrb	r2, [r3, #0]
 8005900:	4b7b      	ldr	r3, [pc, #492]	; (8005af0 <processedUartReceivedNewsOfZigbeeAndBLE+0x3ec>)
 8005902:	781b      	ldrb	r3, [r3, #0]
 8005904:	429a      	cmp	r2, r3
 8005906:	f040 80d3 	bne.w	8005ab0 <processedUartReceivedNewsOfZigbeeAndBLE+0x3ac>
						strcat(byDataPrint,g_pstrMACZigbee);
 800590a:	f107 0320 	add.w	r3, r7, #32
 800590e:	4979      	ldr	r1, [pc, #484]	; (8005af4 <processedUartReceivedNewsOfZigbeeAndBLE+0x3f0>)
 8005910:	4618      	mov	r0, r3
 8005912:	f000 fff5 	bl	8006900 <strcat>
						strcat(byDataPrint,",");
 8005916:	f107 0320 	add.w	r3, r7, #32
 800591a:	4618      	mov	r0, r3
 800591c:	f7fa fc64 	bl	80001e8 <strlen>
 8005920:	4603      	mov	r3, r0
 8005922:	461a      	mov	r2, r3
 8005924:	f107 0320 	add.w	r3, r7, #32
 8005928:	4413      	add	r3, r2
 800592a:	4973      	ldr	r1, [pc, #460]	; (8005af8 <processedUartReceivedNewsOfZigbeeAndBLE+0x3f4>)
 800592c:	461a      	mov	r2, r3
 800592e:	460b      	mov	r3, r1
 8005930:	881b      	ldrh	r3, [r3, #0]
 8005932:	8013      	strh	r3, [r2, #0]
						strcat(byDataPrint,pstrDeviceType);
 8005934:	f107 0208 	add.w	r2, r7, #8
 8005938:	f107 0320 	add.w	r3, r7, #32
 800593c:	4611      	mov	r1, r2
 800593e:	4618      	mov	r0, r3
 8005940:	f000 ffde 	bl	8006900 <strcat>
						strcat(byDataPrint,",");
 8005944:	f107 0320 	add.w	r3, r7, #32
 8005948:	4618      	mov	r0, r3
 800594a:	f7fa fc4d 	bl	80001e8 <strlen>
 800594e:	4603      	mov	r3, r0
 8005950:	461a      	mov	r2, r3
 8005952:	f107 0320 	add.w	r3, r7, #32
 8005956:	4413      	add	r3, r2
 8005958:	4967      	ldr	r1, [pc, #412]	; (8005af8 <processedUartReceivedNewsOfZigbeeAndBLE+0x3f4>)
 800595a:	461a      	mov	r2, r3
 800595c:	460b      	mov	r3, r1
 800595e:	881b      	ldrh	r3, [r3, #0]
 8005960:	8013      	strh	r3, [r2, #0]
						strcat(byDataPrint,pStrPID);
 8005962:	f107 0320 	add.w	r3, r7, #32
 8005966:	4965      	ldr	r1, [pc, #404]	; (8005afc <processedUartReceivedNewsOfZigbeeAndBLE+0x3f8>)
 8005968:	4618      	mov	r0, r3
 800596a:	f000 ffc9 	bl	8006900 <strcat>
						strcat(byDataPrint,",");
 800596e:	f107 0320 	add.w	r3, r7, #32
 8005972:	4618      	mov	r0, r3
 8005974:	f7fa fc38 	bl	80001e8 <strlen>
 8005978:	4603      	mov	r3, r0
 800597a:	461a      	mov	r2, r3
 800597c:	f107 0320 	add.w	r3, r7, #32
 8005980:	4413      	add	r3, r2
 8005982:	495d      	ldr	r1, [pc, #372]	; (8005af8 <processedUartReceivedNewsOfZigbeeAndBLE+0x3f4>)
 8005984:	461a      	mov	r2, r3
 8005986:	460b      	mov	r3, r1
 8005988:	881b      	ldrh	r3, [r3, #0]
 800598a:	8013      	strh	r3, [r2, #0]
						strcat(byDataPrint,g_pstrVersionZigBee);
 800598c:	f107 0320 	add.w	r3, r7, #32
 8005990:	495b      	ldr	r1, [pc, #364]	; (8005b00 <processedUartReceivedNewsOfZigbeeAndBLE+0x3fc>)
 8005992:	4618      	mov	r0, r3
 8005994:	f000 ffb4 	bl	8006900 <strcat>
						strcat(byDataPrint,",");
 8005998:	f107 0320 	add.w	r3, r7, #32
 800599c:	4618      	mov	r0, r3
 800599e:	f7fa fc23 	bl	80001e8 <strlen>
 80059a2:	4603      	mov	r3, r0
 80059a4:	461a      	mov	r2, r3
 80059a6:	f107 0320 	add.w	r3, r7, #32
 80059aa:	4413      	add	r3, r2
 80059ac:	4952      	ldr	r1, [pc, #328]	; (8005af8 <processedUartReceivedNewsOfZigbeeAndBLE+0x3f4>)
 80059ae:	461a      	mov	r2, r3
 80059b0:	460b      	mov	r3, r1
 80059b2:	881b      	ldrh	r3, [r3, #0]
 80059b4:	8013      	strh	r3, [r2, #0]
						strcat(byDataPrint,g_pstrVersionBluetooth);
 80059b6:	f107 0320 	add.w	r3, r7, #32
 80059ba:	4952      	ldr	r1, [pc, #328]	; (8005b04 <processedUartReceivedNewsOfZigbeeAndBLE+0x400>)
 80059bc:	4618      	mov	r0, r3
 80059be:	f000 ff9f 	bl	8006900 <strcat>
						generateQRCode(0,25,byDataPrint,strlen(byDataPrint));
 80059c2:	f107 0320 	add.w	r3, r7, #32
 80059c6:	4618      	mov	r0, r3
 80059c8:	f7fa fc0e 	bl	80001e8 <strlen>
 80059cc:	4603      	mov	r3, r0
 80059ce:	b2db      	uxtb	r3, r3
 80059d0:	f107 0220 	add.w	r2, r7, #32
 80059d4:	2119      	movs	r1, #25
 80059d6:	2000      	movs	r0, #0
 80059d8:	f7ff f9cb 	bl	8004d72 <generateQRCode>
						LCD_ClearCursor(0, 155, 240, 320, WHITE);
 80059dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80059e0:	9300      	str	r3, [sp, #0]
 80059e2:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80059e6:	22f0      	movs	r2, #240	; 0xf0
 80059e8:	219b      	movs	r1, #155	; 0x9b
 80059ea:	2000      	movs	r0, #0
 80059ec:	f7fc f838 	bl	8001a60 <LCD_ClearCursor>
						printMACLcd(g_pstrMACZigbee,10,155,16);
 80059f0:	2310      	movs	r3, #16
 80059f2:	229b      	movs	r2, #155	; 0x9b
 80059f4:	210a      	movs	r1, #10
 80059f6:	483f      	ldr	r0, [pc, #252]	; (8005af4 <processedUartReceivedNewsOfZigbeeAndBLE+0x3f0>)
 80059f8:	f000 fc0e 	bl	8006218 <printMACLcd>
						printEndPointCnt(g_byEnpointCntMCU, 10, 175, 16,MCU);
 80059fc:	4b3a      	ldr	r3, [pc, #232]	; (8005ae8 <processedUartReceivedNewsOfZigbeeAndBLE+0x3e4>)
 80059fe:	7818      	ldrb	r0, [r3, #0]
 8005a00:	2302      	movs	r3, #2
 8005a02:	9300      	str	r3, [sp, #0]
 8005a04:	2310      	movs	r3, #16
 8005a06:	22af      	movs	r2, #175	; 0xaf
 8005a08:	210a      	movs	r1, #10
 8005a0a:	f000 fc7f 	bl	800630c <printEndPointCnt>
						LCD_DrawLine(10,190,230,190);
 8005a0e:	23be      	movs	r3, #190	; 0xbe
 8005a10:	22e6      	movs	r2, #230	; 0xe6
 8005a12:	21be      	movs	r1, #190	; 0xbe
 8005a14:	200a      	movs	r0, #10
 8005a16:	f7fb f9cd 	bl	8000db4 <LCD_DrawLine>
						printVersion(g_pstrVersionZigBee, 10, 195, 16,ZIGBEE);
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	9300      	str	r3, [sp, #0]
 8005a1e:	2310      	movs	r3, #16
 8005a20:	22c3      	movs	r2, #195	; 0xc3
 8005a22:	210a      	movs	r1, #10
 8005a24:	4836      	ldr	r0, [pc, #216]	; (8005b00 <processedUartReceivedNewsOfZigbeeAndBLE+0x3fc>)
 8005a26:	f000 fd11 	bl	800644c <printVersion>
						printModelId(pStrModelID, 10 ,215 ,16);
 8005a2a:	2310      	movs	r3, #16
 8005a2c:	22d7      	movs	r2, #215	; 0xd7
 8005a2e:	210a      	movs	r1, #10
 8005a30:	4835      	ldr	r0, [pc, #212]	; (8005b08 <processedUartReceivedNewsOfZigbeeAndBLE+0x404>)
 8005a32:	f000 fdb3 	bl	800659c <printModelId>
						LCD_DrawLine(10,235,230,235);
 8005a36:	23eb      	movs	r3, #235	; 0xeb
 8005a38:	22e6      	movs	r2, #230	; 0xe6
 8005a3a:	21eb      	movs	r1, #235	; 0xeb
 8005a3c:	200a      	movs	r0, #10
 8005a3e:	f7fb f9b9 	bl	8000db4 <LCD_DrawLine>
						printVersion(g_pstrVersionBluetooth, 10, 235, 16,BLUETOOTH);
 8005a42:	2300      	movs	r3, #0
 8005a44:	9300      	str	r3, [sp, #0]
 8005a46:	2310      	movs	r3, #16
 8005a48:	22eb      	movs	r2, #235	; 0xeb
 8005a4a:	210a      	movs	r1, #10
 8005a4c:	482d      	ldr	r0, [pc, #180]	; (8005b04 <processedUartReceivedNewsOfZigbeeAndBLE+0x400>)
 8005a4e:	f000 fcfd 	bl	800644c <printVersion>
						printProductID(pStrPID, 10 ,255 ,16);
 8005a52:	2310      	movs	r3, #16
 8005a54:	22ff      	movs	r2, #255	; 0xff
 8005a56:	210a      	movs	r1, #10
 8005a58:	4828      	ldr	r0, [pc, #160]	; (8005afc <processedUartReceivedNewsOfZigbeeAndBLE+0x3f8>)
 8005a5a:	f000 fdfd 	bl	8006658 <printProductID>
						LCD_DrawLine(10,275,230,275);
 8005a5e:	f240 1313 	movw	r3, #275	; 0x113
 8005a62:	22e6      	movs	r2, #230	; 0xe6
 8005a64:	f240 1113 	movw	r1, #275	; 0x113
 8005a68:	200a      	movs	r0, #10
 8005a6a:	f7fb f9a3 	bl	8000db4 <LCD_DrawLine>
						printVersion(g_pstrVersionMCU, 10, 275, 16, MCU);
 8005a6e:	2302      	movs	r3, #2
 8005a70:	9300      	str	r3, [sp, #0]
 8005a72:	2310      	movs	r3, #16
 8005a74:	f240 1213 	movw	r2, #275	; 0x113
 8005a78:	210a      	movs	r1, #10
 8005a7a:	4824      	ldr	r0, [pc, #144]	; (8005b0c <processedUartReceivedNewsOfZigbeeAndBLE+0x408>)
 8005a7c:	f000 fce6 	bl	800644c <printVersion>
						printTypeMCU(g_byTypeMCU, 10, 295, 16);
 8005a80:	4b23      	ldr	r3, [pc, #140]	; (8005b10 <processedUartReceivedNewsOfZigbeeAndBLE+0x40c>)
 8005a82:	7818      	ldrb	r0, [r3, #0]
 8005a84:	2310      	movs	r3, #16
 8005a86:	f240 1227 	movw	r2, #295	; 0x127
 8005a8a:	210a      	movs	r1, #10
 8005a8c:	f000 fe42 	bl	8006714 <printTypeMCU>
						byFlagOfBufReset = 0;
 8005a90:	4b20      	ldr	r3, [pc, #128]	; (8005b14 <processedUartReceivedNewsOfZigbeeAndBLE+0x410>)
 8005a92:	2200      	movs	r2, #0
 8005a94:	701a      	strb	r2, [r3, #0]
						byCountTemp = 0;
 8005a96:	4b20      	ldr	r3, [pc, #128]	; (8005b18 <processedUartReceivedNewsOfZigbeeAndBLE+0x414>)
 8005a98:	2200      	movs	r2, #0
 8005a9a:	701a      	strb	r2, [r3, #0]
						g_byEnpointCntMCU = 0;
 8005a9c:	4b12      	ldr	r3, [pc, #72]	; (8005ae8 <processedUartReceivedNewsOfZigbeeAndBLE+0x3e4>)
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	701a      	strb	r2, [r3, #0]
						g_byEnpointCntBLE = 0;
 8005aa2:	4b12      	ldr	r3, [pc, #72]	; (8005aec <processedUartReceivedNewsOfZigbeeAndBLE+0x3e8>)
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	701a      	strb	r2, [r3, #0]
						g_byEnpointCntZigBee = 0;
 8005aa8:	4b11      	ldr	r3, [pc, #68]	; (8005af0 <processedUartReceivedNewsOfZigbeeAndBLE+0x3ec>)
 8005aaa:	2200      	movs	r2, #0
 8005aac:	701a      	strb	r2, [r3, #0]
				break;
 8005aae:	e316      	b.n	80060de <processedUartReceivedNewsOfZigbeeAndBLE+0x9da>
							if(byCountTemp == 0)
 8005ab0:	4b19      	ldr	r3, [pc, #100]	; (8005b18 <processedUartReceivedNewsOfZigbeeAndBLE+0x414>)
 8005ab2:	781b      	ldrb	r3, [r3, #0]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d131      	bne.n	8005b1c <processedUartReceivedNewsOfZigbeeAndBLE+0x418>
								memset(g_pstrMACLast,0,sizeof(g_pstrMACLast));
 8005ab8:	2211      	movs	r2, #17
 8005aba:	2100      	movs	r1, #0
 8005abc:	4809      	ldr	r0, [pc, #36]	; (8005ae4 <processedUartReceivedNewsOfZigbeeAndBLE+0x3e0>)
 8005abe:	f000 ff17 	bl	80068f0 <memset>
								byStatusTemp =0;
 8005ac2:	4b07      	ldr	r3, [pc, #28]	; (8005ae0 <processedUartReceivedNewsOfZigbeeAndBLE+0x3dc>)
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	701a      	strb	r2, [r3, #0]
								byCountTemp ++;
 8005ac8:	4b13      	ldr	r3, [pc, #76]	; (8005b18 <processedUartReceivedNewsOfZigbeeAndBLE+0x414>)
 8005aca:	781b      	ldrb	r3, [r3, #0]
 8005acc:	3301      	adds	r3, #1
 8005ace:	b2da      	uxtb	r2, r3
 8005ad0:	4b11      	ldr	r3, [pc, #68]	; (8005b18 <processedUartReceivedNewsOfZigbeeAndBLE+0x414>)
 8005ad2:	701a      	strb	r2, [r3, #0]
				break;
 8005ad4:	e303      	b.n	80060de <processedUartReceivedNewsOfZigbeeAndBLE+0x9da>
 8005ad6:	bf00      	nop
 8005ad8:	200004d8 	.word	0x200004d8
 8005adc:	200004b0 	.word	0x200004b0
 8005ae0:	20000502 	.word	0x20000502
 8005ae4:	200004d4 	.word	0x200004d4
 8005ae8:	200004a9 	.word	0x200004a9
 8005aec:	200004aa 	.word	0x200004aa
 8005af0:	200004ab 	.word	0x200004ab
 8005af4:	200004ac 	.word	0x200004ac
 8005af8:	08006948 	.word	0x08006948
 8005afc:	20000518 	.word	0x20000518
 8005b00:	200004f0 	.word	0x200004f0
 8005b04:	200004e8 	.word	0x200004e8
 8005b08:	20000504 	.word	0x20000504
 8005b0c:	200004f8 	.word	0x200004f8
 8005b10:	200004ff 	.word	0x200004ff
 8005b14:	2000051d 	.word	0x2000051d
 8005b18:	2000051e 	.word	0x2000051e
							}else if(byCountTemp>=1)
 8005b1c:	4bb1      	ldr	r3, [pc, #708]	; (8005de4 <processedUartReceivedNewsOfZigbeeAndBLE+0x6e0>)
 8005b1e:	781b      	ldrb	r3, [r3, #0]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	f000 82dc 	beq.w	80060de <processedUartReceivedNewsOfZigbeeAndBLE+0x9da>
								if((g_byEnpointCntMCU != g_byEnpointCntBLE))
 8005b26:	4bb0      	ldr	r3, [pc, #704]	; (8005de8 <processedUartReceivedNewsOfZigbeeAndBLE+0x6e4>)
 8005b28:	781a      	ldrb	r2, [r3, #0]
 8005b2a:	4bb0      	ldr	r3, [pc, #704]	; (8005dec <processedUartReceivedNewsOfZigbeeAndBLE+0x6e8>)
 8005b2c:	781b      	ldrb	r3, [r3, #0]
 8005b2e:	429a      	cmp	r2, r3
 8005b30:	d048      	beq.n	8005bc4 <processedUartReceivedNewsOfZigbeeAndBLE+0x4c0>
									LCD_ClearCursor(0, 25, 240, 320, WHITE);
 8005b32:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005b36:	9300      	str	r3, [sp, #0]
 8005b38:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8005b3c:	22f0      	movs	r2, #240	; 0xf0
 8005b3e:	2119      	movs	r1, #25
 8005b40:	2000      	movs	r0, #0
 8005b42:	f7fb ff8d 	bl	8001a60 <LCD_ClearCursor>
									Gui_StrCenter(0,100,RED, WHITE, (u8 *)"Firmware BLE ERROR!!!", 16, 0);
 8005b46:	2300      	movs	r3, #0
 8005b48:	9302      	str	r3, [sp, #8]
 8005b4a:	2310      	movs	r3, #16
 8005b4c:	9301      	str	r3, [sp, #4]
 8005b4e:	4ba8      	ldr	r3, [pc, #672]	; (8005df0 <processedUartReceivedNewsOfZigbeeAndBLE+0x6ec>)
 8005b50:	9300      	str	r3, [sp, #0]
 8005b52:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005b56:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8005b5a:	2164      	movs	r1, #100	; 0x64
 8005b5c:	2000      	movs	r0, #0
 8005b5e:	f7fb fe15 	bl	800178c <Gui_StrCenter>
									printMACLcd(g_pstrMACZigbee,10,120,16);
 8005b62:	2310      	movs	r3, #16
 8005b64:	2278      	movs	r2, #120	; 0x78
 8005b66:	210a      	movs	r1, #10
 8005b68:	48a2      	ldr	r0, [pc, #648]	; (8005df4 <processedUartReceivedNewsOfZigbeeAndBLE+0x6f0>)
 8005b6a:	f000 fb55 	bl	8006218 <printMACLcd>
									printEndPointCnt(g_byEnpointCntZigBee, 10, 140, 16,ZIGBEE);
 8005b6e:	4ba2      	ldr	r3, [pc, #648]	; (8005df8 <processedUartReceivedNewsOfZigbeeAndBLE+0x6f4>)
 8005b70:	7818      	ldrb	r0, [r3, #0]
 8005b72:	2301      	movs	r3, #1
 8005b74:	9300      	str	r3, [sp, #0]
 8005b76:	2310      	movs	r3, #16
 8005b78:	228c      	movs	r2, #140	; 0x8c
 8005b7a:	210a      	movs	r1, #10
 8005b7c:	f000 fbc6 	bl	800630c <printEndPointCnt>
									printEndPointCnt(g_byEnpointCntBLE, 10, 160, 16,BLUETOOTH);
 8005b80:	4b9a      	ldr	r3, [pc, #616]	; (8005dec <processedUartReceivedNewsOfZigbeeAndBLE+0x6e8>)
 8005b82:	7818      	ldrb	r0, [r3, #0]
 8005b84:	2300      	movs	r3, #0
 8005b86:	9300      	str	r3, [sp, #0]
 8005b88:	2310      	movs	r3, #16
 8005b8a:	22a0      	movs	r2, #160	; 0xa0
 8005b8c:	210a      	movs	r1, #10
 8005b8e:	f000 fbbd 	bl	800630c <printEndPointCnt>
									memset(g_pstrVersionBluetooth,0,sizeof(g_pstrVersionBluetooth));
 8005b92:	2207      	movs	r2, #7
 8005b94:	2100      	movs	r1, #0
 8005b96:	4899      	ldr	r0, [pc, #612]	; (8005dfc <processedUartReceivedNewsOfZigbeeAndBLE+0x6f8>)
 8005b98:	f000 feaa 	bl	80068f0 <memset>
									memset(g_pstrVersionZigBee,0,sizeof(g_pstrVersionZigBee));
 8005b9c:	2207      	movs	r2, #7
 8005b9e:	2100      	movs	r1, #0
 8005ba0:	4897      	ldr	r0, [pc, #604]	; (8005e00 <processedUartReceivedNewsOfZigbeeAndBLE+0x6fc>)
 8005ba2:	f000 fea5 	bl	80068f0 <memset>
									memset(pStrPID,0,sizeof(pStrPID));
 8005ba6:	2205      	movs	r2, #5
 8005ba8:	2100      	movs	r1, #0
 8005baa:	4896      	ldr	r0, [pc, #600]	; (8005e04 <processedUartReceivedNewsOfZigbeeAndBLE+0x700>)
 8005bac:	f000 fea0 	bl	80068f0 <memset>
									memset(pstrDeviceType,0,sizeof(pstrDeviceType));
 8005bb0:	f107 0308 	add.w	r3, r7, #8
 8005bb4:	2203      	movs	r2, #3
 8005bb6:	2100      	movs	r1, #0
 8005bb8:	4618      	mov	r0, r3
 8005bba:	f000 fe99 	bl	80068f0 <memset>
									byCountTemp = 0;
 8005bbe:	4b89      	ldr	r3, [pc, #548]	; (8005de4 <processedUartReceivedNewsOfZigbeeAndBLE+0x6e0>)
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	701a      	strb	r2, [r3, #0]
								if(g_byEnpointCntMCU != g_byEnpointCntZigBee)
 8005bc4:	4b88      	ldr	r3, [pc, #544]	; (8005de8 <processedUartReceivedNewsOfZigbeeAndBLE+0x6e4>)
 8005bc6:	781a      	ldrb	r2, [r3, #0]
 8005bc8:	4b8b      	ldr	r3, [pc, #556]	; (8005df8 <processedUartReceivedNewsOfZigbeeAndBLE+0x6f4>)
 8005bca:	781b      	ldrb	r3, [r3, #0]
 8005bcc:	429a      	cmp	r2, r3
 8005bce:	f000 8286 	beq.w	80060de <processedUartReceivedNewsOfZigbeeAndBLE+0x9da>
									LCD_ClearCursor(0, 25, 240, 320, WHITE);
 8005bd2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005bd6:	9300      	str	r3, [sp, #0]
 8005bd8:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8005bdc:	22f0      	movs	r2, #240	; 0xf0
 8005bde:	2119      	movs	r1, #25
 8005be0:	2000      	movs	r0, #0
 8005be2:	f7fb ff3d 	bl	8001a60 <LCD_ClearCursor>
									Gui_StrCenter(0,100,RED, WHITE, (u8 *)"Firmware ZigBee ERROR!!!", 16, 0);
 8005be6:	2300      	movs	r3, #0
 8005be8:	9302      	str	r3, [sp, #8]
 8005bea:	2310      	movs	r3, #16
 8005bec:	9301      	str	r3, [sp, #4]
 8005bee:	4b86      	ldr	r3, [pc, #536]	; (8005e08 <processedUartReceivedNewsOfZigbeeAndBLE+0x704>)
 8005bf0:	9300      	str	r3, [sp, #0]
 8005bf2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005bf6:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8005bfa:	2164      	movs	r1, #100	; 0x64
 8005bfc:	2000      	movs	r0, #0
 8005bfe:	f7fb fdc5 	bl	800178c <Gui_StrCenter>
									printMACLcd(g_pstrMACZigbee,10,120,16);
 8005c02:	2310      	movs	r3, #16
 8005c04:	2278      	movs	r2, #120	; 0x78
 8005c06:	210a      	movs	r1, #10
 8005c08:	487a      	ldr	r0, [pc, #488]	; (8005df4 <processedUartReceivedNewsOfZigbeeAndBLE+0x6f0>)
 8005c0a:	f000 fb05 	bl	8006218 <printMACLcd>
									printEndPointCnt(g_byEnpointCntZigBee, 10, 140, 16,ZIGBEE);
 8005c0e:	4b7a      	ldr	r3, [pc, #488]	; (8005df8 <processedUartReceivedNewsOfZigbeeAndBLE+0x6f4>)
 8005c10:	7818      	ldrb	r0, [r3, #0]
 8005c12:	2301      	movs	r3, #1
 8005c14:	9300      	str	r3, [sp, #0]
 8005c16:	2310      	movs	r3, #16
 8005c18:	228c      	movs	r2, #140	; 0x8c
 8005c1a:	210a      	movs	r1, #10
 8005c1c:	f000 fb76 	bl	800630c <printEndPointCnt>
									printEndPointCnt(g_byEnpointCntBLE, 10, 160, 16,BLUETOOTH);
 8005c20:	4b72      	ldr	r3, [pc, #456]	; (8005dec <processedUartReceivedNewsOfZigbeeAndBLE+0x6e8>)
 8005c22:	7818      	ldrb	r0, [r3, #0]
 8005c24:	2300      	movs	r3, #0
 8005c26:	9300      	str	r3, [sp, #0]
 8005c28:	2310      	movs	r3, #16
 8005c2a:	22a0      	movs	r2, #160	; 0xa0
 8005c2c:	210a      	movs	r1, #10
 8005c2e:	f000 fb6d 	bl	800630c <printEndPointCnt>
									memset(g_pstrVersionBluetooth,0,sizeof(g_pstrVersionBluetooth));
 8005c32:	2207      	movs	r2, #7
 8005c34:	2100      	movs	r1, #0
 8005c36:	4871      	ldr	r0, [pc, #452]	; (8005dfc <processedUartReceivedNewsOfZigbeeAndBLE+0x6f8>)
 8005c38:	f000 fe5a 	bl	80068f0 <memset>
									memset(g_pstrVersionZigBee,0,sizeof(g_pstrVersionZigBee));
 8005c3c:	2207      	movs	r2, #7
 8005c3e:	2100      	movs	r1, #0
 8005c40:	486f      	ldr	r0, [pc, #444]	; (8005e00 <processedUartReceivedNewsOfZigbeeAndBLE+0x6fc>)
 8005c42:	f000 fe55 	bl	80068f0 <memset>
									memset(pStrPID,0,sizeof(pStrPID));
 8005c46:	2205      	movs	r2, #5
 8005c48:	2100      	movs	r1, #0
 8005c4a:	486e      	ldr	r0, [pc, #440]	; (8005e04 <processedUartReceivedNewsOfZigbeeAndBLE+0x700>)
 8005c4c:	f000 fe50 	bl	80068f0 <memset>
									memset(pstrDeviceType,0,sizeof(pstrDeviceType));
 8005c50:	f107 0308 	add.w	r3, r7, #8
 8005c54:	2203      	movs	r2, #3
 8005c56:	2100      	movs	r1, #0
 8005c58:	4618      	mov	r0, r3
 8005c5a:	f000 fe49 	bl	80068f0 <memset>
									byCountTemp = 0;
 8005c5e:	4b61      	ldr	r3, [pc, #388]	; (8005de4 <processedUartReceivedNewsOfZigbeeAndBLE+0x6e0>)
 8005c60:	2200      	movs	r2, #0
 8005c62:	701a      	strb	r2, [r3, #0]
				break;
 8005c64:	e23b      	b.n	80060de <processedUartReceivedNewsOfZigbeeAndBLE+0x9da>
				if(strcmp(&g_pstrMACZigbee[4],&g_pstrMACLast[4])!=0 &&(byStatusTemp>=2))
 8005c66:	4969      	ldr	r1, [pc, #420]	; (8005e0c <processedUartReceivedNewsOfZigbeeAndBLE+0x708>)
 8005c68:	4869      	ldr	r0, [pc, #420]	; (8005e10 <processedUartReceivedNewsOfZigbeeAndBLE+0x70c>)
 8005c6a:	f7fa fab3 	bl	80001d4 <strcmp>
 8005c6e:	4603      	mov	r3, r0
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	f000 8236 	beq.w	80060e2 <processedUartReceivedNewsOfZigbeeAndBLE+0x9de>
 8005c76:	4b67      	ldr	r3, [pc, #412]	; (8005e14 <processedUartReceivedNewsOfZigbeeAndBLE+0x710>)
 8005c78:	781b      	ldrb	r3, [r3, #0]
 8005c7a:	2b01      	cmp	r3, #1
 8005c7c:	f240 8231 	bls.w	80060e2 <processedUartReceivedNewsOfZigbeeAndBLE+0x9de>
					strcpy(g_pstrMACLast,pstrMAC);
 8005c80:	f107 030c 	add.w	r3, r7, #12
 8005c84:	4619      	mov	r1, r3
 8005c86:	4864      	ldr	r0, [pc, #400]	; (8005e18 <processedUartReceivedNewsOfZigbeeAndBLE+0x714>)
 8005c88:	f000 fe49 	bl	800691e <strcpy>
					if(g_byEnpointCntMCU == g_byEnpointCntZigBee)
 8005c8c:	4b56      	ldr	r3, [pc, #344]	; (8005de8 <processedUartReceivedNewsOfZigbeeAndBLE+0x6e4>)
 8005c8e:	781a      	ldrb	r2, [r3, #0]
 8005c90:	4b59      	ldr	r3, [pc, #356]	; (8005df8 <processedUartReceivedNewsOfZigbeeAndBLE+0x6f4>)
 8005c92:	781b      	ldrb	r3, [r3, #0]
 8005c94:	429a      	cmp	r2, r3
 8005c96:	f040 8091 	bne.w	8005dbc <processedUartReceivedNewsOfZigbeeAndBLE+0x6b8>
						strcat(byDataPrint,g_pstrMACZigbee);
 8005c9a:	f107 0320 	add.w	r3, r7, #32
 8005c9e:	4955      	ldr	r1, [pc, #340]	; (8005df4 <processedUartReceivedNewsOfZigbeeAndBLE+0x6f0>)
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	f000 fe2d 	bl	8006900 <strcat>
						strcat(byDataPrint,",");
 8005ca6:	f107 0320 	add.w	r3, r7, #32
 8005caa:	4618      	mov	r0, r3
 8005cac:	f7fa fa9c 	bl	80001e8 <strlen>
 8005cb0:	4603      	mov	r3, r0
 8005cb2:	461a      	mov	r2, r3
 8005cb4:	f107 0320 	add.w	r3, r7, #32
 8005cb8:	4413      	add	r3, r2
 8005cba:	4958      	ldr	r1, [pc, #352]	; (8005e1c <processedUartReceivedNewsOfZigbeeAndBLE+0x718>)
 8005cbc:	461a      	mov	r2, r3
 8005cbe:	460b      	mov	r3, r1
 8005cc0:	881b      	ldrh	r3, [r3, #0]
 8005cc2:	8013      	strh	r3, [r2, #0]
						strcat(byDataPrint,pstrDeviceType);
 8005cc4:	f107 0208 	add.w	r2, r7, #8
 8005cc8:	f107 0320 	add.w	r3, r7, #32
 8005ccc:	4611      	mov	r1, r2
 8005cce:	4618      	mov	r0, r3
 8005cd0:	f000 fe16 	bl	8006900 <strcat>
						strcat(byDataPrint,",");
 8005cd4:	f107 0320 	add.w	r3, r7, #32
 8005cd8:	4618      	mov	r0, r3
 8005cda:	f7fa fa85 	bl	80001e8 <strlen>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	461a      	mov	r2, r3
 8005ce2:	f107 0320 	add.w	r3, r7, #32
 8005ce6:	4413      	add	r3, r2
 8005ce8:	494c      	ldr	r1, [pc, #304]	; (8005e1c <processedUartReceivedNewsOfZigbeeAndBLE+0x718>)
 8005cea:	461a      	mov	r2, r3
 8005cec:	460b      	mov	r3, r1
 8005cee:	881b      	ldrh	r3, [r3, #0]
 8005cf0:	8013      	strh	r3, [r2, #0]
						strcat(byDataPrint,g_pstrVersionZigBee);
 8005cf2:	f107 0320 	add.w	r3, r7, #32
 8005cf6:	4942      	ldr	r1, [pc, #264]	; (8005e00 <processedUartReceivedNewsOfZigbeeAndBLE+0x6fc>)
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	f000 fe01 	bl	8006900 <strcat>
						generateQRCode(0,25,byDataPrint,strlen(byDataPrint));
 8005cfe:	f107 0320 	add.w	r3, r7, #32
 8005d02:	4618      	mov	r0, r3
 8005d04:	f7fa fa70 	bl	80001e8 <strlen>
 8005d08:	4603      	mov	r3, r0
 8005d0a:	b2db      	uxtb	r3, r3
 8005d0c:	f107 0220 	add.w	r2, r7, #32
 8005d10:	2119      	movs	r1, #25
 8005d12:	2000      	movs	r0, #0
 8005d14:	f7ff f82d 	bl	8004d72 <generateQRCode>
						LCD_ClearCursor(0, 155, 240, 320, WHITE);
 8005d18:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005d1c:	9300      	str	r3, [sp, #0]
 8005d1e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8005d22:	22f0      	movs	r2, #240	; 0xf0
 8005d24:	219b      	movs	r1, #155	; 0x9b
 8005d26:	2000      	movs	r0, #0
 8005d28:	f7fb fe9a 	bl	8001a60 <LCD_ClearCursor>
						printMACLcd(g_pstrMACZigbee,10,155,16);
 8005d2c:	2310      	movs	r3, #16
 8005d2e:	229b      	movs	r2, #155	; 0x9b
 8005d30:	210a      	movs	r1, #10
 8005d32:	4830      	ldr	r0, [pc, #192]	; (8005df4 <processedUartReceivedNewsOfZigbeeAndBLE+0x6f0>)
 8005d34:	f000 fa70 	bl	8006218 <printMACLcd>
						printEndPointCnt(g_byEnpointCntMCU, 10, 175, 16,MCU);
 8005d38:	4b2b      	ldr	r3, [pc, #172]	; (8005de8 <processedUartReceivedNewsOfZigbeeAndBLE+0x6e4>)
 8005d3a:	7818      	ldrb	r0, [r3, #0]
 8005d3c:	2302      	movs	r3, #2
 8005d3e:	9300      	str	r3, [sp, #0]
 8005d40:	2310      	movs	r3, #16
 8005d42:	22af      	movs	r2, #175	; 0xaf
 8005d44:	210a      	movs	r1, #10
 8005d46:	f000 fae1 	bl	800630c <printEndPointCnt>
						LCD_DrawLine(10,195,230,195);
 8005d4a:	23c3      	movs	r3, #195	; 0xc3
 8005d4c:	22e6      	movs	r2, #230	; 0xe6
 8005d4e:	21c3      	movs	r1, #195	; 0xc3
 8005d50:	200a      	movs	r0, #10
 8005d52:	f7fb f82f 	bl	8000db4 <LCD_DrawLine>
						printVersion(g_pstrVersionZigBee, 10, 195, 16,ZIGBEE);
 8005d56:	2301      	movs	r3, #1
 8005d58:	9300      	str	r3, [sp, #0]
 8005d5a:	2310      	movs	r3, #16
 8005d5c:	22c3      	movs	r2, #195	; 0xc3
 8005d5e:	210a      	movs	r1, #10
 8005d60:	4827      	ldr	r0, [pc, #156]	; (8005e00 <processedUartReceivedNewsOfZigbeeAndBLE+0x6fc>)
 8005d62:	f000 fb73 	bl	800644c <printVersion>
						printModelId(pStrModelID, 10 ,215 ,16);
 8005d66:	2310      	movs	r3, #16
 8005d68:	22d7      	movs	r2, #215	; 0xd7
 8005d6a:	210a      	movs	r1, #10
 8005d6c:	482c      	ldr	r0, [pc, #176]	; (8005e20 <processedUartReceivedNewsOfZigbeeAndBLE+0x71c>)
 8005d6e:	f000 fc15 	bl	800659c <printModelId>
						LCD_DrawLine(10,235,230,235);
 8005d72:	23eb      	movs	r3, #235	; 0xeb
 8005d74:	22e6      	movs	r2, #230	; 0xe6
 8005d76:	21eb      	movs	r1, #235	; 0xeb
 8005d78:	200a      	movs	r0, #10
 8005d7a:	f7fb f81b 	bl	8000db4 <LCD_DrawLine>
						printVersion(g_pstrVersionMCU, 10, 235, 16, MCU);
 8005d7e:	2302      	movs	r3, #2
 8005d80:	9300      	str	r3, [sp, #0]
 8005d82:	2310      	movs	r3, #16
 8005d84:	22eb      	movs	r2, #235	; 0xeb
 8005d86:	210a      	movs	r1, #10
 8005d88:	4826      	ldr	r0, [pc, #152]	; (8005e24 <processedUartReceivedNewsOfZigbeeAndBLE+0x720>)
 8005d8a:	f000 fb5f 	bl	800644c <printVersion>
						printTypeMCU(g_byTypeMCU, 10, 255, 16);
 8005d8e:	4b26      	ldr	r3, [pc, #152]	; (8005e28 <processedUartReceivedNewsOfZigbeeAndBLE+0x724>)
 8005d90:	7818      	ldrb	r0, [r3, #0]
 8005d92:	2310      	movs	r3, #16
 8005d94:	22ff      	movs	r2, #255	; 0xff
 8005d96:	210a      	movs	r1, #10
 8005d98:	f000 fcbc 	bl	8006714 <printTypeMCU>
						byFlagOfBufReset = 0;
 8005d9c:	4b23      	ldr	r3, [pc, #140]	; (8005e2c <processedUartReceivedNewsOfZigbeeAndBLE+0x728>)
 8005d9e:	2200      	movs	r2, #0
 8005da0:	701a      	strb	r2, [r3, #0]
						byCountTemp = 0;
 8005da2:	4b10      	ldr	r3, [pc, #64]	; (8005de4 <processedUartReceivedNewsOfZigbeeAndBLE+0x6e0>)
 8005da4:	2200      	movs	r2, #0
 8005da6:	701a      	strb	r2, [r3, #0]
						g_byEnpointCntMCU = 0;
 8005da8:	4b0f      	ldr	r3, [pc, #60]	; (8005de8 <processedUartReceivedNewsOfZigbeeAndBLE+0x6e4>)
 8005daa:	2200      	movs	r2, #0
 8005dac:	701a      	strb	r2, [r3, #0]
						g_byEnpointCntBLE = 0;
 8005dae:	4b0f      	ldr	r3, [pc, #60]	; (8005dec <processedUartReceivedNewsOfZigbeeAndBLE+0x6e8>)
 8005db0:	2200      	movs	r2, #0
 8005db2:	701a      	strb	r2, [r3, #0]
						g_byEnpointCntZigBee = 0;
 8005db4:	4b10      	ldr	r3, [pc, #64]	; (8005df8 <processedUartReceivedNewsOfZigbeeAndBLE+0x6f4>)
 8005db6:	2200      	movs	r2, #0
 8005db8:	701a      	strb	r2, [r3, #0]
				break;
 8005dba:	e192      	b.n	80060e2 <processedUartReceivedNewsOfZigbeeAndBLE+0x9de>
							if(byCountTemp == 0)
 8005dbc:	4b09      	ldr	r3, [pc, #36]	; (8005de4 <processedUartReceivedNewsOfZigbeeAndBLE+0x6e0>)
 8005dbe:	781b      	ldrb	r3, [r3, #0]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d135      	bne.n	8005e30 <processedUartReceivedNewsOfZigbeeAndBLE+0x72c>
								memset(g_pstrMACLast,0,sizeof(g_pstrMACLast));
 8005dc4:	2211      	movs	r2, #17
 8005dc6:	2100      	movs	r1, #0
 8005dc8:	4813      	ldr	r0, [pc, #76]	; (8005e18 <processedUartReceivedNewsOfZigbeeAndBLE+0x714>)
 8005dca:	f000 fd91 	bl	80068f0 <memset>
								byStatusTemp =0;
 8005dce:	4b11      	ldr	r3, [pc, #68]	; (8005e14 <processedUartReceivedNewsOfZigbeeAndBLE+0x710>)
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	701a      	strb	r2, [r3, #0]
								byCountTemp ++;
 8005dd4:	4b03      	ldr	r3, [pc, #12]	; (8005de4 <processedUartReceivedNewsOfZigbeeAndBLE+0x6e0>)
 8005dd6:	781b      	ldrb	r3, [r3, #0]
 8005dd8:	3301      	adds	r3, #1
 8005dda:	b2da      	uxtb	r2, r3
 8005ddc:	4b01      	ldr	r3, [pc, #4]	; (8005de4 <processedUartReceivedNewsOfZigbeeAndBLE+0x6e0>)
 8005dde:	701a      	strb	r2, [r3, #0]
				break;
 8005de0:	e17f      	b.n	80060e2 <processedUartReceivedNewsOfZigbeeAndBLE+0x9de>
 8005de2:	bf00      	nop
 8005de4:	2000051e 	.word	0x2000051e
 8005de8:	200004a9 	.word	0x200004a9
 8005dec:	200004aa 	.word	0x200004aa
 8005df0:	0800694c 	.word	0x0800694c
 8005df4:	200004ac 	.word	0x200004ac
 8005df8:	200004ab 	.word	0x200004ab
 8005dfc:	200004e8 	.word	0x200004e8
 8005e00:	200004f0 	.word	0x200004f0
 8005e04:	20000518 	.word	0x20000518
 8005e08:	08006964 	.word	0x08006964
 8005e0c:	200004d8 	.word	0x200004d8
 8005e10:	200004b0 	.word	0x200004b0
 8005e14:	20000502 	.word	0x20000502
 8005e18:	200004d4 	.word	0x200004d4
 8005e1c:	08006948 	.word	0x08006948
 8005e20:	20000504 	.word	0x20000504
 8005e24:	200004f8 	.word	0x200004f8
 8005e28:	200004ff 	.word	0x200004ff
 8005e2c:	2000051d 	.word	0x2000051d
							}else if(byCountTemp>=1)
 8005e30:	4bb3      	ldr	r3, [pc, #716]	; (8006100 <processedUartReceivedNewsOfZigbeeAndBLE+0x9fc>)
 8005e32:	781b      	ldrb	r3, [r3, #0]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	f000 8154 	beq.w	80060e2 <processedUartReceivedNewsOfZigbeeAndBLE+0x9de>
								LCD_ClearCursor(0, 25, 240, 320, WHITE);
 8005e3a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005e3e:	9300      	str	r3, [sp, #0]
 8005e40:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8005e44:	22f0      	movs	r2, #240	; 0xf0
 8005e46:	2119      	movs	r1, #25
 8005e48:	2000      	movs	r0, #0
 8005e4a:	f7fb fe09 	bl	8001a60 <LCD_ClearCursor>
								Gui_StrCenter(0,100,RED, WHITE, (u8 *)"Firmware ERROR!!!", 16, 0);
 8005e4e:	2300      	movs	r3, #0
 8005e50:	9302      	str	r3, [sp, #8]
 8005e52:	2310      	movs	r3, #16
 8005e54:	9301      	str	r3, [sp, #4]
 8005e56:	4bab      	ldr	r3, [pc, #684]	; (8006104 <processedUartReceivedNewsOfZigbeeAndBLE+0xa00>)
 8005e58:	9300      	str	r3, [sp, #0]
 8005e5a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005e5e:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8005e62:	2164      	movs	r1, #100	; 0x64
 8005e64:	2000      	movs	r0, #0
 8005e66:	f7fb fc91 	bl	800178c <Gui_StrCenter>
								printMACLcd(g_pstrMACZigbee,10,120,16);
 8005e6a:	2310      	movs	r3, #16
 8005e6c:	2278      	movs	r2, #120	; 0x78
 8005e6e:	210a      	movs	r1, #10
 8005e70:	48a5      	ldr	r0, [pc, #660]	; (8006108 <processedUartReceivedNewsOfZigbeeAndBLE+0xa04>)
 8005e72:	f000 f9d1 	bl	8006218 <printMACLcd>
								memset(g_pstrVersionBluetooth,0,sizeof(g_pstrVersionBluetooth));
 8005e76:	2207      	movs	r2, #7
 8005e78:	2100      	movs	r1, #0
 8005e7a:	48a4      	ldr	r0, [pc, #656]	; (800610c <processedUartReceivedNewsOfZigbeeAndBLE+0xa08>)
 8005e7c:	f000 fd38 	bl	80068f0 <memset>
								memset(g_pstrVersionZigBee,0,sizeof(g_pstrVersionZigBee));
 8005e80:	2207      	movs	r2, #7
 8005e82:	2100      	movs	r1, #0
 8005e84:	48a2      	ldr	r0, [pc, #648]	; (8006110 <processedUartReceivedNewsOfZigbeeAndBLE+0xa0c>)
 8005e86:	f000 fd33 	bl	80068f0 <memset>
								memset(pStrPID,0,sizeof(pStrPID));
 8005e8a:	2205      	movs	r2, #5
 8005e8c:	2100      	movs	r1, #0
 8005e8e:	48a1      	ldr	r0, [pc, #644]	; (8006114 <processedUartReceivedNewsOfZigbeeAndBLE+0xa10>)
 8005e90:	f000 fd2e 	bl	80068f0 <memset>
								memset(pstrDeviceType,0,sizeof(pstrDeviceType));
 8005e94:	f107 0308 	add.w	r3, r7, #8
 8005e98:	2203      	movs	r2, #3
 8005e9a:	2100      	movs	r1, #0
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	f000 fd27 	bl	80068f0 <memset>
								byCountTemp = 0;
 8005ea2:	4b97      	ldr	r3, [pc, #604]	; (8006100 <processedUartReceivedNewsOfZigbeeAndBLE+0x9fc>)
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	701a      	strb	r2, [r3, #0]
				break;
 8005ea8:	e11b      	b.n	80060e2 <processedUartReceivedNewsOfZigbeeAndBLE+0x9de>
				if(strcmp(&g_pstrMACBle[4],&g_pstrMACLast[4])!=0 &&(byStatusTemp>=2))
 8005eaa:	499b      	ldr	r1, [pc, #620]	; (8006118 <processedUartReceivedNewsOfZigbeeAndBLE+0xa14>)
 8005eac:	489b      	ldr	r0, [pc, #620]	; (800611c <processedUartReceivedNewsOfZigbeeAndBLE+0xa18>)
 8005eae:	f7fa f991 	bl	80001d4 <strcmp>
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	f000 8116 	beq.w	80060e6 <processedUartReceivedNewsOfZigbeeAndBLE+0x9e2>
 8005eba:	4b99      	ldr	r3, [pc, #612]	; (8006120 <processedUartReceivedNewsOfZigbeeAndBLE+0xa1c>)
 8005ebc:	781b      	ldrb	r3, [r3, #0]
 8005ebe:	2b01      	cmp	r3, #1
 8005ec0:	f240 8111 	bls.w	80060e6 <processedUartReceivedNewsOfZigbeeAndBLE+0x9e2>
					strcpy(g_pstrMACLast,pstrMAC);
 8005ec4:	f107 030c 	add.w	r3, r7, #12
 8005ec8:	4619      	mov	r1, r3
 8005eca:	4896      	ldr	r0, [pc, #600]	; (8006124 <processedUartReceivedNewsOfZigbeeAndBLE+0xa20>)
 8005ecc:	f000 fd27 	bl	800691e <strcpy>
					if(g_byEnpointCntMCU == g_byEnpointCntBLE)
 8005ed0:	4b95      	ldr	r3, [pc, #596]	; (8006128 <processedUartReceivedNewsOfZigbeeAndBLE+0xa24>)
 8005ed2:	781a      	ldrb	r2, [r3, #0]
 8005ed4:	4b95      	ldr	r3, [pc, #596]	; (800612c <processedUartReceivedNewsOfZigbeeAndBLE+0xa28>)
 8005ed6:	781b      	ldrb	r3, [r3, #0]
 8005ed8:	429a      	cmp	r2, r3
 8005eda:	f040 80a6 	bne.w	800602a <processedUartReceivedNewsOfZigbeeAndBLE+0x926>
						strcat(byDataPrint,g_pstrMACBle);
 8005ede:	f107 0320 	add.w	r3, r7, #32
 8005ee2:	4993      	ldr	r1, [pc, #588]	; (8006130 <processedUartReceivedNewsOfZigbeeAndBLE+0xa2c>)
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	f000 fd0b 	bl	8006900 <strcat>
						strcat(byDataPrint,",");
 8005eea:	f107 0320 	add.w	r3, r7, #32
 8005eee:	4618      	mov	r0, r3
 8005ef0:	f7fa f97a 	bl	80001e8 <strlen>
 8005ef4:	4603      	mov	r3, r0
 8005ef6:	461a      	mov	r2, r3
 8005ef8:	f107 0320 	add.w	r3, r7, #32
 8005efc:	4413      	add	r3, r2
 8005efe:	498d      	ldr	r1, [pc, #564]	; (8006134 <processedUartReceivedNewsOfZigbeeAndBLE+0xa30>)
 8005f00:	461a      	mov	r2, r3
 8005f02:	460b      	mov	r3, r1
 8005f04:	881b      	ldrh	r3, [r3, #0]
 8005f06:	8013      	strh	r3, [r2, #0]
						strcat(byDataPrint,pstrDeviceType);
 8005f08:	f107 0208 	add.w	r2, r7, #8
 8005f0c:	f107 0320 	add.w	r3, r7, #32
 8005f10:	4611      	mov	r1, r2
 8005f12:	4618      	mov	r0, r3
 8005f14:	f000 fcf4 	bl	8006900 <strcat>
						strcat(byDataPrint,",");
 8005f18:	f107 0320 	add.w	r3, r7, #32
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	f7fa f963 	bl	80001e8 <strlen>
 8005f22:	4603      	mov	r3, r0
 8005f24:	461a      	mov	r2, r3
 8005f26:	f107 0320 	add.w	r3, r7, #32
 8005f2a:	4413      	add	r3, r2
 8005f2c:	4981      	ldr	r1, [pc, #516]	; (8006134 <processedUartReceivedNewsOfZigbeeAndBLE+0xa30>)
 8005f2e:	461a      	mov	r2, r3
 8005f30:	460b      	mov	r3, r1
 8005f32:	881b      	ldrh	r3, [r3, #0]
 8005f34:	8013      	strh	r3, [r2, #0]
						strcat(byDataPrint,pStrPID);
 8005f36:	f107 0320 	add.w	r3, r7, #32
 8005f3a:	4976      	ldr	r1, [pc, #472]	; (8006114 <processedUartReceivedNewsOfZigbeeAndBLE+0xa10>)
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	f000 fcdf 	bl	8006900 <strcat>
						strcat(byDataPrint,",");
 8005f42:	f107 0320 	add.w	r3, r7, #32
 8005f46:	4618      	mov	r0, r3
 8005f48:	f7fa f94e 	bl	80001e8 <strlen>
 8005f4c:	4603      	mov	r3, r0
 8005f4e:	461a      	mov	r2, r3
 8005f50:	f107 0320 	add.w	r3, r7, #32
 8005f54:	4413      	add	r3, r2
 8005f56:	4977      	ldr	r1, [pc, #476]	; (8006134 <processedUartReceivedNewsOfZigbeeAndBLE+0xa30>)
 8005f58:	461a      	mov	r2, r3
 8005f5a:	460b      	mov	r3, r1
 8005f5c:	881b      	ldrh	r3, [r3, #0]
 8005f5e:	8013      	strh	r3, [r2, #0]
						strcat(byDataPrint,g_pstrVersionBluetooth);
 8005f60:	f107 0320 	add.w	r3, r7, #32
 8005f64:	4969      	ldr	r1, [pc, #420]	; (800610c <processedUartReceivedNewsOfZigbeeAndBLE+0xa08>)
 8005f66:	4618      	mov	r0, r3
 8005f68:	f000 fcca 	bl	8006900 <strcat>
						generateQRCode(0,25,byDataPrint,strlen(byDataPrint));
 8005f6c:	f107 0320 	add.w	r3, r7, #32
 8005f70:	4618      	mov	r0, r3
 8005f72:	f7fa f939 	bl	80001e8 <strlen>
 8005f76:	4603      	mov	r3, r0
 8005f78:	b2db      	uxtb	r3, r3
 8005f7a:	f107 0220 	add.w	r2, r7, #32
 8005f7e:	2119      	movs	r1, #25
 8005f80:	2000      	movs	r0, #0
 8005f82:	f7fe fef6 	bl	8004d72 <generateQRCode>
						LCD_ClearCursor(0, 155, 240, 320, WHITE);
 8005f86:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005f8a:	9300      	str	r3, [sp, #0]
 8005f8c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8005f90:	22f0      	movs	r2, #240	; 0xf0
 8005f92:	219b      	movs	r1, #155	; 0x9b
 8005f94:	2000      	movs	r0, #0
 8005f96:	f7fb fd63 	bl	8001a60 <LCD_ClearCursor>
						printMACLcd(g_pstrMACBle,10,155,16);
 8005f9a:	2310      	movs	r3, #16
 8005f9c:	229b      	movs	r2, #155	; 0x9b
 8005f9e:	210a      	movs	r1, #10
 8005fa0:	4863      	ldr	r0, [pc, #396]	; (8006130 <processedUartReceivedNewsOfZigbeeAndBLE+0xa2c>)
 8005fa2:	f000 f939 	bl	8006218 <printMACLcd>
						printEndPointCnt(g_byEnpointCntMCU, 10, 175, 16,MCU);
 8005fa6:	4b60      	ldr	r3, [pc, #384]	; (8006128 <processedUartReceivedNewsOfZigbeeAndBLE+0xa24>)
 8005fa8:	7818      	ldrb	r0, [r3, #0]
 8005faa:	2302      	movs	r3, #2
 8005fac:	9300      	str	r3, [sp, #0]
 8005fae:	2310      	movs	r3, #16
 8005fb0:	22af      	movs	r2, #175	; 0xaf
 8005fb2:	210a      	movs	r1, #10
 8005fb4:	f000 f9aa 	bl	800630c <printEndPointCnt>
						LCD_DrawLine(10,195,230,195);
 8005fb8:	23c3      	movs	r3, #195	; 0xc3
 8005fba:	22e6      	movs	r2, #230	; 0xe6
 8005fbc:	21c3      	movs	r1, #195	; 0xc3
 8005fbe:	200a      	movs	r0, #10
 8005fc0:	f7fa fef8 	bl	8000db4 <LCD_DrawLine>
						printVersion(g_pstrVersionBluetooth, 10, 195, 16,BLUETOOTH);
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	9300      	str	r3, [sp, #0]
 8005fc8:	2310      	movs	r3, #16
 8005fca:	22c3      	movs	r2, #195	; 0xc3
 8005fcc:	210a      	movs	r1, #10
 8005fce:	484f      	ldr	r0, [pc, #316]	; (800610c <processedUartReceivedNewsOfZigbeeAndBLE+0xa08>)
 8005fd0:	f000 fa3c 	bl	800644c <printVersion>
						printProductID(pStrPID, 10 ,215 ,16);
 8005fd4:	2310      	movs	r3, #16
 8005fd6:	22d7      	movs	r2, #215	; 0xd7
 8005fd8:	210a      	movs	r1, #10
 8005fda:	484e      	ldr	r0, [pc, #312]	; (8006114 <processedUartReceivedNewsOfZigbeeAndBLE+0xa10>)
 8005fdc:	f000 fb3c 	bl	8006658 <printProductID>
						LCD_DrawLine(10,235,230,235);
 8005fe0:	23eb      	movs	r3, #235	; 0xeb
 8005fe2:	22e6      	movs	r2, #230	; 0xe6
 8005fe4:	21eb      	movs	r1, #235	; 0xeb
 8005fe6:	200a      	movs	r0, #10
 8005fe8:	f7fa fee4 	bl	8000db4 <LCD_DrawLine>
						printVersion(g_pstrVersionMCU, 10, 235, 16, MCU);
 8005fec:	2302      	movs	r3, #2
 8005fee:	9300      	str	r3, [sp, #0]
 8005ff0:	2310      	movs	r3, #16
 8005ff2:	22eb      	movs	r2, #235	; 0xeb
 8005ff4:	210a      	movs	r1, #10
 8005ff6:	4850      	ldr	r0, [pc, #320]	; (8006138 <processedUartReceivedNewsOfZigbeeAndBLE+0xa34>)
 8005ff8:	f000 fa28 	bl	800644c <printVersion>
						printTypeMCU(g_byTypeMCU, 10, 255, 16);
 8005ffc:	4b4f      	ldr	r3, [pc, #316]	; (800613c <processedUartReceivedNewsOfZigbeeAndBLE+0xa38>)
 8005ffe:	7818      	ldrb	r0, [r3, #0]
 8006000:	2310      	movs	r3, #16
 8006002:	22ff      	movs	r2, #255	; 0xff
 8006004:	210a      	movs	r1, #10
 8006006:	f000 fb85 	bl	8006714 <printTypeMCU>
						byFlagOfBufReset = 0;
 800600a:	4b4d      	ldr	r3, [pc, #308]	; (8006140 <processedUartReceivedNewsOfZigbeeAndBLE+0xa3c>)
 800600c:	2200      	movs	r2, #0
 800600e:	701a      	strb	r2, [r3, #0]
						byCountTemp = 0;
 8006010:	4b3b      	ldr	r3, [pc, #236]	; (8006100 <processedUartReceivedNewsOfZigbeeAndBLE+0x9fc>)
 8006012:	2200      	movs	r2, #0
 8006014:	701a      	strb	r2, [r3, #0]
						g_byEnpointCntMCU = 0;
 8006016:	4b44      	ldr	r3, [pc, #272]	; (8006128 <processedUartReceivedNewsOfZigbeeAndBLE+0xa24>)
 8006018:	2200      	movs	r2, #0
 800601a:	701a      	strb	r2, [r3, #0]
						g_byEnpointCntBLE = 0;
 800601c:	4b43      	ldr	r3, [pc, #268]	; (800612c <processedUartReceivedNewsOfZigbeeAndBLE+0xa28>)
 800601e:	2200      	movs	r2, #0
 8006020:	701a      	strb	r2, [r3, #0]
						g_byEnpointCntZigBee = 0;
 8006022:	4b48      	ldr	r3, [pc, #288]	; (8006144 <processedUartReceivedNewsOfZigbeeAndBLE+0xa40>)
 8006024:	2200      	movs	r2, #0
 8006026:	701a      	strb	r2, [r3, #0]
				break;
 8006028:	e05d      	b.n	80060e6 <processedUartReceivedNewsOfZigbeeAndBLE+0x9e2>
							if(byCountTemp == 0)
 800602a:	4b35      	ldr	r3, [pc, #212]	; (8006100 <processedUartReceivedNewsOfZigbeeAndBLE+0x9fc>)
 800602c:	781b      	ldrb	r3, [r3, #0]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d10e      	bne.n	8006050 <processedUartReceivedNewsOfZigbeeAndBLE+0x94c>
								memset(g_pstrMACLast,0,sizeof(g_pstrMACLast));
 8006032:	2211      	movs	r2, #17
 8006034:	2100      	movs	r1, #0
 8006036:	483b      	ldr	r0, [pc, #236]	; (8006124 <processedUartReceivedNewsOfZigbeeAndBLE+0xa20>)
 8006038:	f000 fc5a 	bl	80068f0 <memset>
								byStatusTemp =0;
 800603c:	4b38      	ldr	r3, [pc, #224]	; (8006120 <processedUartReceivedNewsOfZigbeeAndBLE+0xa1c>)
 800603e:	2200      	movs	r2, #0
 8006040:	701a      	strb	r2, [r3, #0]
								byCountTemp ++;
 8006042:	4b2f      	ldr	r3, [pc, #188]	; (8006100 <processedUartReceivedNewsOfZigbeeAndBLE+0x9fc>)
 8006044:	781b      	ldrb	r3, [r3, #0]
 8006046:	3301      	adds	r3, #1
 8006048:	b2da      	uxtb	r2, r3
 800604a:	4b2d      	ldr	r3, [pc, #180]	; (8006100 <processedUartReceivedNewsOfZigbeeAndBLE+0x9fc>)
 800604c:	701a      	strb	r2, [r3, #0]
				break;
 800604e:	e04a      	b.n	80060e6 <processedUartReceivedNewsOfZigbeeAndBLE+0x9e2>
							}else if(byCountTemp>=1)
 8006050:	4b2b      	ldr	r3, [pc, #172]	; (8006100 <processedUartReceivedNewsOfZigbeeAndBLE+0x9fc>)
 8006052:	781b      	ldrb	r3, [r3, #0]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d046      	beq.n	80060e6 <processedUartReceivedNewsOfZigbeeAndBLE+0x9e2>
								LCD_ClearCursor(0, 25, 240, 320, WHITE);
 8006058:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800605c:	9300      	str	r3, [sp, #0]
 800605e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8006062:	22f0      	movs	r2, #240	; 0xf0
 8006064:	2119      	movs	r1, #25
 8006066:	2000      	movs	r0, #0
 8006068:	f7fb fcfa 	bl	8001a60 <LCD_ClearCursor>
								Gui_StrCenter(0,100,RED, WHITE, (u8 *)"Firmware ZigBee ERROR!!!", 16, 0);
 800606c:	2300      	movs	r3, #0
 800606e:	9302      	str	r3, [sp, #8]
 8006070:	2310      	movs	r3, #16
 8006072:	9301      	str	r3, [sp, #4]
 8006074:	4b34      	ldr	r3, [pc, #208]	; (8006148 <processedUartReceivedNewsOfZigbeeAndBLE+0xa44>)
 8006076:	9300      	str	r3, [sp, #0]
 8006078:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800607c:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8006080:	2164      	movs	r1, #100	; 0x64
 8006082:	2000      	movs	r0, #0
 8006084:	f7fb fb82 	bl	800178c <Gui_StrCenter>
								printMACLcd(g_pstrMACZigbee,10,120,16);
 8006088:	2310      	movs	r3, #16
 800608a:	2278      	movs	r2, #120	; 0x78
 800608c:	210a      	movs	r1, #10
 800608e:	481e      	ldr	r0, [pc, #120]	; (8006108 <processedUartReceivedNewsOfZigbeeAndBLE+0xa04>)
 8006090:	f000 f8c2 	bl	8006218 <printMACLcd>
								printEndPointCnt(g_byEnpointCntBLE, 10, 160, 16,BLUETOOTH);
 8006094:	4b25      	ldr	r3, [pc, #148]	; (800612c <processedUartReceivedNewsOfZigbeeAndBLE+0xa28>)
 8006096:	7818      	ldrb	r0, [r3, #0]
 8006098:	2300      	movs	r3, #0
 800609a:	9300      	str	r3, [sp, #0]
 800609c:	2310      	movs	r3, #16
 800609e:	22a0      	movs	r2, #160	; 0xa0
 80060a0:	210a      	movs	r1, #10
 80060a2:	f000 f933 	bl	800630c <printEndPointCnt>
								memset(g_pstrVersionBluetooth,0,sizeof(g_pstrVersionBluetooth));
 80060a6:	2207      	movs	r2, #7
 80060a8:	2100      	movs	r1, #0
 80060aa:	4818      	ldr	r0, [pc, #96]	; (800610c <processedUartReceivedNewsOfZigbeeAndBLE+0xa08>)
 80060ac:	f000 fc20 	bl	80068f0 <memset>
								memset(g_pstrVersionZigBee,0,sizeof(g_pstrVersionZigBee));
 80060b0:	2207      	movs	r2, #7
 80060b2:	2100      	movs	r1, #0
 80060b4:	4816      	ldr	r0, [pc, #88]	; (8006110 <processedUartReceivedNewsOfZigbeeAndBLE+0xa0c>)
 80060b6:	f000 fc1b 	bl	80068f0 <memset>
								memset(pStrPID,0,sizeof(pStrPID));
 80060ba:	2205      	movs	r2, #5
 80060bc:	2100      	movs	r1, #0
 80060be:	4815      	ldr	r0, [pc, #84]	; (8006114 <processedUartReceivedNewsOfZigbeeAndBLE+0xa10>)
 80060c0:	f000 fc16 	bl	80068f0 <memset>
								memset(pstrDeviceType,0,sizeof(pstrDeviceType));
 80060c4:	f107 0308 	add.w	r3, r7, #8
 80060c8:	2203      	movs	r2, #3
 80060ca:	2100      	movs	r1, #0
 80060cc:	4618      	mov	r0, r3
 80060ce:	f000 fc0f 	bl	80068f0 <memset>
								byCountTemp = 0;
 80060d2:	4b0b      	ldr	r3, [pc, #44]	; (8006100 <processedUartReceivedNewsOfZigbeeAndBLE+0x9fc>)
 80060d4:	2200      	movs	r2, #0
 80060d6:	701a      	strb	r2, [r3, #0]
				break;
 80060d8:	e005      	b.n	80060e6 <processedUartReceivedNewsOfZigbeeAndBLE+0x9e2>
				break;
 80060da:	bf00      	nop
 80060dc:	e004      	b.n	80060e8 <processedUartReceivedNewsOfZigbeeAndBLE+0x9e4>
				break;
 80060de:	bf00      	nop
 80060e0:	e002      	b.n	80060e8 <processedUartReceivedNewsOfZigbeeAndBLE+0x9e4>
				break;
 80060e2:	bf00      	nop
 80060e4:	e000      	b.n	80060e8 <processedUartReceivedNewsOfZigbeeAndBLE+0x9e4>
				break;
 80060e6:	bf00      	nop
			}

	if(byStatusTemp >=2)
 80060e8:	4b0d      	ldr	r3, [pc, #52]	; (8006120 <processedUartReceivedNewsOfZigbeeAndBLE+0xa1c>)
 80060ea:	781b      	ldrb	r3, [r3, #0]
 80060ec:	2b01      	cmp	r3, #1
 80060ee:	d902      	bls.n	80060f6 <processedUartReceivedNewsOfZigbeeAndBLE+0x9f2>
	{
		byStatusTemp =0;
 80060f0:	4b0b      	ldr	r3, [pc, #44]	; (8006120 <processedUartReceivedNewsOfZigbeeAndBLE+0xa1c>)
 80060f2:	2200      	movs	r2, #0
 80060f4:	701a      	strb	r2, [r3, #0]
	}
}
 80060f6:	bf00      	nop
 80060f8:	3748      	adds	r7, #72	; 0x48
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bd80      	pop	{r7, pc}
 80060fe:	bf00      	nop
 8006100:	2000051e 	.word	0x2000051e
 8006104:	08006980 	.word	0x08006980
 8006108:	200004ac 	.word	0x200004ac
 800610c:	200004e8 	.word	0x200004e8
 8006110:	200004f0 	.word	0x200004f0
 8006114:	20000518 	.word	0x20000518
 8006118:	200004d8 	.word	0x200004d8
 800611c:	200004c4 	.word	0x200004c4
 8006120:	20000502 	.word	0x20000502
 8006124:	200004d4 	.word	0x200004d4
 8006128:	200004a9 	.word	0x200004a9
 800612c:	200004aa 	.word	0x200004aa
 8006130:	200004c0 	.word	0x200004c0
 8006134:	08006948 	.word	0x08006948
 8006138:	200004f8 	.word	0x200004f8
 800613c:	200004ff 	.word	0x200004ff
 8006140:	2000051d 	.word	0x2000051d
 8006144:	200004ab 	.word	0x200004ab
 8006148:	08006964 	.word	0x08006964

0800614c <procUartCmd>:
 * @brief  Xu ly truong CMD_ID cua thiet bi
 * @param  void *arg
 * @retval None
 */
static void procUartCmd(void *arg)
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b084      	sub	sp, #16
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]

	CmdData_t *CmdData = (CmdData_t*)arg;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	60fb      	str	r3, [r7, #12]
	McuInfor_t * McuInfor = (McuInfor_t*)arg;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	60bb      	str	r3, [r7, #8]
	switch(CmdData->byCmdId)
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	781b      	ldrb	r3, [r3, #0]
 8006160:	2bab      	cmp	r3, #171	; 0xab
 8006162:	d005      	beq.n	8006170 <procUartCmd+0x24>
 8006164:	2bff      	cmp	r3, #255	; 0xff
 8006166:	d107      	bne.n	8006178 <procUartCmd+0x2c>
	{
	case CMD_ID_ZIGBEE_AND_BLE:
		processedUartReceivedNewsOfZigbeeAndBLE(CmdData);
 8006168:	68f8      	ldr	r0, [r7, #12]
 800616a:	f7ff facb 	bl	8005704 <processedUartReceivedNewsOfZigbeeAndBLE>
		break;
 800616e:	e004      	b.n	800617a <procUartCmd+0x2e>
	case CMD_ID_MCU_TOUCH:
		processedUartReceivedNewsOfTouch(McuInfor);
 8006170:	68b8      	ldr	r0, [r7, #8]
 8006172:	f7ff faa9 	bl	80056c8 <processedUartReceivedNewsOfTouch>
		break;
 8006176:	e000      	b.n	800617a <procUartCmd+0x2e>
	default:
		break;
 8006178:	bf00      	nop
	}

}
 800617a:	bf00      	nop
 800617c:	3710      	adds	r7, #16
 800617e:	46bd      	mov	sp, r7
 8006180:	bd80      	pop	{r7, pc}
	...

08006184 <hexToAscii>:
static void hexToAscii(char *pByDataOutPut,uint8_t *pByDataInPut,uint8_t byDataLength)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b086      	sub	sp, #24
 8006188:	af00      	add	r7, sp, #0
 800618a:	60f8      	str	r0, [r7, #12]
 800618c:	60b9      	str	r1, [r7, #8]
 800618e:	4613      	mov	r3, r2
 8006190:	71fb      	strb	r3, [r7, #7]
	uint8_t byMsb,byLsb;
	memset(pByDataOutPut,0,byDataLength);
 8006192:	79fb      	ldrb	r3, [r7, #7]
 8006194:	461a      	mov	r2, r3
 8006196:	2100      	movs	r1, #0
 8006198:	68f8      	ldr	r0, [r7, #12]
 800619a:	f000 fba9 	bl	80068f0 <memset>
	static char str[2]={0};
	for(uint8_t i = 0; i<byDataLength; i++)
 800619e:	2300      	movs	r3, #0
 80061a0:	757b      	strb	r3, [r7, #21]
 80061a2:	e02d      	b.n	8006200 <hexToAscii+0x7c>
	{
		byMsb = (pByDataInPut[i]>>4);
 80061a4:	7d7b      	ldrb	r3, [r7, #21]
 80061a6:	68ba      	ldr	r2, [r7, #8]
 80061a8:	4413      	add	r3, r2
 80061aa:	781b      	ldrb	r3, [r3, #0]
 80061ac:	091b      	lsrs	r3, r3, #4
 80061ae:	75fb      	strb	r3, [r7, #23]
		byLsb = pByDataInPut[i] & 0x0F;
 80061b0:	7d7b      	ldrb	r3, [r7, #21]
 80061b2:	68ba      	ldr	r2, [r7, #8]
 80061b4:	4413      	add	r3, r2
 80061b6:	781b      	ldrb	r3, [r3, #0]
 80061b8:	f003 030f 	and.w	r3, r3, #15
 80061bc:	75bb      	strb	r3, [r7, #22]
		if((byMsb>=0)&&(byMsb<=9))
 80061be:	7dfb      	ldrb	r3, [r7, #23]
 80061c0:	2b09      	cmp	r3, #9
 80061c2:	d803      	bhi.n	80061cc <hexToAscii+0x48>
		{
			byMsb += 48;
 80061c4:	7dfb      	ldrb	r3, [r7, #23]
 80061c6:	3330      	adds	r3, #48	; 0x30
 80061c8:	75fb      	strb	r3, [r7, #23]
 80061ca:	e002      	b.n	80061d2 <hexToAscii+0x4e>
		}else
		{
			byMsb += 55;
 80061cc:	7dfb      	ldrb	r3, [r7, #23]
 80061ce:	3337      	adds	r3, #55	; 0x37
 80061d0:	75fb      	strb	r3, [r7, #23]
		}
		if((byLsb>=0)&&(byLsb<=9))
 80061d2:	7dbb      	ldrb	r3, [r7, #22]
 80061d4:	2b09      	cmp	r3, #9
 80061d6:	d803      	bhi.n	80061e0 <hexToAscii+0x5c>
		{
			byLsb += 48;
 80061d8:	7dbb      	ldrb	r3, [r7, #22]
 80061da:	3330      	adds	r3, #48	; 0x30
 80061dc:	75bb      	strb	r3, [r7, #22]
 80061de:	e002      	b.n	80061e6 <hexToAscii+0x62>
		}else
		{
			byLsb += 55;
 80061e0:	7dbb      	ldrb	r3, [r7, #22]
 80061e2:	3337      	adds	r3, #55	; 0x37
 80061e4:	75bb      	strb	r3, [r7, #22]
		}
		str[0] = (char)byMsb;
 80061e6:	4a0b      	ldr	r2, [pc, #44]	; (8006214 <hexToAscii+0x90>)
 80061e8:	7dfb      	ldrb	r3, [r7, #23]
 80061ea:	7013      	strb	r3, [r2, #0]
		str[1] = (char)byLsb;
 80061ec:	4a09      	ldr	r2, [pc, #36]	; (8006214 <hexToAscii+0x90>)
 80061ee:	7dbb      	ldrb	r3, [r7, #22]
 80061f0:	7053      	strb	r3, [r2, #1]
		strcat(pByDataOutPut,str);
 80061f2:	4908      	ldr	r1, [pc, #32]	; (8006214 <hexToAscii+0x90>)
 80061f4:	68f8      	ldr	r0, [r7, #12]
 80061f6:	f000 fb83 	bl	8006900 <strcat>
	for(uint8_t i = 0; i<byDataLength; i++)
 80061fa:	7d7b      	ldrb	r3, [r7, #21]
 80061fc:	3301      	adds	r3, #1
 80061fe:	757b      	strb	r3, [r7, #21]
 8006200:	7d7a      	ldrb	r2, [r7, #21]
 8006202:	79fb      	ldrb	r3, [r7, #7]
 8006204:	429a      	cmp	r2, r3
 8006206:	d3cd      	bcc.n	80061a4 <hexToAscii+0x20>
	}
}
 8006208:	bf00      	nop
 800620a:	bf00      	nop
 800620c:	3718      	adds	r7, #24
 800620e:	46bd      	mov	sp, r7
 8006210:	bd80      	pop	{r7, pc}
 8006212:	bf00      	nop
 8006214:	20000520 	.word	0x20000520

08006218 <printMACLcd>:
 * @brief  In ra man hinh MAC cua thiet bi theo form XX:XX:XX:XX
 * @param
 * @retval None
 */
void printMACLcd(char *pTextMAC,u16 x,u16 y,uint8_t bySize)
{
 8006218:	b590      	push	{r4, r7, lr}
 800621a:	b095      	sub	sp, #84	; 0x54
 800621c:	af04      	add	r7, sp, #16
 800621e:	60f8      	str	r0, [r7, #12]
 8006220:	4608      	mov	r0, r1
 8006222:	4611      	mov	r1, r2
 8006224:	461a      	mov	r2, r3
 8006226:	4603      	mov	r3, r0
 8006228:	817b      	strh	r3, [r7, #10]
 800622a:	460b      	mov	r3, r1
 800622c:	813b      	strh	r3, [r7, #8]
 800622e:	4613      	mov	r3, r2
 8006230:	71fb      	strb	r3, [r7, #7]

	char strTemp[28];

	char strTemp2[] = ":";
 8006232:	233a      	movs	r3, #58	; 0x3a
 8006234:	83bb      	strh	r3, [r7, #28]

	char strTemp3[] = "MAC ";
 8006236:	4a34      	ldr	r2, [pc, #208]	; (8006308 <printMACLcd+0xf0>)
 8006238:	f107 0314 	add.w	r3, r7, #20
 800623c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006240:	6018      	str	r0, [r3, #0]
 8006242:	3304      	adds	r3, #4
 8006244:	7019      	strb	r1, [r3, #0]

	//Show_Str(x+20,y,BLACK,WHITE,(u8*)strTemp3,bySize,1);

	memset(strTemp,0,sizeof(strTemp));
 8006246:	f107 0320 	add.w	r3, r7, #32
 800624a:	221c      	movs	r2, #28
 800624c:	2100      	movs	r1, #0
 800624e:	4618      	mov	r0, r3
 8006250:	f000 fb4e 	bl	80068f0 <memset>

	strcpy(strTemp,strTemp3);
 8006254:	f107 0214 	add.w	r2, r7, #20
 8006258:	f107 0320 	add.w	r3, r7, #32
 800625c:	4611      	mov	r1, r2
 800625e:	4618      	mov	r0, r3
 8006260:	f000 fb5d 	bl	800691e <strcpy>

	uint8_t j = 4;
 8006264:	2304      	movs	r3, #4
 8006266:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t i = 0;
 800626a:	2300      	movs	r3, #0
 800626c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	for(i = 0; i<strlen(pTextMAC); i++)
 8006270:	2300      	movs	r3, #0
 8006272:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8006276:	e02c      	b.n	80062d2 <printMACLcd+0xba>
	{
			if((i%2 == 0)&&(i !=0))
 8006278:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800627c:	f003 0301 	and.w	r3, r3, #1
 8006280:	b2db      	uxtb	r3, r3
 8006282:	2b00      	cmp	r3, #0
 8006284:	d110      	bne.n	80062a8 <printMACLcd+0x90>
 8006286:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800628a:	2b00      	cmp	r3, #0
 800628c:	d00c      	beq.n	80062a8 <printMACLcd+0x90>
			{
				j++;
 800628e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006292:	3301      	adds	r3, #1
 8006294:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				strcat(strTemp,strTemp2);
 8006298:	f107 021c 	add.w	r2, r7, #28
 800629c:	f107 0320 	add.w	r3, r7, #32
 80062a0:	4611      	mov	r1, r2
 80062a2:	4618      	mov	r0, r3
 80062a4:	f000 fb2c 	bl	8006900 <strcat>
			}
			strTemp[j] = pTextMAC[i];
 80062a8:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80062ac:	68fa      	ldr	r2, [r7, #12]
 80062ae:	441a      	add	r2, r3
 80062b0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80062b4:	7812      	ldrb	r2, [r2, #0]
 80062b6:	3340      	adds	r3, #64	; 0x40
 80062b8:	443b      	add	r3, r7
 80062ba:	f803 2c20 	strb.w	r2, [r3, #-32]
			j++;
 80062be:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80062c2:	3301      	adds	r3, #1
 80062c4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	for(i = 0; i<strlen(pTextMAC); i++)
 80062c8:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80062cc:	3301      	adds	r3, #1
 80062ce:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 80062d2:	f897 403e 	ldrb.w	r4, [r7, #62]	; 0x3e
 80062d6:	68f8      	ldr	r0, [r7, #12]
 80062d8:	f7f9 ff86 	bl	80001e8 <strlen>
 80062dc:	4603      	mov	r3, r0
 80062de:	429c      	cmp	r4, r3
 80062e0:	d3ca      	bcc.n	8006278 <printMACLcd+0x60>
	}
	Show_Str(x,y,BLACK,WHITE,(u8*)strTemp,bySize,1);
 80062e2:	8939      	ldrh	r1, [r7, #8]
 80062e4:	8978      	ldrh	r0, [r7, #10]
 80062e6:	2301      	movs	r3, #1
 80062e8:	9302      	str	r3, [sp, #8]
 80062ea:	79fb      	ldrb	r3, [r7, #7]
 80062ec:	9301      	str	r3, [sp, #4]
 80062ee:	f107 0320 	add.w	r3, r7, #32
 80062f2:	9300      	str	r3, [sp, #0]
 80062f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80062f8:	2200      	movs	r2, #0
 80062fa:	f7fb f975 	bl	80015e8 <Show_Str>
}
 80062fe:	bf00      	nop
 8006300:	3744      	adds	r7, #68	; 0x44
 8006302:	46bd      	mov	sp, r7
 8006304:	bd90      	pop	{r4, r7, pc}
 8006306:	bf00      	nop
 8006308:	08006998 	.word	0x08006998

0800630c <printEndPointCnt>:
 * @brief  In ra man hinh EndPointCnt cua thiet bi theo form
 * @param
 * @retval None
 */
void printEndPointCnt(u8 pTextEpc,u16 x,u16 y,uint8_t bySize, InforType_e type)
{
 800630c:	b590      	push	{r4, r7, lr}
 800630e:	b09b      	sub	sp, #108	; 0x6c
 8006310:	af04      	add	r7, sp, #16
 8006312:	4604      	mov	r4, r0
 8006314:	4608      	mov	r0, r1
 8006316:	4611      	mov	r1, r2
 8006318:	461a      	mov	r2, r3
 800631a:	4623      	mov	r3, r4
 800631c:	71fb      	strb	r3, [r7, #7]
 800631e:	4603      	mov	r3, r0
 8006320:	80bb      	strh	r3, [r7, #4]
 8006322:	460b      	mov	r3, r1
 8006324:	807b      	strh	r3, [r7, #2]
 8006326:	4613      	mov	r3, r2
 8006328:	71bb      	strb	r3, [r7, #6]

	char strTemp1[20];
	char strTemp2[3] = {0};
 800632a:	4b44      	ldr	r3, [pc, #272]	; (800643c <printEndPointCnt+0x130>)
 800632c:	881b      	ldrh	r3, [r3, #0]
 800632e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8006330:	2300      	movs	r3, #0
 8006332:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	char strTemp3[] = "Button     :";
 8006336:	4b42      	ldr	r3, [pc, #264]	; (8006440 <printEndPointCnt+0x134>)
 8006338:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 800633c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800633e:	c407      	stmia	r4!, {r0, r1, r2}
 8006340:	7023      	strb	r3, [r4, #0]
	char strTemp4[] = "Button Zgb :";
 8006342:	4b40      	ldr	r3, [pc, #256]	; (8006444 <printEndPointCnt+0x138>)
 8006344:	f107 041c 	add.w	r4, r7, #28
 8006348:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800634a:	c407      	stmia	r4!, {r0, r1, r2}
 800634c:	7023      	strb	r3, [r4, #0]
	char strTemp5[] = "Button BLE :";
 800634e:	4b3e      	ldr	r3, [pc, #248]	; (8006448 <printEndPointCnt+0x13c>)
 8006350:	f107 040c 	add.w	r4, r7, #12
 8006354:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006356:	c407      	stmia	r4!, {r0, r1, r2}
 8006358:	7023      	strb	r3, [r4, #0]
	hexToAscii(strTemp2, &pTextEpc, 1);
 800635a:	1df9      	adds	r1, r7, #7
 800635c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006360:	2201      	movs	r2, #1
 8006362:	4618      	mov	r0, r3
 8006364:	f7ff ff0e 	bl	8006184 <hexToAscii>

	memset(strTemp1,0,sizeof(strTemp1));
 8006368:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800636c:	2214      	movs	r2, #20
 800636e:	2100      	movs	r1, #0
 8006370:	4618      	mov	r0, r3
 8006372:	f000 fabd 	bl	80068f0 <memset>
	switch(type)
 8006376:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 800637a:	2b02      	cmp	r3, #2
 800637c:	d018      	beq.n	80063b0 <printEndPointCnt+0xa4>
 800637e:	2b02      	cmp	r3, #2
 8006380:	dc1f      	bgt.n	80063c2 <printEndPointCnt+0xb6>
 8006382:	2b00      	cmp	r3, #0
 8006384:	d002      	beq.n	800638c <printEndPointCnt+0x80>
 8006386:	2b01      	cmp	r3, #1
 8006388:	d009      	beq.n	800639e <printEndPointCnt+0x92>
		break;
	case MCU:
		strcpy(strTemp1,strTemp3);
		break;
	default:
		break;
 800638a:	e01a      	b.n	80063c2 <printEndPointCnt+0xb6>
		strcpy(strTemp1,strTemp5);
 800638c:	f107 020c 	add.w	r2, r7, #12
 8006390:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006394:	4611      	mov	r1, r2
 8006396:	4618      	mov	r0, r3
 8006398:	f000 fac1 	bl	800691e <strcpy>
		break;
 800639c:	e012      	b.n	80063c4 <printEndPointCnt+0xb8>
		strcpy(strTemp1,strTemp4);
 800639e:	f107 021c 	add.w	r2, r7, #28
 80063a2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80063a6:	4611      	mov	r1, r2
 80063a8:	4618      	mov	r0, r3
 80063aa:	f000 fab8 	bl	800691e <strcpy>
		break;
 80063ae:	e009      	b.n	80063c4 <printEndPointCnt+0xb8>
		strcpy(strTemp1,strTemp3);
 80063b0:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80063b4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80063b8:	4611      	mov	r1, r2
 80063ba:	4618      	mov	r0, r3
 80063bc:	f000 faaf 	bl	800691e <strcpy>
		break;
 80063c0:	e000      	b.n	80063c4 <printEndPointCnt+0xb8>
		break;
 80063c2:	bf00      	nop
	}


	uint8_t j = 12;
 80063c4:	230c      	movs	r3, #12
 80063c6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t i = 0;
 80063ca:	2300      	movs	r3, #0
 80063cc:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
	for(i = 0; i<strlen(strTemp2); i++)
 80063d0:	2300      	movs	r3, #0
 80063d2:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
 80063d6:	e015      	b.n	8006404 <printEndPointCnt+0xf8>
	{
			strTemp1[j] = strTemp2[i];
 80063d8:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 80063dc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80063e0:	3258      	adds	r2, #88	; 0x58
 80063e2:	443a      	add	r2, r7
 80063e4:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 80063e8:	3358      	adds	r3, #88	; 0x58
 80063ea:	443b      	add	r3, r7
 80063ec:	f803 2c18 	strb.w	r2, [r3, #-24]
			j++;
 80063f0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80063f4:	3301      	adds	r3, #1
 80063f6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	for(i = 0; i<strlen(strTemp2); i++)
 80063fa:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 80063fe:	3301      	adds	r3, #1
 8006400:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
 8006404:	f897 4056 	ldrb.w	r4, [r7, #86]	; 0x56
 8006408:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800640c:	4618      	mov	r0, r3
 800640e:	f7f9 feeb 	bl	80001e8 <strlen>
 8006412:	4603      	mov	r3, r0
 8006414:	429c      	cmp	r4, r3
 8006416:	d3df      	bcc.n	80063d8 <printEndPointCnt+0xcc>
	}
	Show_Str(x,y,BLACK,WHITE,(u8*)strTemp1,bySize,1);
 8006418:	8879      	ldrh	r1, [r7, #2]
 800641a:	88b8      	ldrh	r0, [r7, #4]
 800641c:	2301      	movs	r3, #1
 800641e:	9302      	str	r3, [sp, #8]
 8006420:	79bb      	ldrb	r3, [r7, #6]
 8006422:	9301      	str	r3, [sp, #4]
 8006424:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006428:	9300      	str	r3, [sp, #0]
 800642a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800642e:	2200      	movs	r2, #0
 8006430:	f7fb f8da 	bl	80015e8 <Show_Str>
}
 8006434:	bf00      	nop
 8006436:	375c      	adds	r7, #92	; 0x5c
 8006438:	46bd      	mov	sp, r7
 800643a:	bd90      	pop	{r4, r7, pc}
 800643c:	08006994 	.word	0x08006994
 8006440:	080069a0 	.word	0x080069a0
 8006444:	080069b0 	.word	0x080069b0
 8006448:	080069c0 	.word	0x080069c0

0800644c <printVersion>:
 * @brief  In ra man hinh Version cua thiet bi theo form
 * @param
 * @retval None
 */
void printVersion(char *pTextMAC,u16 x,u16 y,uint8_t bySize,InforType_e type)
{
 800644c:	b590      	push	{r4, r7, lr}
 800644e:	b09d      	sub	sp, #116	; 0x74
 8006450:	af04      	add	r7, sp, #16
 8006452:	60f8      	str	r0, [r7, #12]
 8006454:	4608      	mov	r0, r1
 8006456:	4611      	mov	r1, r2
 8006458:	461a      	mov	r2, r3
 800645a:	4603      	mov	r3, r0
 800645c:	817b      	strh	r3, [r7, #10]
 800645e:	460b      	mov	r3, r1
 8006460:	813b      	strh	r3, [r7, #8]
 8006462:	4613      	mov	r3, r2
 8006464:	71fb      	strb	r3, [r7, #7]

	char strTemp1[26];

	char strTemp2[] = ".";
 8006466:	232e      	movs	r3, #46	; 0x2e
 8006468:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

	char strTemp3[] = "Ver ZigBee :";
 800646c:	4b48      	ldr	r3, [pc, #288]	; (8006590 <printVersion+0x144>)
 800646e:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8006472:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006474:	c407      	stmia	r4!, {r0, r1, r2}
 8006476:	7023      	strb	r3, [r4, #0]

	char strTemp4[] = "Ver BLE    :";
 8006478:	4b46      	ldr	r3, [pc, #280]	; (8006594 <printVersion+0x148>)
 800647a:	f107 0420 	add.w	r4, r7, #32
 800647e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006480:	c407      	stmia	r4!, {r0, r1, r2}
 8006482:	7023      	strb	r3, [r4, #0]

	char strTemp5[] = "Ver MCU    :";
 8006484:	4b44      	ldr	r3, [pc, #272]	; (8006598 <printVersion+0x14c>)
 8006486:	f107 0410 	add.w	r4, r7, #16
 800648a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800648c:	c407      	stmia	r4!, {r0, r1, r2}
 800648e:	7023      	strb	r3, [r4, #0]

	//Show_Str(x+20,y,BLACK,WHITE,(u8*)strTemp3,bySize,1);

	memset(strTemp1,0,sizeof(strTemp1));
 8006490:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006494:	221a      	movs	r2, #26
 8006496:	2100      	movs	r1, #0
 8006498:	4618      	mov	r0, r3
 800649a:	f000 fa29 	bl	80068f0 <memset>

	switch(type)
 800649e:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 80064a2:	2b02      	cmp	r3, #2
 80064a4:	d018      	beq.n	80064d8 <printVersion+0x8c>
 80064a6:	2b02      	cmp	r3, #2
 80064a8:	dc1f      	bgt.n	80064ea <printVersion+0x9e>
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d002      	beq.n	80064b4 <printVersion+0x68>
 80064ae:	2b01      	cmp	r3, #1
 80064b0:	d009      	beq.n	80064c6 <printVersion+0x7a>
		break;
	case MCU:
		strcpy(strTemp1,strTemp5);
		break;
	default:
		break;
 80064b2:	e01a      	b.n	80064ea <printVersion+0x9e>
		strcpy(strTemp1,strTemp4);
 80064b4:	f107 0220 	add.w	r2, r7, #32
 80064b8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80064bc:	4611      	mov	r1, r2
 80064be:	4618      	mov	r0, r3
 80064c0:	f000 fa2d 	bl	800691e <strcpy>
		break;
 80064c4:	e012      	b.n	80064ec <printVersion+0xa0>
		strcpy(strTemp1,strTemp3);
 80064c6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80064ca:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80064ce:	4611      	mov	r1, r2
 80064d0:	4618      	mov	r0, r3
 80064d2:	f000 fa24 	bl	800691e <strcpy>
		break;
 80064d6:	e009      	b.n	80064ec <printVersion+0xa0>
		strcpy(strTemp1,strTemp5);
 80064d8:	f107 0210 	add.w	r2, r7, #16
 80064dc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80064e0:	4611      	mov	r1, r2
 80064e2:	4618      	mov	r0, r3
 80064e4:	f000 fa1b 	bl	800691e <strcpy>
		break;
 80064e8:	e000      	b.n	80064ec <printVersion+0xa0>
		break;
 80064ea:	bf00      	nop
	}


	uint8_t j = 12;
 80064ec:	230c      	movs	r3, #12
 80064ee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t i = 0;
 80064f2:	2300      	movs	r3, #0
 80064f4:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	for(i = 0; i<strlen(pTextMAC); i++)
 80064f8:	2300      	movs	r3, #0
 80064fa:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
 80064fe:	e02c      	b.n	800655a <printVersion+0x10e>
	{
		if((i%2 == 0)&&(i !=0))
 8006500:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8006504:	f003 0301 	and.w	r3, r3, #1
 8006508:	b2db      	uxtb	r3, r3
 800650a:	2b00      	cmp	r3, #0
 800650c:	d110      	bne.n	8006530 <printVersion+0xe4>
 800650e:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8006512:	2b00      	cmp	r3, #0
 8006514:	d00c      	beq.n	8006530 <printVersion+0xe4>
		{
			j++;
 8006516:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800651a:	3301      	adds	r3, #1
 800651c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			strcat(strTemp1,strTemp2);
 8006520:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8006524:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006528:	4611      	mov	r1, r2
 800652a:	4618      	mov	r0, r3
 800652c:	f000 f9e8 	bl	8006900 <strcat>
		}
			strTemp1[j] = pTextMAC[i];
 8006530:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8006534:	68fa      	ldr	r2, [r7, #12]
 8006536:	441a      	add	r2, r3
 8006538:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800653c:	7812      	ldrb	r2, [r2, #0]
 800653e:	3360      	adds	r3, #96	; 0x60
 8006540:	443b      	add	r3, r7
 8006542:	f803 2c1c 	strb.w	r2, [r3, #-28]
			j++;
 8006546:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800654a:	3301      	adds	r3, #1
 800654c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	for(i = 0; i<strlen(pTextMAC); i++)
 8006550:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8006554:	3301      	adds	r3, #1
 8006556:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
 800655a:	f897 405e 	ldrb.w	r4, [r7, #94]	; 0x5e
 800655e:	68f8      	ldr	r0, [r7, #12]
 8006560:	f7f9 fe42 	bl	80001e8 <strlen>
 8006564:	4603      	mov	r3, r0
 8006566:	429c      	cmp	r4, r3
 8006568:	d3ca      	bcc.n	8006500 <printVersion+0xb4>
	}
	Show_Str(x,y,BLACK,WHITE,(u8*)strTemp1,bySize,1);
 800656a:	8939      	ldrh	r1, [r7, #8]
 800656c:	8978      	ldrh	r0, [r7, #10]
 800656e:	2301      	movs	r3, #1
 8006570:	9302      	str	r3, [sp, #8]
 8006572:	79fb      	ldrb	r3, [r7, #7]
 8006574:	9301      	str	r3, [sp, #4]
 8006576:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800657a:	9300      	str	r3, [sp, #0]
 800657c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006580:	2200      	movs	r2, #0
 8006582:	f7fb f831 	bl	80015e8 <Show_Str>
}
 8006586:	bf00      	nop
 8006588:	3764      	adds	r7, #100	; 0x64
 800658a:	46bd      	mov	sp, r7
 800658c:	bd90      	pop	{r4, r7, pc}
 800658e:	bf00      	nop
 8006590:	080069d0 	.word	0x080069d0
 8006594:	080069e0 	.word	0x080069e0
 8006598:	080069f0 	.word	0x080069f0

0800659c <printModelId>:
 * @brief  In ra man hinh ModelId cua thiet bi theo form
 * @param
 * @retval None
 */
void printModelId(char *pText,u16 x,u16 y,uint8_t bySize)
{
 800659c:	b590      	push	{r4, r7, lr}
 800659e:	b095      	sub	sp, #84	; 0x54
 80065a0:	af04      	add	r7, sp, #16
 80065a2:	60f8      	str	r0, [r7, #12]
 80065a4:	4608      	mov	r0, r1
 80065a6:	4611      	mov	r1, r2
 80065a8:	461a      	mov	r2, r3
 80065aa:	4603      	mov	r3, r0
 80065ac:	817b      	strh	r3, [r7, #10]
 80065ae:	460b      	mov	r3, r1
 80065b0:	813b      	strh	r3, [r7, #8]
 80065b2:	4613      	mov	r3, r2
 80065b4:	71fb      	strb	r3, [r7, #7]

	char strTemp1[30];

	char strTemp2[] = "Model ID   :";
 80065b6:	4b27      	ldr	r3, [pc, #156]	; (8006654 <printModelId+0xb8>)
 80065b8:	f107 0410 	add.w	r4, r7, #16
 80065bc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80065be:	c407      	stmia	r4!, {r0, r1, r2}
 80065c0:	7023      	strb	r3, [r4, #0]

	memset(strTemp1,0,sizeof(strTemp1));
 80065c2:	f107 0320 	add.w	r3, r7, #32
 80065c6:	221e      	movs	r2, #30
 80065c8:	2100      	movs	r1, #0
 80065ca:	4618      	mov	r0, r3
 80065cc:	f000 f990 	bl	80068f0 <memset>

	strcpy(strTemp1,strTemp2);
 80065d0:	f107 0210 	add.w	r2, r7, #16
 80065d4:	f107 0320 	add.w	r3, r7, #32
 80065d8:	4611      	mov	r1, r2
 80065da:	4618      	mov	r0, r3
 80065dc:	f000 f99f 	bl	800691e <strcpy>

	uint8_t j = 12;
 80065e0:	230c      	movs	r3, #12
 80065e2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t i = 0;
 80065e6:	2300      	movs	r3, #0
 80065e8:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	for(i = 0; i<strlen(pText); i++)
 80065ec:	2300      	movs	r3, #0
 80065ee:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 80065f2:	e014      	b.n	800661e <printModelId+0x82>
	{
			strTemp1[j] = pText[i];
 80065f4:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80065f8:	68fa      	ldr	r2, [r7, #12]
 80065fa:	441a      	add	r2, r3
 80065fc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006600:	7812      	ldrb	r2, [r2, #0]
 8006602:	3340      	adds	r3, #64	; 0x40
 8006604:	443b      	add	r3, r7
 8006606:	f803 2c20 	strb.w	r2, [r3, #-32]
			j++;
 800660a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800660e:	3301      	adds	r3, #1
 8006610:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	for(i = 0; i<strlen(pText); i++)
 8006614:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8006618:	3301      	adds	r3, #1
 800661a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800661e:	f897 403e 	ldrb.w	r4, [r7, #62]	; 0x3e
 8006622:	68f8      	ldr	r0, [r7, #12]
 8006624:	f7f9 fde0 	bl	80001e8 <strlen>
 8006628:	4603      	mov	r3, r0
 800662a:	429c      	cmp	r4, r3
 800662c:	d3e2      	bcc.n	80065f4 <printModelId+0x58>
	}
	Show_Str(x,y,BLACK,WHITE,(u8*)strTemp1,bySize,1);
 800662e:	8939      	ldrh	r1, [r7, #8]
 8006630:	8978      	ldrh	r0, [r7, #10]
 8006632:	2301      	movs	r3, #1
 8006634:	9302      	str	r3, [sp, #8]
 8006636:	79fb      	ldrb	r3, [r7, #7]
 8006638:	9301      	str	r3, [sp, #4]
 800663a:	f107 0320 	add.w	r3, r7, #32
 800663e:	9300      	str	r3, [sp, #0]
 8006640:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006644:	2200      	movs	r2, #0
 8006646:	f7fa ffcf 	bl	80015e8 <Show_Str>
}
 800664a:	bf00      	nop
 800664c:	3744      	adds	r7, #68	; 0x44
 800664e:	46bd      	mov	sp, r7
 8006650:	bd90      	pop	{r4, r7, pc}
 8006652:	bf00      	nop
 8006654:	08006a00 	.word	0x08006a00

08006658 <printProductID>:
 * @brief  In ra man hinh ProductID cua thiet bi theo form
 * @param
 * @retval None
 */
void printProductID(char *pText,u16 x,u16 y,uint8_t bySize)
{
 8006658:	b590      	push	{r4, r7, lr}
 800665a:	b095      	sub	sp, #84	; 0x54
 800665c:	af04      	add	r7, sp, #16
 800665e:	60f8      	str	r0, [r7, #12]
 8006660:	4608      	mov	r0, r1
 8006662:	4611      	mov	r1, r2
 8006664:	461a      	mov	r2, r3
 8006666:	4603      	mov	r3, r0
 8006668:	817b      	strh	r3, [r7, #10]
 800666a:	460b      	mov	r3, r1
 800666c:	813b      	strh	r3, [r7, #8]
 800666e:	4613      	mov	r3, r2
 8006670:	71fb      	strb	r3, [r7, #7]

	char strTemp1[30];

	char strTemp2[] = "Product ID :";
 8006672:	4b27      	ldr	r3, [pc, #156]	; (8006710 <printProductID+0xb8>)
 8006674:	f107 0410 	add.w	r4, r7, #16
 8006678:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800667a:	c407      	stmia	r4!, {r0, r1, r2}
 800667c:	7023      	strb	r3, [r4, #0]

	memset(strTemp1,0,sizeof(strTemp1));
 800667e:	f107 0320 	add.w	r3, r7, #32
 8006682:	221e      	movs	r2, #30
 8006684:	2100      	movs	r1, #0
 8006686:	4618      	mov	r0, r3
 8006688:	f000 f932 	bl	80068f0 <memset>

	strcpy(strTemp1,strTemp2);
 800668c:	f107 0210 	add.w	r2, r7, #16
 8006690:	f107 0320 	add.w	r3, r7, #32
 8006694:	4611      	mov	r1, r2
 8006696:	4618      	mov	r0, r3
 8006698:	f000 f941 	bl	800691e <strcpy>

	uint8_t j = 12;
 800669c:	230c      	movs	r3, #12
 800669e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t i = 0;
 80066a2:	2300      	movs	r3, #0
 80066a4:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	for(i = 0; i<strlen(pText); i++)
 80066a8:	2300      	movs	r3, #0
 80066aa:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 80066ae:	e014      	b.n	80066da <printProductID+0x82>
	{
			strTemp1[j] = pText[i];
 80066b0:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80066b4:	68fa      	ldr	r2, [r7, #12]
 80066b6:	441a      	add	r2, r3
 80066b8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80066bc:	7812      	ldrb	r2, [r2, #0]
 80066be:	3340      	adds	r3, #64	; 0x40
 80066c0:	443b      	add	r3, r7
 80066c2:	f803 2c20 	strb.w	r2, [r3, #-32]
			j++;
 80066c6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80066ca:	3301      	adds	r3, #1
 80066cc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	for(i = 0; i<strlen(pText); i++)
 80066d0:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80066d4:	3301      	adds	r3, #1
 80066d6:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 80066da:	f897 403e 	ldrb.w	r4, [r7, #62]	; 0x3e
 80066de:	68f8      	ldr	r0, [r7, #12]
 80066e0:	f7f9 fd82 	bl	80001e8 <strlen>
 80066e4:	4603      	mov	r3, r0
 80066e6:	429c      	cmp	r4, r3
 80066e8:	d3e2      	bcc.n	80066b0 <printProductID+0x58>
	}
	Show_Str(x,y,BLACK,WHITE,(u8*)strTemp1,bySize,1);
 80066ea:	8939      	ldrh	r1, [r7, #8]
 80066ec:	8978      	ldrh	r0, [r7, #10]
 80066ee:	2301      	movs	r3, #1
 80066f0:	9302      	str	r3, [sp, #8]
 80066f2:	79fb      	ldrb	r3, [r7, #7]
 80066f4:	9301      	str	r3, [sp, #4]
 80066f6:	f107 0320 	add.w	r3, r7, #32
 80066fa:	9300      	str	r3, [sp, #0]
 80066fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006700:	2200      	movs	r2, #0
 8006702:	f7fa ff71 	bl	80015e8 <Show_Str>
}
 8006706:	bf00      	nop
 8006708:	3744      	adds	r7, #68	; 0x44
 800670a:	46bd      	mov	sp, r7
 800670c:	bd90      	pop	{r4, r7, pc}
 800670e:	bf00      	nop
 8006710:	08006a10 	.word	0x08006a10

08006714 <printTypeMCU>:
 * @brief  In ra man hinh TypeMCU cua thiet bi theo form
 * @param
 * @retval None
 */
void printTypeMCU(u8 pText,u16 x,u16 y,uint8_t bySize)
{
 8006714:	b590      	push	{r4, r7, lr}
 8006716:	b095      	sub	sp, #84	; 0x54
 8006718:	af04      	add	r7, sp, #16
 800671a:	4604      	mov	r4, r0
 800671c:	4608      	mov	r0, r1
 800671e:	4611      	mov	r1, r2
 8006720:	461a      	mov	r2, r3
 8006722:	4623      	mov	r3, r4
 8006724:	71fb      	strb	r3, [r7, #7]
 8006726:	4603      	mov	r3, r0
 8006728:	80bb      	strh	r3, [r7, #4]
 800672a:	460b      	mov	r3, r1
 800672c:	807b      	strh	r3, [r7, #2]
 800672e:	4613      	mov	r3, r2
 8006730:	71bb      	strb	r3, [r7, #6]

	char strTemp1[30];
	char strTemp2[] = "Type MCU   :";
 8006732:	4b2c      	ldr	r3, [pc, #176]	; (80067e4 <printTypeMCU+0xd0>)
 8006734:	f107 0410 	add.w	r4, r7, #16
 8006738:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800673a:	c407      	stmia	r4!, {r0, r1, r2}
 800673c:	7023      	strb	r3, [r4, #0]
	char strTemp3[3];
	hexToAscii(strTemp3, &pText, 1);
 800673e:	1df9      	adds	r1, r7, #7
 8006740:	f107 030c 	add.w	r3, r7, #12
 8006744:	2201      	movs	r2, #1
 8006746:	4618      	mov	r0, r3
 8006748:	f7ff fd1c 	bl	8006184 <hexToAscii>

	memset(strTemp1,0,sizeof(strTemp1));
 800674c:	f107 0320 	add.w	r3, r7, #32
 8006750:	221e      	movs	r2, #30
 8006752:	2100      	movs	r1, #0
 8006754:	4618      	mov	r0, r3
 8006756:	f000 f8cb 	bl	80068f0 <memset>

	strcpy(strTemp1,strTemp2);
 800675a:	f107 0210 	add.w	r2, r7, #16
 800675e:	f107 0320 	add.w	r3, r7, #32
 8006762:	4611      	mov	r1, r2
 8006764:	4618      	mov	r0, r3
 8006766:	f000 f8da 	bl	800691e <strcpy>

	uint8_t j = 12;
 800676a:	230c      	movs	r3, #12
 800676c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t i = 0;
 8006770:	2300      	movs	r3, #0
 8006772:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	for(i = 0; i<strlen(strTemp3); i++)
 8006776:	2300      	movs	r3, #0
 8006778:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800677c:	e015      	b.n	80067aa <printTypeMCU+0x96>
	{
			strTemp1[j] = strTemp3[i];
 800677e:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 8006782:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006786:	3240      	adds	r2, #64	; 0x40
 8006788:	443a      	add	r2, r7
 800678a:	f812 2c34 	ldrb.w	r2, [r2, #-52]
 800678e:	3340      	adds	r3, #64	; 0x40
 8006790:	443b      	add	r3, r7
 8006792:	f803 2c20 	strb.w	r2, [r3, #-32]
			j++;
 8006796:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800679a:	3301      	adds	r3, #1
 800679c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	for(i = 0; i<strlen(strTemp3); i++)
 80067a0:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80067a4:	3301      	adds	r3, #1
 80067a6:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 80067aa:	f897 403e 	ldrb.w	r4, [r7, #62]	; 0x3e
 80067ae:	f107 030c 	add.w	r3, r7, #12
 80067b2:	4618      	mov	r0, r3
 80067b4:	f7f9 fd18 	bl	80001e8 <strlen>
 80067b8:	4603      	mov	r3, r0
 80067ba:	429c      	cmp	r4, r3
 80067bc:	d3df      	bcc.n	800677e <printTypeMCU+0x6a>
	}

	Show_Str(x,y,BLACK,WHITE,(u8*)strTemp1,bySize,1);
 80067be:	8879      	ldrh	r1, [r7, #2]
 80067c0:	88b8      	ldrh	r0, [r7, #4]
 80067c2:	2301      	movs	r3, #1
 80067c4:	9302      	str	r3, [sp, #8]
 80067c6:	79bb      	ldrb	r3, [r7, #6]
 80067c8:	9301      	str	r3, [sp, #4]
 80067ca:	f107 0320 	add.w	r3, r7, #32
 80067ce:	9300      	str	r3, [sp, #0]
 80067d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80067d4:	2200      	movs	r2, #0
 80067d6:	f7fa ff07 	bl	80015e8 <Show_Str>
}
 80067da:	bf00      	nop
 80067dc:	3744      	adds	r7, #68	; 0x44
 80067de:	46bd      	mov	sp, r7
 80067e0:	bd90      	pop	{r4, r7, pc}
 80067e2:	bf00      	nop
 80067e4:	08006a20 	.word	0x08006a20

080067e8 <getModelID>:
void getModelID(char * pOutPut,u8 *pInPut)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b084      	sub	sp, #16
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
 80067f0:	6039      	str	r1, [r7, #0]
	memset(pOutPut,0,20);
 80067f2:	2214      	movs	r2, #20
 80067f4:	2100      	movs	r1, #0
 80067f6:	6878      	ldr	r0, [r7, #4]
 80067f8:	f000 f87a 	bl	80068f0 <memset>
	u8 j = 1;
 80067fc:	2301      	movs	r3, #1
 80067fe:	73fb      	strb	r3, [r7, #15]
	for(u8 i = 0;i < pInPut[0];i++,j++)
 8006800:	2300      	movs	r3, #0
 8006802:	73bb      	strb	r3, [r7, #14]
 8006804:	e00d      	b.n	8006822 <getModelID+0x3a>
	{
		pOutPut[i] = pInPut[j];
 8006806:	7bfb      	ldrb	r3, [r7, #15]
 8006808:	683a      	ldr	r2, [r7, #0]
 800680a:	441a      	add	r2, r3
 800680c:	7bbb      	ldrb	r3, [r7, #14]
 800680e:	6879      	ldr	r1, [r7, #4]
 8006810:	440b      	add	r3, r1
 8006812:	7812      	ldrb	r2, [r2, #0]
 8006814:	701a      	strb	r2, [r3, #0]
	for(u8 i = 0;i < pInPut[0];i++,j++)
 8006816:	7bbb      	ldrb	r3, [r7, #14]
 8006818:	3301      	adds	r3, #1
 800681a:	73bb      	strb	r3, [r7, #14]
 800681c:	7bfb      	ldrb	r3, [r7, #15]
 800681e:	3301      	adds	r3, #1
 8006820:	73fb      	strb	r3, [r7, #15]
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	781b      	ldrb	r3, [r3, #0]
 8006826:	7bba      	ldrb	r2, [r7, #14]
 8006828:	429a      	cmp	r2, r3
 800682a:	d3ec      	bcc.n	8006806 <getModelID+0x1e>
	}
}
 800682c:	bf00      	nop
 800682e:	bf00      	nop
 8006830:	3710      	adds	r7, #16
 8006832:	46bd      	mov	sp, r7
 8006834:	bd80      	pop	{r7, pc}
	...

08006838 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8006838:	480d      	ldr	r0, [pc, #52]	; (8006870 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800683a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800683c:	f7f9 fcdc 	bl	80001f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006840:	480c      	ldr	r0, [pc, #48]	; (8006874 <LoopForever+0x6>)
  ldr r1, =_edata
 8006842:	490d      	ldr	r1, [pc, #52]	; (8006878 <LoopForever+0xa>)
  ldr r2, =_sidata
 8006844:	4a0d      	ldr	r2, [pc, #52]	; (800687c <LoopForever+0xe>)
  movs r3, #0
 8006846:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006848:	e002      	b.n	8006850 <LoopCopyDataInit>

0800684a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800684a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800684c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800684e:	3304      	adds	r3, #4

08006850 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006850:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006852:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006854:	d3f9      	bcc.n	800684a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006856:	4a0a      	ldr	r2, [pc, #40]	; (8006880 <LoopForever+0x12>)
  ldr r4, =_ebss
 8006858:	4c0a      	ldr	r4, [pc, #40]	; (8006884 <LoopForever+0x16>)
  movs r3, #0
 800685a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800685c:	e001      	b.n	8006862 <LoopFillZerobss>

0800685e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800685e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006860:	3204      	adds	r2, #4

08006862 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006862:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006864:	d3fb      	bcc.n	800685e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8006866:	f000 f811 	bl	800688c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800686a:	f7fe fe99 	bl	80055a0 <main>

0800686e <LoopForever>:

LoopForever:
    b LoopForever
 800686e:	e7fe      	b.n	800686e <LoopForever>
  ldr   r0, =_estack
 8006870:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8006874:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006878:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 800687c:	0802db18 	.word	0x0802db18
  ldr r2, =_sbss
 8006880:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8006884:	20000524 	.word	0x20000524

08006888 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8006888:	e7fe      	b.n	8006888 <ADC_IRQHandler>
	...

0800688c <__libc_init_array>:
 800688c:	b570      	push	{r4, r5, r6, lr}
 800688e:	4d0d      	ldr	r5, [pc, #52]	; (80068c4 <__libc_init_array+0x38>)
 8006890:	4c0d      	ldr	r4, [pc, #52]	; (80068c8 <__libc_init_array+0x3c>)
 8006892:	1b64      	subs	r4, r4, r5
 8006894:	10a4      	asrs	r4, r4, #2
 8006896:	2600      	movs	r6, #0
 8006898:	42a6      	cmp	r6, r4
 800689a:	d109      	bne.n	80068b0 <__libc_init_array+0x24>
 800689c:	4d0b      	ldr	r5, [pc, #44]	; (80068cc <__libc_init_array+0x40>)
 800689e:	4c0c      	ldr	r4, [pc, #48]	; (80068d0 <__libc_init_array+0x44>)
 80068a0:	f000 f846 	bl	8006930 <_init>
 80068a4:	1b64      	subs	r4, r4, r5
 80068a6:	10a4      	asrs	r4, r4, #2
 80068a8:	2600      	movs	r6, #0
 80068aa:	42a6      	cmp	r6, r4
 80068ac:	d105      	bne.n	80068ba <__libc_init_array+0x2e>
 80068ae:	bd70      	pop	{r4, r5, r6, pc}
 80068b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80068b4:	4798      	blx	r3
 80068b6:	3601      	adds	r6, #1
 80068b8:	e7ee      	b.n	8006898 <__libc_init_array+0xc>
 80068ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80068be:	4798      	blx	r3
 80068c0:	3601      	adds	r6, #1
 80068c2:	e7f2      	b.n	80068aa <__libc_init_array+0x1e>
 80068c4:	0802db10 	.word	0x0802db10
 80068c8:	0802db10 	.word	0x0802db10
 80068cc:	0802db10 	.word	0x0802db10
 80068d0:	0802db14 	.word	0x0802db14

080068d4 <memcpy>:
 80068d4:	440a      	add	r2, r1
 80068d6:	4291      	cmp	r1, r2
 80068d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80068dc:	d100      	bne.n	80068e0 <memcpy+0xc>
 80068de:	4770      	bx	lr
 80068e0:	b510      	push	{r4, lr}
 80068e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80068e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80068ea:	4291      	cmp	r1, r2
 80068ec:	d1f9      	bne.n	80068e2 <memcpy+0xe>
 80068ee:	bd10      	pop	{r4, pc}

080068f0 <memset>:
 80068f0:	4402      	add	r2, r0
 80068f2:	4603      	mov	r3, r0
 80068f4:	4293      	cmp	r3, r2
 80068f6:	d100      	bne.n	80068fa <memset+0xa>
 80068f8:	4770      	bx	lr
 80068fa:	f803 1b01 	strb.w	r1, [r3], #1
 80068fe:	e7f9      	b.n	80068f4 <memset+0x4>

08006900 <strcat>:
 8006900:	b510      	push	{r4, lr}
 8006902:	4602      	mov	r2, r0
 8006904:	7814      	ldrb	r4, [r2, #0]
 8006906:	4613      	mov	r3, r2
 8006908:	3201      	adds	r2, #1
 800690a:	2c00      	cmp	r4, #0
 800690c:	d1fa      	bne.n	8006904 <strcat+0x4>
 800690e:	3b01      	subs	r3, #1
 8006910:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006914:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006918:	2a00      	cmp	r2, #0
 800691a:	d1f9      	bne.n	8006910 <strcat+0x10>
 800691c:	bd10      	pop	{r4, pc}

0800691e <strcpy>:
 800691e:	4603      	mov	r3, r0
 8006920:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006924:	f803 2b01 	strb.w	r2, [r3], #1
 8006928:	2a00      	cmp	r2, #0
 800692a:	d1f9      	bne.n	8006920 <strcpy+0x2>
 800692c:	4770      	bx	lr
	...

08006930 <_init>:
 8006930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006932:	bf00      	nop
 8006934:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006936:	bc08      	pop	{r3}
 8006938:	469e      	mov	lr, r3
 800693a:	4770      	bx	lr

0800693c <_fini>:
 800693c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800693e:	bf00      	nop
 8006940:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006942:	bc08      	pop	{r3}
 8006944:	469e      	mov	lr, r3
 8006946:	4770      	bx	lr
